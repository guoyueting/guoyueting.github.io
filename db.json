{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1530415406000},{"_id":"source/.DS_Store","hash":"2ecca5dd0b7260968763bb4ded8695e5748d3d0e","modified":1530516828000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1530415406000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1530415406000},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1530417581000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1530415406000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1530415406000},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1530415406000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1530415406000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1530415406000},{"_id":"themes/next/_config.yml","hash":"e45527948941015dc8b624caf621dccd705bcaa9","modified":1531969904000},{"_id":"source/categories/index.md","hash":"072845997fcdf291e86332be364d6625fba1aebb","modified":1530455210000},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1530415406000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1530415406000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1530415406000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1530415406000},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1530415406000},{"_id":"source/_posts/Hexo安装与发布.md","hash":"87ca6c629f37bfd550b7746204d8e7fdf4bcc568","modified":1530455546000},{"_id":"source/_posts/常用的CSS小技巧（一）.md","hash":"5cd03c8cfa741011a9b26b2cd12de05aebeafe96","modified":1532516094000},{"_id":"source/_posts/React脚手架.md","hash":"43f195f77d65fbd0f72b94e013d5dfe540dbbd93","modified":1531976804000},{"_id":"source/product/index.md","hash":"1909b5eb124e71dfdb766005061d0839e96d2757","modified":1530417682000},{"_id":"source/tags/index.md","hash":"67d945b3bd24d6539e94a32b36cbb44371cf4342","modified":1530416274000},{"_id":"source/_posts/常用的CSS小技巧（二）.md","hash":"f7d2292c889f317e608983f26d00e290abe2bb30","modified":1533984292000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1530415406000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1530415406000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1530415406000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1530415406000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1530415406000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1530415406000},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1530415406000},{"_id":"themes/next/scripts/helpers.js","hash":"4cc592788f088a99dd1d70875e8344b6e16cc34d","modified":1530415406000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1530415406000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1530415406000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1530415406000},{"_id":"themes/next/source/.DS_Store","hash":"497a22c1b44426182974566cd0d9e7ebb9602fd7","modified":1530417597000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1530415406000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1530415406000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1530415406000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1530415406000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1530415406000},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1530415406000},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1530415406000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1530415406000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1530415406000},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1530415406000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1530415406000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1530415406000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1530415406000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1530415406000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1530415406000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1530415406000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1530415406000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1530415406000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1530415406000},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1530415406000},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1530415406000},{"_id":"themes/next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1530415406000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1530415406000},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1530415406000},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1530415406000},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1530415406000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1530415406000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1530415406000},{"_id":"themes/next/languages/zh-CN.yml","hash":"e54becddd5b9b80e9924442a46663414dbd46a4c","modified":1530417320000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1530415406000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1530415406000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1530415406000},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1530415406000},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1530415406000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1530415406000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1530415406000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1530415406000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"545102e3aa3ce494f7046abf71cefb7aaf671559","modified":1530415406000},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1530415406000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1530415406000},{"_id":"themes/next/scripts/tags/note.js","hash":"265dc7ee83d3fe317e88058e80aa8170230a005e","modified":1530415406000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"6bdf2a1a23cb9922fa809c79af3b06339c28cd70","modified":1530415406000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1530415406000},{"_id":"themes/next/source/css/.DS_Store","hash":"bbd874d841ee8ed19a25b4fd8382ed8fc6f2c115","modified":1530454730000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1530415406000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1530415406000},{"_id":"themes/next/source/js/.DS_Store","hash":"bd7c5ffc965c42df1b10ea6b51aa93e782056006","modified":1530417586000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1530415406000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1530415406000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1530415406000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1530415406000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1530415406000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1530415406000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1530415406000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1530415406000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1530415406000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530415406000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1530415406000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1530415406000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1530415406000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530415406000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1530415406000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1530415406000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1530415406000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1530415406000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1530415406000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1530415406000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1530415406000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1530415406000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1530415406000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1530415406000},{"_id":"themes/next/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1530415406000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1530415406000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1530415406000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1530415406000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1530415406000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1530415406000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1530415406000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1530415406000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1530415406000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1530415406000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1530415406000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1530415406000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1530415406000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1530415406000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cf8fe76993b513b97f379832222b6ec7e41a1c15","modified":1531969579000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1530415406000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1530415406000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1530415406000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1530415406000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1530415406000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1530415406000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530415406000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"877e8cf77586cdd1e885d77d937afd85d9011911","modified":1530417597000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1530415406000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1530415406000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1530415406000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1530415406000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1530415406000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"66fd28196b8c2ffaddda27e66c4cf4428d7a12ce","modified":1530415406000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"04d0daf587243a983754876fe2928070c3e3b2a8","modified":1530415406000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1530415406000},{"_id":"themes/next/source/js/src/.DS_Store","hash":"741f0f6de4a16ba2e97985b249c7d6c30c7caf70","modified":1530417592000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1530415406000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1530415406000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1530415406000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1530415406000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1530415406000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1530415406000},{"_id":"themes/next/source/js/src/motion.js","hash":"4726b2cf26e9aebb56cf607905471f3acbd690ae","modified":1530415406000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1530415406000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1530415406000},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1530415406000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1530415406000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1530415406000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1530415406000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1530415406000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1530415406000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1530415406000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1530415406000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1530415406000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1530415406000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1530415406000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1530415406000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1530415406000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1530415406000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1530415406000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1530415406000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1530415406000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1530415406000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1530415406000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1530415406000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1530415406000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1530415406000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1530415406000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1530415406000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1530415406000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1530415406000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1530415406000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1530415406000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1530415406000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1530415406000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1530415406000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1530415406000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1530415406000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1530415406000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1530415406000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1530415406000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1530415406000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1530415406000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1530415406000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1530415406000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1530415406000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1530415406000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1530415406000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1530415406000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1530415406000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1530415406000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1530415406000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1530415406000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1530415406000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1530415406000},{"_id":"public/categories/index.html","hash":"facd15b375c2d84e85cf4af21960c1c41b4c1760","modified":1534324466732},{"_id":"public/product/index.html","hash":"277588f9f7b4aae11637bff707395941f02f3a2e","modified":1534324466735},{"_id":"public/tags/index.html","hash":"444ca32c167f1460ff05e53a28db1d2043834527","modified":1534324466735},{"_id":"public/archives/index.html","hash":"8c459e5ab811764182ac62f10ebd1059d2fe5fc6","modified":1534324466735},{"_id":"public/archives/2018/index.html","hash":"e1a242d78617887b652c325292ea8bea9259d1c3","modified":1534324466735},{"_id":"public/archives/2018/06/index.html","hash":"f7b8309826d6d092351d4cee3baa3d2b538e5125","modified":1534324466735},{"_id":"public/archives/2018/07/index.html","hash":"a6df9129c8639b167f53e16525411b95f7f66d0b","modified":1534324466735},{"_id":"public/archives/2018/08/index.html","hash":"98a603ddb084850a2a71c197db5314ef56095de2","modified":1534324466735},{"_id":"public/categories/工具-配置/index.html","hash":"6ed40f16fb3555aa81506b14049bbd664e5026f2","modified":1534324466736},{"_id":"public/categories/React全家桶/index.html","hash":"f88414736735b1e6abcfedfc36d36a9066c0356f","modified":1534324466737},{"_id":"public/categories/CSS/index.html","hash":"b4ccc6f76e6e0a63cb27caa2268434bdacac5e9e","modified":1534324466737},{"_id":"public/2018/08/10/常用的CSS小技巧（二）/index.html","hash":"5cd275d06dcff293aaaa929f4707d8fbbf60ac4f","modified":1534324466737},{"_id":"public/2018/07/25/常用的CSS小技巧（一）/index.html","hash":"2bfd650099f759722c170a45473ab44e062bb44a","modified":1534324466737},{"_id":"public/2018/07/01/React脚手架/index.html","hash":"ed3ec0414ed8b67c65c9031915e94893aed3d44a","modified":1534324466738},{"_id":"public/2018/06/23/Hexo安装与发布/index.html","hash":"82b1e2f7ad62604b3792fb20f95b56f455e99268","modified":1534324466738},{"_id":"public/index.html","hash":"005f8e96bae65544746e1ae7578220119e9a3b98","modified":1534324466738},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1533984429449},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533984429449},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533984429449},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1533984429449},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1533984429450},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1533984429450},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1533984429450},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1533984429450},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1533984429450},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533984429450},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533984429450},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533984429450},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1533984429450},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1533984429450},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533984429450},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1533984429450},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1533984429450},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533984429451},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1533984429451},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1533984429451},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533984430117},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533984430120},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1533984430134},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1533984430135},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1533984430135},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1533984430135},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1533984430135},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1533984430135},{"_id":"public/js/src/motion.js","hash":"4726b2cf26e9aebb56cf607905471f3acbd690ae","modified":1533984430135},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1533984430135},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1533984430135},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1533984430135},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1533984430135},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1533984430135},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1533984430135},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1533984430135},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1533984430135},{"_id":"public/css/main.css","hash":"dd8ec86a402e96c6ff6572b567f22ccde3917299","modified":1533984430135},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1533984430135},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1533984430135},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1533984430135},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1533984430135},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1533984430135},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1533984430135},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533984430135},{"_id":"source/_posts/雅虎35条军规——前端性能优化.md","hash":"437a71de81bbe807766c4916123db9822cb13f52","modified":1534324375000},{"_id":"public/categories/性能优化/index.html","hash":"d70a7f68d8ece65b425065dc6ff763b3107cf4c0","modified":1534324466741},{"_id":"public/2018/08/13/雅虎35条军规——前端性能优化/index.html","hash":"fa636568c25bc404cbd27ddbeaa216e1dcd8fa27","modified":1534324466742},{"_id":"source/_posts/前端性能优化——掘金小册阅读整理.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540621870000}],"Category":[{"name":"工具&配置","_id":"cjkpapzj0000548r69mzlfn4k"},{"name":"React全家桶","_id":"cjkpapzj5000748r6aidzdtyn"},{"name":"CSS","_id":"cjkpapzj6000948r6c982h2mo"},{"name":"性能优化","_id":"cjkrpoghj00011br6kev2v54m"}],"Data":[],"Page":[{"title":"文章分类","date":"2018-07-01T14:25:01.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-07-01 22:25:01\ntype: categories\n---\n","updated":"2018-07-01T14:26:50.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkpapzh6000048r6edco3vfo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"product","date":"2018-07-01T04:00:32.000Z","type":"product","_content":"","source":"product/index.md","raw":"---\ntitle: product\ndate: 2018-07-01 12:00:32\ntype: product\n---\n","updated":"2018-07-01T04:01:22.000Z","path":"product/index.html","comments":1,"layout":"page","_id":"cjkpapzin000248r6x3x1zw5g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-01T03:37:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-01 11:37:28\ntype: tags\n---\n","updated":"2018-07-01T03:37:54.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkpapzir000448r6gb6z8g7u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo安装与发布","_content":"## 安装\n1. 安装hexo\n> `npm install hexo-cli -g`\n\n2. 初始化hexo\n> `hexo init <文件名>`\n\n3. 打开文件\n> `cd <文件名>`\n\n4. 安装node_modules\n> `npm install`\n\n5. 启动hexo服务，启动后可通过`http://localhost:4000/`就可以看到博客啦~\n> `hexo server`\n\n## 发布\n1. github新建一个项目（start a project）,新建分支，如hexo,打开settings，将repository name命名为`XXX.github.io`,该仓库可以被发布到`https://XXX.github.io`\n\n2. 打开站点的配置文件_config.yml，修改为:\n\n  ```\ntype: git\nrepo: https://github.com/guoyueting/guoyueting.github.io\nbranch: master\n  ```\n  deploy的配置是让hexo知道你要把blog部署在哪个位置，因此hexo分支可以保留当前源代码，master分支则用来发布的html等文件。\n\n3. 为了使用hexo d来部署到git上，需要先安装Git部署插件。\n> `npm install hexo-deployer-git --save`\n\n\n4. 清除旧public文件\n> `hexo clean`\n\n5. 生成并发布html，本地生成不用加-d\n> `hexo g -d`\n\n\n\n\n\n\n\n\n","source":"_posts/Hexo安装与发布.md","raw":"---\ntitle: Hexo安装与发布\ncategories: 工具&配置\n---\n## 安装\n1. 安装hexo\n> `npm install hexo-cli -g`\n\n2. 初始化hexo\n> `hexo init <文件名>`\n\n3. 打开文件\n> `cd <文件名>`\n\n4. 安装node_modules\n> `npm install`\n\n5. 启动hexo服务，启动后可通过`http://localhost:4000/`就可以看到博客啦~\n> `hexo server`\n\n## 发布\n1. github新建一个项目（start a project）,新建分支，如hexo,打开settings，将repository name命名为`XXX.github.io`,该仓库可以被发布到`https://XXX.github.io`\n\n2. 打开站点的配置文件_config.yml，修改为:\n\n  ```\ntype: git\nrepo: https://github.com/guoyueting/guoyueting.github.io\nbranch: master\n  ```\n  deploy的配置是让hexo知道你要把blog部署在哪个位置，因此hexo分支可以保留当前源代码，master分支则用来发布的html等文件。\n\n3. 为了使用hexo d来部署到git上，需要先安装Git部署插件。\n> `npm install hexo-deployer-git --save`\n\n\n4. 清除旧public文件\n> `hexo clean`\n\n5. 生成并发布html，本地生成不用加-d\n> `hexo g -d`\n\n\n\n\n\n\n\n\n","slug":"Hexo安装与发布","published":1,"date":"2018-06-23T12:59:39.000Z","updated":"2018-07-01T14:32:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkpapzii000148r6lzo2ly0x","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>安装hexo</p>\n<blockquote>\n<p><code>npm install hexo-cli -g</code></p>\n</blockquote>\n</li>\n<li><p>初始化hexo</p>\n<blockquote>\n<p><code>hexo init &lt;文件名&gt;</code></p>\n</blockquote>\n</li>\n<li><p>打开文件</p>\n<blockquote>\n<p><code>cd &lt;文件名&gt;</code></p>\n</blockquote>\n</li>\n<li><p>安装node_modules</p>\n<blockquote>\n<p><code>npm install</code></p>\n</blockquote>\n</li>\n<li><p>启动hexo服务，启动后可通过<code>http://localhost:4000/</code>就可以看到博客啦~</p>\n<blockquote>\n<p><code>hexo server</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><ol>\n<li><p>github新建一个项目（start a project）,新建分支，如hexo,打开settings，将repository name命名为<code>XXX.github.io</code>,该仓库可以被发布到<code>https://XXX.github.io</code></p>\n</li>\n<li><p>打开站点的配置文件_config.yml，修改为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repo: https://github.com/guoyueting/guoyueting.github.io</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>deploy的配置是让hexo知道你要把blog部署在哪个位置，因此hexo分支可以保留当前源代码，master分支则用来发布的html等文件。</p>\n</li>\n<li><p>为了使用hexo d来部署到git上，需要先安装Git部署插件。</p>\n<blockquote>\n<p><code>npm install hexo-deployer-git --save</code></p>\n</blockquote>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>清除旧public文件</p>\n<blockquote>\n<p><code>hexo clean</code></p>\n</blockquote>\n</li>\n<li><p>生成并发布html，本地生成不用加-d</p>\n<blockquote>\n<p><code>hexo g -d</code></p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>安装hexo</p>\n<blockquote>\n<p><code>npm install hexo-cli -g</code></p>\n</blockquote>\n</li>\n<li><p>初始化hexo</p>\n<blockquote>\n<p><code>hexo init &lt;文件名&gt;</code></p>\n</blockquote>\n</li>\n<li><p>打开文件</p>\n<blockquote>\n<p><code>cd &lt;文件名&gt;</code></p>\n</blockquote>\n</li>\n<li><p>安装node_modules</p>\n<blockquote>\n<p><code>npm install</code></p>\n</blockquote>\n</li>\n<li><p>启动hexo服务，启动后可通过<code>http://localhost:4000/</code>就可以看到博客啦~</p>\n<blockquote>\n<p><code>hexo server</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><ol>\n<li><p>github新建一个项目（start a project）,新建分支，如hexo,打开settings，将repository name命名为<code>XXX.github.io</code>,该仓库可以被发布到<code>https://XXX.github.io</code></p>\n</li>\n<li><p>打开站点的配置文件_config.yml，修改为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repo: https://github.com/guoyueting/guoyueting.github.io</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>deploy的配置是让hexo知道你要把blog部署在哪个位置，因此hexo分支可以保留当前源代码，master分支则用来发布的html等文件。</p>\n</li>\n<li><p>为了使用hexo d来部署到git上，需要先安装Git部署插件。</p>\n<blockquote>\n<p><code>npm install hexo-deployer-git --save</code></p>\n</blockquote>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>清除旧public文件</p>\n<blockquote>\n<p><code>hexo clean</code></p>\n</blockquote>\n</li>\n<li><p>生成并发布html，本地生成不用加-d</p>\n<blockquote>\n<p><code>hexo g -d</code></p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"脚手架架构设计——React&Mobx从0到1最佳实践","date":"2018-07-01T03:56:13.000Z","_content":"## 一、前言\nReact现在已经有很多脚手架工具，如**create-react-app**，支持一键创建一个React应用项目结构，很方便，但是享受方便的同时，也失去了对项目架构及技术栈完整学习的机会，而且通常脚手架创建的应用技术架构并不能完全满足我们的业务需求，需要我们自己修改，完善，所以如果希望对项目架构有更深掌控，最好还是从0到1理解一个项目。\n\n## 二、项目结构与技术栈\n### 文件目录\n这次应用架构设计不使用任何脚手架，需要自己创建每一个文件，引入每一个技术和三方库，最终形成完整的应用，包括选择的完整技术栈。\n项目结构图如下：1. src为应用源代码目录； 2. webpack.config.js为webpack配置入口文件； 3. package.json为项目依赖管理文件； 4. .babelrc文件，babel的配置文件，使用babel编译React和JavaScript代码； 5.README.md为项目说明文档； 6.bird-config是gulp-bird转发工具的配置文件；7.postcss.config.js是postcss的配置文件\n\n**Feature**\n+ 可以解析JSX语法\n+ 可以解析ES6语法新特性\n+ 支持SCSS预处理器\n+ 单独分离CSS样式文件\n+ 支持文件MD5戳，解决文件缓存问题\n+ 支持图片、图标字体等资源的编译\n+ 区分开发环境和生产环境\n+ 分离业务功能代码和公共依赖代码\n\n![文件目录](http://pbzqi3myf.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png \"文件目录\")\n\n### 技术栈\n对整个技术栈进行分析，要考虑哪几个方面呢？\n1. react和react-dom库是项目前提； \n2. react路由； \n3. 应用状态管理容器；\n4. 如何优雅地发送ajax请求；\n5. 打包上线发版，测试环境线上环境\n6. css预编译及后处理，考虑兼容性写法；\n7. 采用ES6写码，辅助工具，写代码更容易；\n8. 此外，往往后端开发好的接口会部署在测试环境，而不是本地，因此还需要考虑联调时的代理转发。\n\n\n根据以上划分决定选用以下第三方库和工具构成项目的完整技术栈：\n1. react，react-dom;\n2. react-router管理应用路由;\n3. mobx作为JavaScript状态容器，mobx-react将React应用与mobx连接，Mobx相关详情请参见[Mobx官方文档](https://cn.mobx.js.org/)； \n4. axios库发送ajax请求，解决接口调用问题，请参见[Axios](https://www.kancloud.cn/yunye/axios/234845)\n5. webpack配置;\n6. 安装postcss的autoprefixer;\n7. 需要安装babel，还可以使用lodash等可选辅助类，工具类库提升开发效率；\n8. 代理转发工具选择的是百度BEFE团队开发的[gulp-bird](https://www.npmjs.com/package/gulp-bird)。\n\n### 组件划分\nReact组件化开发原则是组件负责渲染UI，组件不同状态对应不同UI，通常遵循以下组件设计思路：\n1. 路由组件：负责项目路由，可嵌套;\n1. 布局组件：仅仅涉及应用UI界面结构的组件，不涉及任何业务逻辑，数据请求及操作;\n2. 容器组件：负责获取数据，处理业务逻辑，通常在render()函数内返回展示型组件；\n3. UI组件：指抽象出的可重用的UI独立组件，通常是无状态组件;\n\n以本项目section的组件划分为例，index.js是入口文件，同时也承担了路由组件的角色，layout是布局组件，仅仅负责UI界面结构，homeindex是容器组件，是首页的业务逻辑，islider则是轮播图的独立组件，可复用。\n![组件划分](http://pbzqi3myf.bkt.clouddn.com/%E7%BB%84%E4%BB%B6.png \"组件划分\")\n\n\n## 三、项目搭建步骤\n### 3.1准备工作\n+ **git新建项目**\n\n```\ngit init\ntouch README\ngit add README\ngit commit -m'first commit'\ngit remote add origin git@XXXXX.git\ngit push origin master\n\n```\n\n+ **npm安装react相关依赖包**\n\n采用`npm install XXX -save`或`npm install XXX -save-dev`配置安装相关npm包,如果直接复制，可以直接`npm install`安装\n\n```\n{\n    \"name\": \"zhiqiu\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"build\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production\",\n        \"dev\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development\",\n        \"qa\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa\",\n        \"start\": \"./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local\"\n    },\n    \"proxy\": {\n        \"/mansion\": {\n            \"target\": \"http://localhost:8009\"\n        }\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n        \"axios\": \"^0.18.0\",\n        \"babel-cli\": \"^6.26.0\",\n        \"babel-core\": \"^6.26.0\",\n        \"babel-loader\": \"^7.1.4\",\n        \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n        \"babel-polyfill\": \"^6.26.0\",\n        \"babel-preset-env\": \"^1.6.1\",\n        \"babel-preset-es2015\": \"^6.24.1\",\n        \"babel-preset-react\": \"^6.24.1\",\n        \"babel-preset-stage-2\": \"^6.24.1\",\n        \"classnames\": \"^2.2.5\",\n        \"clean-webpack-plugin\": \"^0.1.19\",\n        \"copy-webpack-plugin\": \"^4.5.1\",\n        \"css-loader\": \"^0.28.11\",\n        \"extract-text-webpack-plugin\": \"^3.0.2\",\n        \"file-loader\": \"^1.1.11\",\n        \"html-webpack-inline-source-plugin\": \"0.0.10\",\n        \"html-webpack-plugin\": \"^3.2.0\",\n        \"islider\": \"^0.1.0\",\n        \"mobx\": \"^4.1.0\",\n        \"mobx-react\": \"^5.0.0\",\n        \"node-sass\": \"^4.8.3\",\n        \"path\": \"^0.12.7\",\n        \"react\": \"^16.2.0\",\n        \"react-dom\": \"^16.2.0\",\n        \"react-router\": \"^4.2.0\",\n        \"react-router-dom\": \"^4.2.2\",\n        \"sass-loader\": \"^6.0.7\",\n        \"style-loader\": \"^0.20.3\",\n        \"url-loader\": \"^1.0.1\",\n        \"webpack\": \"^3.10.0\",\n        \"webpack-bundle-analyzer\": \"^2.11.1\",\n        \"webpack-dev-server\": \"^2.11.2\"\n    },\n    \"dependencies\": {\n        \"autoprefixer\": \"^8.6.4\",\n        \"babel-plugin-lodash\": \"^3.3.4\",\n        \"gulp-bird\": \"^0.2.4\",\n        \"hi-ui\": \"0.0.9\",\n        \"islider.js\": \"^2.2.2\",\n        \"jquery\": \"^3.3.1\",\n        \"lodash\": \"^4.17.10\",\n        \"postcss-loader\": \"^2.1.5\",\n        \"vconsole\": \"^3.2.0\"\n    }\n}\n```\n\n### 3.2 路由和数据状态管理\n路由安装mobx-react，react-router模块;\n[React Router](http://react-guide.github.io/react-router-cn/docs/API.html)是完整的React路由解决方案，也是开发React应用最常使用的路由管理库，它提供简单的API，以声明式方式实现强大的路由功能，诸如按需加载，动态路由等。\n1.声明式：语法简洁，清晰；\n2.按需加载：延迟加载，根据使用需要判断是否需要加载；\n3.动态路由：动态组合应用路由结构，更灵活，更符合组件化开发模式；\n\n```\n/**\n * @file index 入口页面\n * @author guoyueting\n */\nimport React from 'react';\nimport {render} from 'react-dom';\nimport {HashRouter, Route, Redirect} from 'react-router-dom';\nimport {Provider} from 'mobx-react';\nimport storeTree from './storeTree';\nimport 'section/common/scss/common.scss';\nimport Layout from 'section/layout/layout.js';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Provider {...storeTree} >\n                <HashRouter>\n                    <Route path=\"/\" component={Layout}/>\n                </HashRouter>\n            </Provider>\n        );\n    }\n}\n\nrender(<App/>, document.getElementById('app'));\n```\n数据状态管理，安装mobx，确定storetree\n\n```\n/**\n * @file storeTree 整个app的状态树\n * @author guoyueting\n */\n'use strict';\n\nimport {observable, action, extendObservable, runInAction} from 'mobx';\nimport NavState from 'section/nav/navStore';\nimport iSliderState from 'section/homeindex/component/islider/isliderStore';\nimport hotPointState from 'section/homeindex/component/hotpoint/hotpointStore';\nimport recommendState from 'section/homeindex/component/recommend/recommendStore';\n\nimport serviceState from 'section/service/serviceStore';\nimport repairState from 'section/myrepair/myrepairStore';\n\n\nclass AppState {\n\t// 全局store\n\t// ...\n}\n\nexport default {\n    AppState: new AppState(),\n    NavState: new NavState(),\n    iSliderState: new iSliderState(),\n    hotPointState: new hotPointState(),\n    recommendState: new recommendState(),\n    serviceState: new serviceState(),\n    repairState: new repairState()\n}\n```\n\n**@observer** 函数/修饰器用于react组件。通过mobx-react依赖包来提供。它通过mobx.autorun来包装了组件的render函数，以确保组件的render函数在任何数据的更改是强制重新渲染。\n\n**Autorun**是用在一些你想要产生一个不用观察者参与的被动调用函数里面。当autorun被使用的时候，一旦依赖项发生变化，autorun提供的函数就会被执行。\n\n**action**是任何改变状态的事物。\n\n```\n/**\n * @file serviceStore\n * @author guoyueting\n */\n'use strict';\n\nimport {observable, action, runInAction} from 'mobx';\nimport _ from 'lodash';\nimport * as model from 'src/itsm/model/model';\nimport {getSearchParam} from 'section/common/js/utils';\n\nexport default class serviceState {\n    @observable serviceList = [];\n\n    @action getServiceList() {\n        let params = {\n            mappedAppKey: getSearchParam('appKey')\n        };\n        model.getServiceListList(params).then(data => {\n            runInAction(()=>{\n                this.serviceList = _.get(data, 'data.data');\n            });\n        });\n    }\n\n    @action serviceClick(id) {\n        let params = {\n            mappedAppKey: getSearchParam('appKey'),\n            id: id\n        };\n        model.serviceClick(params);\n    }\n}\n```\n\n### 3.3 Axios库发送ajax请求\n安装axios，并通过get/post/put/delete等方式请求接口，对于json数据，一般在post请求进行数据格式转换，并在请求头部设置：\n\n```\n/**\n * @file  接口文件\n * @author guoyueting\n */\nimport axios from 'axios';\nlet axiosConfig = {\n    headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        'Access-Control-Allow-Origin': '*'\n    }\n};\n// 获取列表\nexport let getHotList = function (data) {\n    return axios.post('/rdwtv2/api/hot', JSON.stringify(data), axiosConfig);\n};\n```\n\n### 3.4 代理转发gulp-bird\n[gulp-bird](https://www.npmjs.com/package/gulp-bird)是由百度BEFE团队开发的代理转发工具，并不是一个gulp插件，在bird基础上进行了一些优化并发布到了npm，配置方法和bird一样。\n配置目标服务器host和port等，参考如下。\n\n```\n/**\n * @file  bird-config.js\n * @author guoyueting\n */\nvar bird = require('./node_modules/gulp-bird/index');\n// 静态服务器配置，可同时配置多个，域名需host到127.0.0.1\nvar server = {\n    '8009': {\n        // 静态文件根目录\n        'basePath': './src/',\n        // 是否开启调试模式，true(表示server端不缓存)，false（反之）\n        'debug': true\n        // 忽略的静态文件请求，与此正则匹配的请求将直接走转发规则（可选配置）\n        // 'ignoreRegExp': /\\/js\\/urls\\.js/g\n\n    }\n};\n// 转发规则——静态服务器没有响应的或者忽略的请求将根据一下规则转发\nvar transpondRules = {\n    '8009': {\n        // 目标服务器的ip和端口，域名也可，但注意不要被host了\n        targetServer: {\n            'port': '8680',\n            // 'port': '8080',\n            'host': 'http://m1-ite-hidev04.m1.baidu.com',\n            // 'host': 'cp01-ps-dev373-liuchao31.epc.baidu.com',\n            // 当为true时，如果cookie or header中有相同key，则替换\n            'replaceHeaders': true,\n            'headers': {\n                    'cookie': ''}\n            }\n        // 特殊请求转发，可选配置，内部的host、port和attachHeaders为可选参数\n        regExpPath: {\n            // '/oa-frontend-apply-1.0.0-SNAPSHOT': {\n            //     'host': 'cp01-dev-heliping.epc.baidu.com/',\n            //     'port': '8080',\n            //     //'attachHeaders': {'app-id': 5},\n            //     'path': '\\/'\n            // }npm\n        }\n    },\n    'ajaxOnly': false\n};\n\nvar toolsConf = {\n    weinre: {\n        // 和移动调试工具条中的vconsole冲突, 当为true时vconsole自动关闭\n        open: false,\n        port: 8009\n    },\n    // 移动端调试工具条，PC端开发可关闭\n    showTools: false\n};\n\nbird.start(server, transpondRules, toolsConf);\n\n```\n\n### 3.5webpack配置打包\n下面是一个较为基础的webpack文件配置。entry是配置模块的入口，webpack执行构建的第一步将从入口开始搜寻及递归解析出所有入口依赖的模块；output定义了打包后的输出文件名、路径；module配置模块的读取和解析规则，通常用来配置loader；resolve配置Webpack如何寻找模块对应的文件；Plugins用于扩展webpack的功能，几乎所有Webpack无法直接实现的功能都能在社区找到开源的Plugin去解决。\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = function(env) {\n    console.log(env);\n    return {\n        entry: {\n            'index': './src/itsm/index.js'\n        },\n        output: {\n            filename: 'js/[name]-[chunkhash].js',\n            path: path.resolve(__dirname, './build'),\n            chunkFilename: '[name].[chunkhash:4].child.js'\n        },\n        module: {\n            rules: [{\n                test: /(\\.jsx|\\.js)$/i,\n                use: [{\n                    loader: 'babel-loader'\n                }]\n                // exclude: /node_modules/\n            },\n            {\n                test: /(\\.scss|\\.sass)$/i,\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: [{\n                        loader: 'css-loader',\n                        options: {\n                            module: false,\n                            minimize: true\n                        }\n                    }, {\n                        loader: 'postcss-loader',\n                    }, {\n                        loader: 'sass-loader',\n                        options: {\n                            sourceMap: false\n                        }\n                    }]\n                })\n            },\n            {\n                test: /(\\.png|\\.jpg|\\.jpeg|\\.gif)$/i,\n                use: [{\n                    loader: 'url-loader',\n                    options: {\n                        limit: 100\n                    }\n                }]\n            }]\n        },\n        resolve: {\n            alias: {\n                'src': path.resolve(__dirname, 'src'),\n                'section': path.resolve(__dirname, 'src/itsm/section'),\n                'img': path.resolve(__dirname, 'src/itsm/img'),\n                'modules': path.resolve(__dirname, 'node_modules/islider.js/build')\n            }\n        },\n        plugins: [\n            new CleanWebpackPlugin(['./build']),\n            new webpack.DefinePlugin({\n                'process.env.NODE_ENV': JSON.stringify(env.NODE_ENV || 'development'),\n                'isDev': JSON.stringify(env.isDev || 'true')\n            }),\n            new ExtractTextPlugin('style.css'),\n            new HtmlWebpackPlugin({\n                template: './src/itsm/index.html',\n                filename: './index.html',\n                chunks: ['index']\n            })\n        ],\n        devServer: {\n            host: '0.0.0.0',\n            port: 9822,\n            proxy: {\n                '/rdwtv2': 'http://localhost:8009'\n            }\n        }\n    }\n}\n```\n\n### 3.6打包指令配置\n配置不同环境的变量值，生产环境，QA环境，开发环境某些变量可能需要根据环境进行配置，然后用webpack的definePlugin插件，定义全局变量，可以保证在和环境有关的变量取值的正确性。\n\n\n```\n\"scripts\": {\n    \"build\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production\",\n    \"dev\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development\",\n    \"qa\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa\",\n    \"start\": \"./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local\"\n}\n```\n\n## 四、未来改进\n未来架构设计还需要完善的点：\n1. Immutable数据，考虑引入Immutable.js； \n2. 测试，考虑jest集成应用测试\n3. 函数库，如ramda，underscore； \n4. 调试工具，reactotron,react-devtools\n\n\n## 五、Demo地址\n最后，附上demo地址：`https://github.com/guoyueting/react-mobx-seed`\n\n\n\n\n","source":"_posts/React脚手架.md","raw":"---\ntitle: 脚手架架构设计——React&Mobx从0到1最佳实践\ndate: 2018-07-01 11:56:13\ncategories: React全家桶\n---\n## 一、前言\nReact现在已经有很多脚手架工具，如**create-react-app**，支持一键创建一个React应用项目结构，很方便，但是享受方便的同时，也失去了对项目架构及技术栈完整学习的机会，而且通常脚手架创建的应用技术架构并不能完全满足我们的业务需求，需要我们自己修改，完善，所以如果希望对项目架构有更深掌控，最好还是从0到1理解一个项目。\n\n## 二、项目结构与技术栈\n### 文件目录\n这次应用架构设计不使用任何脚手架，需要自己创建每一个文件，引入每一个技术和三方库，最终形成完整的应用，包括选择的完整技术栈。\n项目结构图如下：1. src为应用源代码目录； 2. webpack.config.js为webpack配置入口文件； 3. package.json为项目依赖管理文件； 4. .babelrc文件，babel的配置文件，使用babel编译React和JavaScript代码； 5.README.md为项目说明文档； 6.bird-config是gulp-bird转发工具的配置文件；7.postcss.config.js是postcss的配置文件\n\n**Feature**\n+ 可以解析JSX语法\n+ 可以解析ES6语法新特性\n+ 支持SCSS预处理器\n+ 单独分离CSS样式文件\n+ 支持文件MD5戳，解决文件缓存问题\n+ 支持图片、图标字体等资源的编译\n+ 区分开发环境和生产环境\n+ 分离业务功能代码和公共依赖代码\n\n![文件目录](http://pbzqi3myf.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png \"文件目录\")\n\n### 技术栈\n对整个技术栈进行分析，要考虑哪几个方面呢？\n1. react和react-dom库是项目前提； \n2. react路由； \n3. 应用状态管理容器；\n4. 如何优雅地发送ajax请求；\n5. 打包上线发版，测试环境线上环境\n6. css预编译及后处理，考虑兼容性写法；\n7. 采用ES6写码，辅助工具，写代码更容易；\n8. 此外，往往后端开发好的接口会部署在测试环境，而不是本地，因此还需要考虑联调时的代理转发。\n\n\n根据以上划分决定选用以下第三方库和工具构成项目的完整技术栈：\n1. react，react-dom;\n2. react-router管理应用路由;\n3. mobx作为JavaScript状态容器，mobx-react将React应用与mobx连接，Mobx相关详情请参见[Mobx官方文档](https://cn.mobx.js.org/)； \n4. axios库发送ajax请求，解决接口调用问题，请参见[Axios](https://www.kancloud.cn/yunye/axios/234845)\n5. webpack配置;\n6. 安装postcss的autoprefixer;\n7. 需要安装babel，还可以使用lodash等可选辅助类，工具类库提升开发效率；\n8. 代理转发工具选择的是百度BEFE团队开发的[gulp-bird](https://www.npmjs.com/package/gulp-bird)。\n\n### 组件划分\nReact组件化开发原则是组件负责渲染UI，组件不同状态对应不同UI，通常遵循以下组件设计思路：\n1. 路由组件：负责项目路由，可嵌套;\n1. 布局组件：仅仅涉及应用UI界面结构的组件，不涉及任何业务逻辑，数据请求及操作;\n2. 容器组件：负责获取数据，处理业务逻辑，通常在render()函数内返回展示型组件；\n3. UI组件：指抽象出的可重用的UI独立组件，通常是无状态组件;\n\n以本项目section的组件划分为例，index.js是入口文件，同时也承担了路由组件的角色，layout是布局组件，仅仅负责UI界面结构，homeindex是容器组件，是首页的业务逻辑，islider则是轮播图的独立组件，可复用。\n![组件划分](http://pbzqi3myf.bkt.clouddn.com/%E7%BB%84%E4%BB%B6.png \"组件划分\")\n\n\n## 三、项目搭建步骤\n### 3.1准备工作\n+ **git新建项目**\n\n```\ngit init\ntouch README\ngit add README\ngit commit -m'first commit'\ngit remote add origin git@XXXXX.git\ngit push origin master\n\n```\n\n+ **npm安装react相关依赖包**\n\n采用`npm install XXX -save`或`npm install XXX -save-dev`配置安装相关npm包,如果直接复制，可以直接`npm install`安装\n\n```\n{\n    \"name\": \"zhiqiu\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"build\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production\",\n        \"dev\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development\",\n        \"qa\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa\",\n        \"start\": \"./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local\"\n    },\n    \"proxy\": {\n        \"/mansion\": {\n            \"target\": \"http://localhost:8009\"\n        }\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n        \"axios\": \"^0.18.0\",\n        \"babel-cli\": \"^6.26.0\",\n        \"babel-core\": \"^6.26.0\",\n        \"babel-loader\": \"^7.1.4\",\n        \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n        \"babel-polyfill\": \"^6.26.0\",\n        \"babel-preset-env\": \"^1.6.1\",\n        \"babel-preset-es2015\": \"^6.24.1\",\n        \"babel-preset-react\": \"^6.24.1\",\n        \"babel-preset-stage-2\": \"^6.24.1\",\n        \"classnames\": \"^2.2.5\",\n        \"clean-webpack-plugin\": \"^0.1.19\",\n        \"copy-webpack-plugin\": \"^4.5.1\",\n        \"css-loader\": \"^0.28.11\",\n        \"extract-text-webpack-plugin\": \"^3.0.2\",\n        \"file-loader\": \"^1.1.11\",\n        \"html-webpack-inline-source-plugin\": \"0.0.10\",\n        \"html-webpack-plugin\": \"^3.2.0\",\n        \"islider\": \"^0.1.0\",\n        \"mobx\": \"^4.1.0\",\n        \"mobx-react\": \"^5.0.0\",\n        \"node-sass\": \"^4.8.3\",\n        \"path\": \"^0.12.7\",\n        \"react\": \"^16.2.0\",\n        \"react-dom\": \"^16.2.0\",\n        \"react-router\": \"^4.2.0\",\n        \"react-router-dom\": \"^4.2.2\",\n        \"sass-loader\": \"^6.0.7\",\n        \"style-loader\": \"^0.20.3\",\n        \"url-loader\": \"^1.0.1\",\n        \"webpack\": \"^3.10.0\",\n        \"webpack-bundle-analyzer\": \"^2.11.1\",\n        \"webpack-dev-server\": \"^2.11.2\"\n    },\n    \"dependencies\": {\n        \"autoprefixer\": \"^8.6.4\",\n        \"babel-plugin-lodash\": \"^3.3.4\",\n        \"gulp-bird\": \"^0.2.4\",\n        \"hi-ui\": \"0.0.9\",\n        \"islider.js\": \"^2.2.2\",\n        \"jquery\": \"^3.3.1\",\n        \"lodash\": \"^4.17.10\",\n        \"postcss-loader\": \"^2.1.5\",\n        \"vconsole\": \"^3.2.0\"\n    }\n}\n```\n\n### 3.2 路由和数据状态管理\n路由安装mobx-react，react-router模块;\n[React Router](http://react-guide.github.io/react-router-cn/docs/API.html)是完整的React路由解决方案，也是开发React应用最常使用的路由管理库，它提供简单的API，以声明式方式实现强大的路由功能，诸如按需加载，动态路由等。\n1.声明式：语法简洁，清晰；\n2.按需加载：延迟加载，根据使用需要判断是否需要加载；\n3.动态路由：动态组合应用路由结构，更灵活，更符合组件化开发模式；\n\n```\n/**\n * @file index 入口页面\n * @author guoyueting\n */\nimport React from 'react';\nimport {render} from 'react-dom';\nimport {HashRouter, Route, Redirect} from 'react-router-dom';\nimport {Provider} from 'mobx-react';\nimport storeTree from './storeTree';\nimport 'section/common/scss/common.scss';\nimport Layout from 'section/layout/layout.js';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Provider {...storeTree} >\n                <HashRouter>\n                    <Route path=\"/\" component={Layout}/>\n                </HashRouter>\n            </Provider>\n        );\n    }\n}\n\nrender(<App/>, document.getElementById('app'));\n```\n数据状态管理，安装mobx，确定storetree\n\n```\n/**\n * @file storeTree 整个app的状态树\n * @author guoyueting\n */\n'use strict';\n\nimport {observable, action, extendObservable, runInAction} from 'mobx';\nimport NavState from 'section/nav/navStore';\nimport iSliderState from 'section/homeindex/component/islider/isliderStore';\nimport hotPointState from 'section/homeindex/component/hotpoint/hotpointStore';\nimport recommendState from 'section/homeindex/component/recommend/recommendStore';\n\nimport serviceState from 'section/service/serviceStore';\nimport repairState from 'section/myrepair/myrepairStore';\n\n\nclass AppState {\n\t// 全局store\n\t// ...\n}\n\nexport default {\n    AppState: new AppState(),\n    NavState: new NavState(),\n    iSliderState: new iSliderState(),\n    hotPointState: new hotPointState(),\n    recommendState: new recommendState(),\n    serviceState: new serviceState(),\n    repairState: new repairState()\n}\n```\n\n**@observer** 函数/修饰器用于react组件。通过mobx-react依赖包来提供。它通过mobx.autorun来包装了组件的render函数，以确保组件的render函数在任何数据的更改是强制重新渲染。\n\n**Autorun**是用在一些你想要产生一个不用观察者参与的被动调用函数里面。当autorun被使用的时候，一旦依赖项发生变化，autorun提供的函数就会被执行。\n\n**action**是任何改变状态的事物。\n\n```\n/**\n * @file serviceStore\n * @author guoyueting\n */\n'use strict';\n\nimport {observable, action, runInAction} from 'mobx';\nimport _ from 'lodash';\nimport * as model from 'src/itsm/model/model';\nimport {getSearchParam} from 'section/common/js/utils';\n\nexport default class serviceState {\n    @observable serviceList = [];\n\n    @action getServiceList() {\n        let params = {\n            mappedAppKey: getSearchParam('appKey')\n        };\n        model.getServiceListList(params).then(data => {\n            runInAction(()=>{\n                this.serviceList = _.get(data, 'data.data');\n            });\n        });\n    }\n\n    @action serviceClick(id) {\n        let params = {\n            mappedAppKey: getSearchParam('appKey'),\n            id: id\n        };\n        model.serviceClick(params);\n    }\n}\n```\n\n### 3.3 Axios库发送ajax请求\n安装axios，并通过get/post/put/delete等方式请求接口，对于json数据，一般在post请求进行数据格式转换，并在请求头部设置：\n\n```\n/**\n * @file  接口文件\n * @author guoyueting\n */\nimport axios from 'axios';\nlet axiosConfig = {\n    headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        'Access-Control-Allow-Origin': '*'\n    }\n};\n// 获取列表\nexport let getHotList = function (data) {\n    return axios.post('/rdwtv2/api/hot', JSON.stringify(data), axiosConfig);\n};\n```\n\n### 3.4 代理转发gulp-bird\n[gulp-bird](https://www.npmjs.com/package/gulp-bird)是由百度BEFE团队开发的代理转发工具，并不是一个gulp插件，在bird基础上进行了一些优化并发布到了npm，配置方法和bird一样。\n配置目标服务器host和port等，参考如下。\n\n```\n/**\n * @file  bird-config.js\n * @author guoyueting\n */\nvar bird = require('./node_modules/gulp-bird/index');\n// 静态服务器配置，可同时配置多个，域名需host到127.0.0.1\nvar server = {\n    '8009': {\n        // 静态文件根目录\n        'basePath': './src/',\n        // 是否开启调试模式，true(表示server端不缓存)，false（反之）\n        'debug': true\n        // 忽略的静态文件请求，与此正则匹配的请求将直接走转发规则（可选配置）\n        // 'ignoreRegExp': /\\/js\\/urls\\.js/g\n\n    }\n};\n// 转发规则——静态服务器没有响应的或者忽略的请求将根据一下规则转发\nvar transpondRules = {\n    '8009': {\n        // 目标服务器的ip和端口，域名也可，但注意不要被host了\n        targetServer: {\n            'port': '8680',\n            // 'port': '8080',\n            'host': 'http://m1-ite-hidev04.m1.baidu.com',\n            // 'host': 'cp01-ps-dev373-liuchao31.epc.baidu.com',\n            // 当为true时，如果cookie or header中有相同key，则替换\n            'replaceHeaders': true,\n            'headers': {\n                    'cookie': ''}\n            }\n        // 特殊请求转发，可选配置，内部的host、port和attachHeaders为可选参数\n        regExpPath: {\n            // '/oa-frontend-apply-1.0.0-SNAPSHOT': {\n            //     'host': 'cp01-dev-heliping.epc.baidu.com/',\n            //     'port': '8080',\n            //     //'attachHeaders': {'app-id': 5},\n            //     'path': '\\/'\n            // }npm\n        }\n    },\n    'ajaxOnly': false\n};\n\nvar toolsConf = {\n    weinre: {\n        // 和移动调试工具条中的vconsole冲突, 当为true时vconsole自动关闭\n        open: false,\n        port: 8009\n    },\n    // 移动端调试工具条，PC端开发可关闭\n    showTools: false\n};\n\nbird.start(server, transpondRules, toolsConf);\n\n```\n\n### 3.5webpack配置打包\n下面是一个较为基础的webpack文件配置。entry是配置模块的入口，webpack执行构建的第一步将从入口开始搜寻及递归解析出所有入口依赖的模块；output定义了打包后的输出文件名、路径；module配置模块的读取和解析规则，通常用来配置loader；resolve配置Webpack如何寻找模块对应的文件；Plugins用于扩展webpack的功能，几乎所有Webpack无法直接实现的功能都能在社区找到开源的Plugin去解决。\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = function(env) {\n    console.log(env);\n    return {\n        entry: {\n            'index': './src/itsm/index.js'\n        },\n        output: {\n            filename: 'js/[name]-[chunkhash].js',\n            path: path.resolve(__dirname, './build'),\n            chunkFilename: '[name].[chunkhash:4].child.js'\n        },\n        module: {\n            rules: [{\n                test: /(\\.jsx|\\.js)$/i,\n                use: [{\n                    loader: 'babel-loader'\n                }]\n                // exclude: /node_modules/\n            },\n            {\n                test: /(\\.scss|\\.sass)$/i,\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: [{\n                        loader: 'css-loader',\n                        options: {\n                            module: false,\n                            minimize: true\n                        }\n                    }, {\n                        loader: 'postcss-loader',\n                    }, {\n                        loader: 'sass-loader',\n                        options: {\n                            sourceMap: false\n                        }\n                    }]\n                })\n            },\n            {\n                test: /(\\.png|\\.jpg|\\.jpeg|\\.gif)$/i,\n                use: [{\n                    loader: 'url-loader',\n                    options: {\n                        limit: 100\n                    }\n                }]\n            }]\n        },\n        resolve: {\n            alias: {\n                'src': path.resolve(__dirname, 'src'),\n                'section': path.resolve(__dirname, 'src/itsm/section'),\n                'img': path.resolve(__dirname, 'src/itsm/img'),\n                'modules': path.resolve(__dirname, 'node_modules/islider.js/build')\n            }\n        },\n        plugins: [\n            new CleanWebpackPlugin(['./build']),\n            new webpack.DefinePlugin({\n                'process.env.NODE_ENV': JSON.stringify(env.NODE_ENV || 'development'),\n                'isDev': JSON.stringify(env.isDev || 'true')\n            }),\n            new ExtractTextPlugin('style.css'),\n            new HtmlWebpackPlugin({\n                template: './src/itsm/index.html',\n                filename: './index.html',\n                chunks: ['index']\n            })\n        ],\n        devServer: {\n            host: '0.0.0.0',\n            port: 9822,\n            proxy: {\n                '/rdwtv2': 'http://localhost:8009'\n            }\n        }\n    }\n}\n```\n\n### 3.6打包指令配置\n配置不同环境的变量值，生产环境，QA环境，开发环境某些变量可能需要根据环境进行配置，然后用webpack的definePlugin插件，定义全局变量，可以保证在和环境有关的变量取值的正确性。\n\n\n```\n\"scripts\": {\n    \"build\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production\",\n    \"dev\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development\",\n    \"qa\": \"./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa\",\n    \"start\": \"./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local\"\n}\n```\n\n## 四、未来改进\n未来架构设计还需要完善的点：\n1. Immutable数据，考虑引入Immutable.js； \n2. 测试，考虑jest集成应用测试\n3. 函数库，如ramda，underscore； \n4. 调试工具，reactotron,react-devtools\n\n\n## 五、Demo地址\n最后，附上demo地址：`https://github.com/guoyueting/react-mobx-seed`\n\n\n\n\n","slug":"React脚手架","published":1,"updated":"2018-07-19T05:06:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkpapzip000348r6mqoagvve","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>React现在已经有很多脚手架工具，如<strong>create-react-app</strong>，支持一键创建一个React应用项目结构，很方便，但是享受方便的同时，也失去了对项目架构及技术栈完整学习的机会，而且通常脚手架创建的应用技术架构并不能完全满足我们的业务需求，需要我们自己修改，完善，所以如果希望对项目架构有更深掌控，最好还是从0到1理解一个项目。</p>\n<h2 id=\"二、项目结构与技术栈\"><a href=\"#二、项目结构与技术栈\" class=\"headerlink\" title=\"二、项目结构与技术栈\"></a>二、项目结构与技术栈</h2><h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><p>这次应用架构设计不使用任何脚手架，需要自己创建每一个文件，引入每一个技术和三方库，最终形成完整的应用，包括选择的完整技术栈。<br>项目结构图如下：1. src为应用源代码目录； 2. webpack.config.js为webpack配置入口文件； 3. package.json为项目依赖管理文件； 4. .babelrc文件，babel的配置文件，使用babel编译React和JavaScript代码； 5.README.md为项目说明文档； 6.bird-config是gulp-bird转发工具的配置文件；7.postcss.config.js是postcss的配置文件</p>\n<p><strong>Feature</strong></p>\n<ul>\n<li>可以解析JSX语法</li>\n<li>可以解析ES6语法新特性</li>\n<li>支持SCSS预处理器</li>\n<li>单独分离CSS样式文件</li>\n<li>支持文件MD5戳，解决文件缓存问题</li>\n<li>支持图片、图标字体等资源的编译</li>\n<li>区分开发环境和生产环境</li>\n<li>分离业务功能代码和公共依赖代码</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png\" alt=\"文件目录\" title=\"文件目录\"></p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>对整个技术栈进行分析，要考虑哪几个方面呢？</p>\n<ol>\n<li>react和react-dom库是项目前提； </li>\n<li>react路由； </li>\n<li>应用状态管理容器；</li>\n<li>如何优雅地发送ajax请求；</li>\n<li>打包上线发版，测试环境线上环境</li>\n<li>css预编译及后处理，考虑兼容性写法；</li>\n<li>采用ES6写码，辅助工具，写代码更容易；</li>\n<li>此外，往往后端开发好的接口会部署在测试环境，而不是本地，因此还需要考虑联调时的代理转发。</li>\n</ol>\n<p>根据以上划分决定选用以下第三方库和工具构成项目的完整技术栈：</p>\n<ol>\n<li>react，react-dom;</li>\n<li>react-router管理应用路由;</li>\n<li>mobx作为JavaScript状态容器，mobx-react将React应用与mobx连接，Mobx相关详情请参见<a href=\"https://cn.mobx.js.org/\" target=\"_blank\" rel=\"noopener\">Mobx官方文档</a>； </li>\n<li>axios库发送ajax请求，解决接口调用问题，请参见<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">Axios</a></li>\n<li>webpack配置;</li>\n<li>安装postcss的autoprefixer;</li>\n<li>需要安装babel，还可以使用lodash等可选辅助类，工具类库提升开发效率；</li>\n<li>代理转发工具选择的是百度BEFE团队开发的<a href=\"https://www.npmjs.com/package/gulp-bird\" target=\"_blank\" rel=\"noopener\">gulp-bird</a>。</li>\n</ol>\n<h3 id=\"组件划分\"><a href=\"#组件划分\" class=\"headerlink\" title=\"组件划分\"></a>组件划分</h3><p>React组件化开发原则是组件负责渲染UI，组件不同状态对应不同UI，通常遵循以下组件设计思路：</p>\n<ol>\n<li>路由组件：负责项目路由，可嵌套;</li>\n<li>布局组件：仅仅涉及应用UI界面结构的组件，不涉及任何业务逻辑，数据请求及操作;</li>\n<li>容器组件：负责获取数据，处理业务逻辑，通常在render()函数内返回展示型组件；</li>\n<li>UI组件：指抽象出的可重用的UI独立组件，通常是无状态组件;</li>\n</ol>\n<p>以本项目section的组件划分为例，index.js是入口文件，同时也承担了路由组件的角色，layout是布局组件，仅仅负责UI界面结构，homeindex是容器组件，是首页的业务逻辑，islider则是轮播图的独立组件，可复用。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E7%BB%84%E4%BB%B6.png\" alt=\"组件划分\" title=\"组件划分\"></p>\n<h2 id=\"三、项目搭建步骤\"><a href=\"#三、项目搭建步骤\" class=\"headerlink\" title=\"三、项目搭建步骤\"></a>三、项目搭建步骤</h2><h3 id=\"3-1准备工作\"><a href=\"#3-1准备工作\" class=\"headerlink\" title=\"3.1准备工作\"></a>3.1准备工作</h3><ul>\n<li><strong>git新建项目</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">touch README</span><br><span class=\"line\">git add README</span><br><span class=\"line\">git commit -m&apos;first commit&apos;</span><br><span class=\"line\">git remote add origin git@XXXXX.git</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>npm安装react相关依赖包</strong></li>\n</ul>\n<p>采用<code>npm install XXX -save</code>或<code>npm install XXX -save-dev</code>配置安装相关npm包,如果直接复制，可以直接<code>npm install</code>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;zhiqiu&quot;,</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">    &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">        &quot;build&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production&quot;,</span><br><span class=\"line\">        &quot;dev&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development&quot;,</span><br><span class=\"line\">        &quot;qa&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa&quot;,</span><br><span class=\"line\">        &quot;start&quot;: &quot;./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;proxy&quot;: &#123;</span><br><span class=\"line\">        &quot;/mansion&quot;: &#123;</span><br><span class=\"line\">            &quot;target&quot;: &quot;http://localhost:8009&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;keywords&quot;: [],</span><br><span class=\"line\">    &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">    &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;axios&quot;: &quot;^0.18.0&quot;,</span><br><span class=\"line\">        &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">        &quot;babel-core&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">        &quot;babel-loader&quot;: &quot;^7.1.4&quot;,</span><br><span class=\"line\">        &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.4&quot;,</span><br><span class=\"line\">        &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">        &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,</span><br><span class=\"line\">        &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,</span><br><span class=\"line\">        &quot;babel-preset-react&quot;: &quot;^6.24.1&quot;,</span><br><span class=\"line\">        &quot;babel-preset-stage-2&quot;: &quot;^6.24.1&quot;,</span><br><span class=\"line\">        &quot;classnames&quot;: &quot;^2.2.5&quot;,</span><br><span class=\"line\">        &quot;clean-webpack-plugin&quot;: &quot;^0.1.19&quot;,</span><br><span class=\"line\">        &quot;copy-webpack-plugin&quot;: &quot;^4.5.1&quot;,</span><br><span class=\"line\">        &quot;css-loader&quot;: &quot;^0.28.11&quot;,</span><br><span class=\"line\">        &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.2&quot;,</span><br><span class=\"line\">        &quot;file-loader&quot;: &quot;^1.1.11&quot;,</span><br><span class=\"line\">        &quot;html-webpack-inline-source-plugin&quot;: &quot;0.0.10&quot;,</span><br><span class=\"line\">        &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">        &quot;islider&quot;: &quot;^0.1.0&quot;,</span><br><span class=\"line\">        &quot;mobx&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">        &quot;mobx-react&quot;: &quot;^5.0.0&quot;,</span><br><span class=\"line\">        &quot;node-sass&quot;: &quot;^4.8.3&quot;,</span><br><span class=\"line\">        &quot;path&quot;: &quot;^0.12.7&quot;,</span><br><span class=\"line\">        &quot;react&quot;: &quot;^16.2.0&quot;,</span><br><span class=\"line\">        &quot;react-dom&quot;: &quot;^16.2.0&quot;,</span><br><span class=\"line\">        &quot;react-router&quot;: &quot;^4.2.0&quot;,</span><br><span class=\"line\">        &quot;react-router-dom&quot;: &quot;^4.2.2&quot;,</span><br><span class=\"line\">        &quot;sass-loader&quot;: &quot;^6.0.7&quot;,</span><br><span class=\"line\">        &quot;style-loader&quot;: &quot;^0.20.3&quot;,</span><br><span class=\"line\">        &quot;url-loader&quot;: &quot;^1.0.1&quot;,</span><br><span class=\"line\">        &quot;webpack&quot;: &quot;^3.10.0&quot;,</span><br><span class=\"line\">        &quot;webpack-bundle-analyzer&quot;: &quot;^2.11.1&quot;,</span><br><span class=\"line\">        &quot;webpack-dev-server&quot;: &quot;^2.11.2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;autoprefixer&quot;: &quot;^8.6.4&quot;,</span><br><span class=\"line\">        &quot;babel-plugin-lodash&quot;: &quot;^3.3.4&quot;,</span><br><span class=\"line\">        &quot;gulp-bird&quot;: &quot;^0.2.4&quot;,</span><br><span class=\"line\">        &quot;hi-ui&quot;: &quot;0.0.9&quot;,</span><br><span class=\"line\">        &quot;islider.js&quot;: &quot;^2.2.2&quot;,</span><br><span class=\"line\">        &quot;jquery&quot;: &quot;^3.3.1&quot;,</span><br><span class=\"line\">        &quot;lodash&quot;: &quot;^4.17.10&quot;,</span><br><span class=\"line\">        &quot;postcss-loader&quot;: &quot;^2.1.5&quot;,</span><br><span class=\"line\">        &quot;vconsole&quot;: &quot;^3.2.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-路由和数据状态管理\"><a href=\"#3-2-路由和数据状态管理\" class=\"headerlink\" title=\"3.2 路由和数据状态管理\"></a>3.2 路由和数据状态管理</h3><p>路由安装mobx-react，react-router模块;<br><a href=\"http://react-guide.github.io/react-router-cn/docs/API.html\" target=\"_blank\" rel=\"noopener\">React Router</a>是完整的React路由解决方案，也是开发React应用最常使用的路由管理库，它提供简单的API，以声明式方式实现强大的路由功能，诸如按需加载，动态路由等。<br>1.声明式：语法简洁，清晰；<br>2.按需加载：延迟加载，根据使用需要判断是否需要加载；<br>3.动态路由：动态组合应用路由结构，更灵活，更符合组件化开发模式；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file index 入口页面</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import &#123;HashRouter, Route, Redirect&#125; from &apos;react-router-dom&apos;;</span><br><span class=\"line\">import &#123;Provider&#125; from &apos;mobx-react&apos;;</span><br><span class=\"line\">import storeTree from &apos;./storeTree&apos;;</span><br><span class=\"line\">import &apos;section/common/scss/common.scss&apos;;</span><br><span class=\"line\">import Layout from &apos;section/layout/layout.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;Provider &#123;...storeTree&#125; &gt;</span><br><span class=\"line\">                &lt;HashRouter&gt;</span><br><span class=\"line\">                    &lt;Route path=&quot;/&quot; component=&#123;Layout&#125;/&gt;</span><br><span class=\"line\">                &lt;/HashRouter&gt;</span><br><span class=\"line\">            &lt;/Provider&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;App/&gt;, document.getElementById(&apos;app&apos;));</span><br></pre></td></tr></table></figure>\n<p>数据状态管理，安装mobx，确定storetree</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file storeTree 整个app的状态树</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;observable, action, extendObservable, runInAction&#125; from &apos;mobx&apos;;</span><br><span class=\"line\">import NavState from &apos;section/nav/navStore&apos;;</span><br><span class=\"line\">import iSliderState from &apos;section/homeindex/component/islider/isliderStore&apos;;</span><br><span class=\"line\">import hotPointState from &apos;section/homeindex/component/hotpoint/hotpointStore&apos;;</span><br><span class=\"line\">import recommendState from &apos;section/homeindex/component/recommend/recommendStore&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import serviceState from &apos;section/service/serviceStore&apos;;</span><br><span class=\"line\">import repairState from &apos;section/myrepair/myrepairStore&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AppState &#123;</span><br><span class=\"line\">\t// 全局store</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    AppState: new AppState(),</span><br><span class=\"line\">    NavState: new NavState(),</span><br><span class=\"line\">    iSliderState: new iSliderState(),</span><br><span class=\"line\">    hotPointState: new hotPointState(),</span><br><span class=\"line\">    recommendState: new recommendState(),</span><br><span class=\"line\">    serviceState: new serviceState(),</span><br><span class=\"line\">    repairState: new repairState()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>@observer</strong> 函数/修饰器用于react组件。通过mobx-react依赖包来提供。它通过mobx.autorun来包装了组件的render函数，以确保组件的render函数在任何数据的更改是强制重新渲染。</p>\n<p><strong>Autorun</strong>是用在一些你想要产生一个不用观察者参与的被动调用函数里面。当autorun被使用的时候，一旦依赖项发生变化，autorun提供的函数就会被执行。</p>\n<p><strong>action</strong>是任何改变状态的事物。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file serviceStore</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;observable, action, runInAction&#125; from &apos;mobx&apos;;</span><br><span class=\"line\">import _ from &apos;lodash&apos;;</span><br><span class=\"line\">import * as model from &apos;src/itsm/model/model&apos;;</span><br><span class=\"line\">import &#123;getSearchParam&#125; from &apos;section/common/js/utils&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class serviceState &#123;</span><br><span class=\"line\">    @observable serviceList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    @action getServiceList() &#123;</span><br><span class=\"line\">        let params = &#123;</span><br><span class=\"line\">            mappedAppKey: getSearchParam(&apos;appKey&apos;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        model.getServiceListList(params).then(data =&gt; &#123;</span><br><span class=\"line\">            runInAction(()=&gt;&#123;</span><br><span class=\"line\">                this.serviceList = _.get(data, &apos;data.data&apos;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @action serviceClick(id) &#123;</span><br><span class=\"line\">        let params = &#123;</span><br><span class=\"line\">            mappedAppKey: getSearchParam(&apos;appKey&apos;),</span><br><span class=\"line\">            id: id</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        model.serviceClick(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-Axios库发送ajax请求\"><a href=\"#3-3-Axios库发送ajax请求\" class=\"headerlink\" title=\"3.3 Axios库发送ajax请求\"></a>3.3 Axios库发送ajax请求</h3><p>安装axios，并通过get/post/put/delete等方式请求接口，对于json数据，一般在post请求进行数据格式转换，并在请求头部设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file  接口文件</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">import axios from &apos;axios&apos;;</span><br><span class=\"line\">let axiosConfig = &#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        &apos;Content-Type&apos;: &apos;application/json;charset=UTF-8&apos;,</span><br><span class=\"line\">        &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 获取列表</span><br><span class=\"line\">export let getHotList = function (data) &#123;</span><br><span class=\"line\">    return axios.post(&apos;/rdwtv2/api/hot&apos;, JSON.stringify(data), axiosConfig);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-代理转发gulp-bird\"><a href=\"#3-4-代理转发gulp-bird\" class=\"headerlink\" title=\"3.4 代理转发gulp-bird\"></a>3.4 代理转发gulp-bird</h3><p><a href=\"https://www.npmjs.com/package/gulp-bird\" target=\"_blank\" rel=\"noopener\">gulp-bird</a>是由百度BEFE团队开发的代理转发工具，并不是一个gulp插件，在bird基础上进行了一些优化并发布到了npm，配置方法和bird一样。<br>配置目标服务器host和port等，参考如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file  bird-config.js</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">var bird = require(&apos;./node_modules/gulp-bird/index&apos;);</span><br><span class=\"line\">// 静态服务器配置，可同时配置多个，域名需host到127.0.0.1</span><br><span class=\"line\">var server = &#123;</span><br><span class=\"line\">    &apos;8009&apos;: &#123;</span><br><span class=\"line\">        // 静态文件根目录</span><br><span class=\"line\">        &apos;basePath&apos;: &apos;./src/&apos;,</span><br><span class=\"line\">        // 是否开启调试模式，true(表示server端不缓存)，false（反之）</span><br><span class=\"line\">        &apos;debug&apos;: true</span><br><span class=\"line\">        // 忽略的静态文件请求，与此正则匹配的请求将直接走转发规则（可选配置）</span><br><span class=\"line\">        // &apos;ignoreRegExp&apos;: /\\/js\\/urls\\.js/g</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 转发规则——静态服务器没有响应的或者忽略的请求将根据一下规则转发</span><br><span class=\"line\">var transpondRules = &#123;</span><br><span class=\"line\">    &apos;8009&apos;: &#123;</span><br><span class=\"line\">        // 目标服务器的ip和端口，域名也可，但注意不要被host了</span><br><span class=\"line\">        targetServer: &#123;</span><br><span class=\"line\">            &apos;port&apos;: &apos;8680&apos;,</span><br><span class=\"line\">            // &apos;port&apos;: &apos;8080&apos;,</span><br><span class=\"line\">            &apos;host&apos;: &apos;http://m1-ite-hidev04.m1.baidu.com&apos;,</span><br><span class=\"line\">            // &apos;host&apos;: &apos;cp01-ps-dev373-liuchao31.epc.baidu.com&apos;,</span><br><span class=\"line\">            // 当为true时，如果cookie or header中有相同key，则替换</span><br><span class=\"line\">            &apos;replaceHeaders&apos;: true,</span><br><span class=\"line\">            &apos;headers&apos;: &#123;</span><br><span class=\"line\">                    &apos;cookie&apos;: &apos;&apos;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        // 特殊请求转发，可选配置，内部的host、port和attachHeaders为可选参数</span><br><span class=\"line\">        regExpPath: &#123;</span><br><span class=\"line\">            // &apos;/oa-frontend-apply-1.0.0-SNAPSHOT&apos;: &#123;</span><br><span class=\"line\">            //     &apos;host&apos;: &apos;cp01-dev-heliping.epc.baidu.com/&apos;,</span><br><span class=\"line\">            //     &apos;port&apos;: &apos;8080&apos;,</span><br><span class=\"line\">            //     //&apos;attachHeaders&apos;: &#123;&apos;app-id&apos;: 5&#125;,</span><br><span class=\"line\">            //     &apos;path&apos;: &apos;\\/&apos;</span><br><span class=\"line\">            // &#125;npm</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &apos;ajaxOnly&apos;: false</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var toolsConf = &#123;</span><br><span class=\"line\">    weinre: &#123;</span><br><span class=\"line\">        // 和移动调试工具条中的vconsole冲突, 当为true时vconsole自动关闭</span><br><span class=\"line\">        open: false,</span><br><span class=\"line\">        port: 8009</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 移动端调试工具条，PC端开发可关闭</span><br><span class=\"line\">    showTools: false</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bird.start(server, transpondRules, toolsConf);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5webpack配置打包\"><a href=\"#3-5webpack配置打包\" class=\"headerlink\" title=\"3.5webpack配置打包\"></a>3.5webpack配置打包</h3><p>下面是一个较为基础的webpack文件配置。entry是配置模块的入口，webpack执行构建的第一步将从入口开始搜寻及递归解析出所有入口依赖的模块；output定义了打包后的输出文件名、路径；module配置模块的读取和解析规则，通常用来配置loader；resolve配置Webpack如何寻找模块对应的文件；Plugins用于扩展webpack的功能，几乎所有Webpack无法直接实现的功能都能在社区找到开源的Plugin去解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\">const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin;</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(env) &#123;</span><br><span class=\"line\">    console.log(env);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        entry: &#123;</span><br><span class=\"line\">            &apos;index&apos;: &apos;./src/itsm/index.js&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        output: &#123;</span><br><span class=\"line\">            filename: &apos;js/[name]-[chunkhash].js&apos;,</span><br><span class=\"line\">            path: path.resolve(__dirname, &apos;./build&apos;),</span><br><span class=\"line\">            chunkFilename: &apos;[name].[chunkhash:4].child.js&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        module: &#123;</span><br><span class=\"line\">            rules: [&#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/i,</span><br><span class=\"line\">                use: [&#123;</span><br><span class=\"line\">                    loader: &apos;babel-loader&apos;</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">                // exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.scss|\\.sass)$/i,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &apos;style-loader&apos;,</span><br><span class=\"line\">                    use: [&#123;</span><br><span class=\"line\">                        loader: &apos;css-loader&apos;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            module: false,</span><br><span class=\"line\">                            minimize: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &apos;postcss-loader&apos;,</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &apos;sass-loader&apos;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            sourceMap: false</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.png|\\.jpg|\\.jpeg|\\.gif)$/i,</span><br><span class=\"line\">                use: [&#123;</span><br><span class=\"line\">                    loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        limit: 100</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        resolve: &#123;</span><br><span class=\"line\">            alias: &#123;</span><br><span class=\"line\">                &apos;src&apos;: path.resolve(__dirname, &apos;src&apos;),</span><br><span class=\"line\">                &apos;section&apos;: path.resolve(__dirname, &apos;src/itsm/section&apos;),</span><br><span class=\"line\">                &apos;img&apos;: path.resolve(__dirname, &apos;src/itsm/img&apos;),</span><br><span class=\"line\">                &apos;modules&apos;: path.resolve(__dirname, &apos;node_modules/islider.js/build&apos;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        plugins: [</span><br><span class=\"line\">            new CleanWebpackPlugin([&apos;./build&apos;]),</span><br><span class=\"line\">            new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">                &apos;process.env.NODE_ENV&apos;: JSON.stringify(env.NODE_ENV || &apos;development&apos;),</span><br><span class=\"line\">                &apos;isDev&apos;: JSON.stringify(env.isDev || &apos;true&apos;)</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            new ExtractTextPlugin(&apos;style.css&apos;),</span><br><span class=\"line\">            new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                template: &apos;./src/itsm/index.html&apos;,</span><br><span class=\"line\">                filename: &apos;./index.html&apos;,</span><br><span class=\"line\">                chunks: [&apos;index&apos;]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        devServer: &#123;</span><br><span class=\"line\">            host: &apos;0.0.0.0&apos;,</span><br><span class=\"line\">            port: 9822,</span><br><span class=\"line\">            proxy: &#123;</span><br><span class=\"line\">                &apos;/rdwtv2&apos;: &apos;http://localhost:8009&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-6打包指令配置\"><a href=\"#3-6打包指令配置\" class=\"headerlink\" title=\"3.6打包指令配置\"></a>3.6打包指令配置</h3><p>配置不同环境的变量值，生产环境，QA环境，开发环境某些变量可能需要根据环境进行配置，然后用webpack的definePlugin插件，定义全局变量，可以保证在和环境有关的变量取值的正确性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production&quot;,</span><br><span class=\"line\">    &quot;dev&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development&quot;,</span><br><span class=\"line\">    &quot;qa&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、未来改进\"><a href=\"#四、未来改进\" class=\"headerlink\" title=\"四、未来改进\"></a>四、未来改进</h2><p>未来架构设计还需要完善的点：</p>\n<ol>\n<li>Immutable数据，考虑引入Immutable.js； </li>\n<li>测试，考虑jest集成应用测试</li>\n<li>函数库，如ramda，underscore； </li>\n<li>调试工具，reactotron,react-devtools</li>\n</ol>\n<h2 id=\"五、Demo地址\"><a href=\"#五、Demo地址\" class=\"headerlink\" title=\"五、Demo地址\"></a>五、Demo地址</h2><p>最后，附上demo地址：<code>https://github.com/guoyueting/react-mobx-seed</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>React现在已经有很多脚手架工具，如<strong>create-react-app</strong>，支持一键创建一个React应用项目结构，很方便，但是享受方便的同时，也失去了对项目架构及技术栈完整学习的机会，而且通常脚手架创建的应用技术架构并不能完全满足我们的业务需求，需要我们自己修改，完善，所以如果希望对项目架构有更深掌控，最好还是从0到1理解一个项目。</p>\n<h2 id=\"二、项目结构与技术栈\"><a href=\"#二、项目结构与技术栈\" class=\"headerlink\" title=\"二、项目结构与技术栈\"></a>二、项目结构与技术栈</h2><h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><p>这次应用架构设计不使用任何脚手架，需要自己创建每一个文件，引入每一个技术和三方库，最终形成完整的应用，包括选择的完整技术栈。<br>项目结构图如下：1. src为应用源代码目录； 2. webpack.config.js为webpack配置入口文件； 3. package.json为项目依赖管理文件； 4. .babelrc文件，babel的配置文件，使用babel编译React和JavaScript代码； 5.README.md为项目说明文档； 6.bird-config是gulp-bird转发工具的配置文件；7.postcss.config.js是postcss的配置文件</p>\n<p><strong>Feature</strong></p>\n<ul>\n<li>可以解析JSX语法</li>\n<li>可以解析ES6语法新特性</li>\n<li>支持SCSS预处理器</li>\n<li>单独分离CSS样式文件</li>\n<li>支持文件MD5戳，解决文件缓存问题</li>\n<li>支持图片、图标字体等资源的编译</li>\n<li>区分开发环境和生产环境</li>\n<li>分离业务功能代码和公共依赖代码</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png\" alt=\"文件目录\" title=\"文件目录\"></p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>对整个技术栈进行分析，要考虑哪几个方面呢？</p>\n<ol>\n<li>react和react-dom库是项目前提； </li>\n<li>react路由； </li>\n<li>应用状态管理容器；</li>\n<li>如何优雅地发送ajax请求；</li>\n<li>打包上线发版，测试环境线上环境</li>\n<li>css预编译及后处理，考虑兼容性写法；</li>\n<li>采用ES6写码，辅助工具，写代码更容易；</li>\n<li>此外，往往后端开发好的接口会部署在测试环境，而不是本地，因此还需要考虑联调时的代理转发。</li>\n</ol>\n<p>根据以上划分决定选用以下第三方库和工具构成项目的完整技术栈：</p>\n<ol>\n<li>react，react-dom;</li>\n<li>react-router管理应用路由;</li>\n<li>mobx作为JavaScript状态容器，mobx-react将React应用与mobx连接，Mobx相关详情请参见<a href=\"https://cn.mobx.js.org/\" target=\"_blank\" rel=\"noopener\">Mobx官方文档</a>； </li>\n<li>axios库发送ajax请求，解决接口调用问题，请参见<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">Axios</a></li>\n<li>webpack配置;</li>\n<li>安装postcss的autoprefixer;</li>\n<li>需要安装babel，还可以使用lodash等可选辅助类，工具类库提升开发效率；</li>\n<li>代理转发工具选择的是百度BEFE团队开发的<a href=\"https://www.npmjs.com/package/gulp-bird\" target=\"_blank\" rel=\"noopener\">gulp-bird</a>。</li>\n</ol>\n<h3 id=\"组件划分\"><a href=\"#组件划分\" class=\"headerlink\" title=\"组件划分\"></a>组件划分</h3><p>React组件化开发原则是组件负责渲染UI，组件不同状态对应不同UI，通常遵循以下组件设计思路：</p>\n<ol>\n<li>路由组件：负责项目路由，可嵌套;</li>\n<li>布局组件：仅仅涉及应用UI界面结构的组件，不涉及任何业务逻辑，数据请求及操作;</li>\n<li>容器组件：负责获取数据，处理业务逻辑，通常在render()函数内返回展示型组件；</li>\n<li>UI组件：指抽象出的可重用的UI独立组件，通常是无状态组件;</li>\n</ol>\n<p>以本项目section的组件划分为例，index.js是入口文件，同时也承担了路由组件的角色，layout是布局组件，仅仅负责UI界面结构，homeindex是容器组件，是首页的业务逻辑，islider则是轮播图的独立组件，可复用。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E7%BB%84%E4%BB%B6.png\" alt=\"组件划分\" title=\"组件划分\"></p>\n<h2 id=\"三、项目搭建步骤\"><a href=\"#三、项目搭建步骤\" class=\"headerlink\" title=\"三、项目搭建步骤\"></a>三、项目搭建步骤</h2><h3 id=\"3-1准备工作\"><a href=\"#3-1准备工作\" class=\"headerlink\" title=\"3.1准备工作\"></a>3.1准备工作</h3><ul>\n<li><strong>git新建项目</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">touch README</span><br><span class=\"line\">git add README</span><br><span class=\"line\">git commit -m&apos;first commit&apos;</span><br><span class=\"line\">git remote add origin git@XXXXX.git</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>npm安装react相关依赖包</strong></li>\n</ul>\n<p>采用<code>npm install XXX -save</code>或<code>npm install XXX -save-dev</code>配置安装相关npm包,如果直接复制，可以直接<code>npm install</code>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;zhiqiu&quot;,</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">    &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">        &quot;build&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production&quot;,</span><br><span class=\"line\">        &quot;dev&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development&quot;,</span><br><span class=\"line\">        &quot;qa&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa&quot;,</span><br><span class=\"line\">        &quot;start&quot;: &quot;./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;proxy&quot;: &#123;</span><br><span class=\"line\">        &quot;/mansion&quot;: &#123;</span><br><span class=\"line\">            &quot;target&quot;: &quot;http://localhost:8009&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;keywords&quot;: [],</span><br><span class=\"line\">    &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">    &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;axios&quot;: &quot;^0.18.0&quot;,</span><br><span class=\"line\">        &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">        &quot;babel-core&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">        &quot;babel-loader&quot;: &quot;^7.1.4&quot;,</span><br><span class=\"line\">        &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.4&quot;,</span><br><span class=\"line\">        &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">        &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,</span><br><span class=\"line\">        &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,</span><br><span class=\"line\">        &quot;babel-preset-react&quot;: &quot;^6.24.1&quot;,</span><br><span class=\"line\">        &quot;babel-preset-stage-2&quot;: &quot;^6.24.1&quot;,</span><br><span class=\"line\">        &quot;classnames&quot;: &quot;^2.2.5&quot;,</span><br><span class=\"line\">        &quot;clean-webpack-plugin&quot;: &quot;^0.1.19&quot;,</span><br><span class=\"line\">        &quot;copy-webpack-plugin&quot;: &quot;^4.5.1&quot;,</span><br><span class=\"line\">        &quot;css-loader&quot;: &quot;^0.28.11&quot;,</span><br><span class=\"line\">        &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.2&quot;,</span><br><span class=\"line\">        &quot;file-loader&quot;: &quot;^1.1.11&quot;,</span><br><span class=\"line\">        &quot;html-webpack-inline-source-plugin&quot;: &quot;0.0.10&quot;,</span><br><span class=\"line\">        &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">        &quot;islider&quot;: &quot;^0.1.0&quot;,</span><br><span class=\"line\">        &quot;mobx&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">        &quot;mobx-react&quot;: &quot;^5.0.0&quot;,</span><br><span class=\"line\">        &quot;node-sass&quot;: &quot;^4.8.3&quot;,</span><br><span class=\"line\">        &quot;path&quot;: &quot;^0.12.7&quot;,</span><br><span class=\"line\">        &quot;react&quot;: &quot;^16.2.0&quot;,</span><br><span class=\"line\">        &quot;react-dom&quot;: &quot;^16.2.0&quot;,</span><br><span class=\"line\">        &quot;react-router&quot;: &quot;^4.2.0&quot;,</span><br><span class=\"line\">        &quot;react-router-dom&quot;: &quot;^4.2.2&quot;,</span><br><span class=\"line\">        &quot;sass-loader&quot;: &quot;^6.0.7&quot;,</span><br><span class=\"line\">        &quot;style-loader&quot;: &quot;^0.20.3&quot;,</span><br><span class=\"line\">        &quot;url-loader&quot;: &quot;^1.0.1&quot;,</span><br><span class=\"line\">        &quot;webpack&quot;: &quot;^3.10.0&quot;,</span><br><span class=\"line\">        &quot;webpack-bundle-analyzer&quot;: &quot;^2.11.1&quot;,</span><br><span class=\"line\">        &quot;webpack-dev-server&quot;: &quot;^2.11.2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;autoprefixer&quot;: &quot;^8.6.4&quot;,</span><br><span class=\"line\">        &quot;babel-plugin-lodash&quot;: &quot;^3.3.4&quot;,</span><br><span class=\"line\">        &quot;gulp-bird&quot;: &quot;^0.2.4&quot;,</span><br><span class=\"line\">        &quot;hi-ui&quot;: &quot;0.0.9&quot;,</span><br><span class=\"line\">        &quot;islider.js&quot;: &quot;^2.2.2&quot;,</span><br><span class=\"line\">        &quot;jquery&quot;: &quot;^3.3.1&quot;,</span><br><span class=\"line\">        &quot;lodash&quot;: &quot;^4.17.10&quot;,</span><br><span class=\"line\">        &quot;postcss-loader&quot;: &quot;^2.1.5&quot;,</span><br><span class=\"line\">        &quot;vconsole&quot;: &quot;^3.2.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-路由和数据状态管理\"><a href=\"#3-2-路由和数据状态管理\" class=\"headerlink\" title=\"3.2 路由和数据状态管理\"></a>3.2 路由和数据状态管理</h3><p>路由安装mobx-react，react-router模块;<br><a href=\"http://react-guide.github.io/react-router-cn/docs/API.html\" target=\"_blank\" rel=\"noopener\">React Router</a>是完整的React路由解决方案，也是开发React应用最常使用的路由管理库，它提供简单的API，以声明式方式实现强大的路由功能，诸如按需加载，动态路由等。<br>1.声明式：语法简洁，清晰；<br>2.按需加载：延迟加载，根据使用需要判断是否需要加载；<br>3.动态路由：动态组合应用路由结构，更灵活，更符合组件化开发模式；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file index 入口页面</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import &#123;HashRouter, Route, Redirect&#125; from &apos;react-router-dom&apos;;</span><br><span class=\"line\">import &#123;Provider&#125; from &apos;mobx-react&apos;;</span><br><span class=\"line\">import storeTree from &apos;./storeTree&apos;;</span><br><span class=\"line\">import &apos;section/common/scss/common.scss&apos;;</span><br><span class=\"line\">import Layout from &apos;section/layout/layout.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;Provider &#123;...storeTree&#125; &gt;</span><br><span class=\"line\">                &lt;HashRouter&gt;</span><br><span class=\"line\">                    &lt;Route path=&quot;/&quot; component=&#123;Layout&#125;/&gt;</span><br><span class=\"line\">                &lt;/HashRouter&gt;</span><br><span class=\"line\">            &lt;/Provider&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;App/&gt;, document.getElementById(&apos;app&apos;));</span><br></pre></td></tr></table></figure>\n<p>数据状态管理，安装mobx，确定storetree</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file storeTree 整个app的状态树</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;observable, action, extendObservable, runInAction&#125; from &apos;mobx&apos;;</span><br><span class=\"line\">import NavState from &apos;section/nav/navStore&apos;;</span><br><span class=\"line\">import iSliderState from &apos;section/homeindex/component/islider/isliderStore&apos;;</span><br><span class=\"line\">import hotPointState from &apos;section/homeindex/component/hotpoint/hotpointStore&apos;;</span><br><span class=\"line\">import recommendState from &apos;section/homeindex/component/recommend/recommendStore&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import serviceState from &apos;section/service/serviceStore&apos;;</span><br><span class=\"line\">import repairState from &apos;section/myrepair/myrepairStore&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AppState &#123;</span><br><span class=\"line\">\t// 全局store</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    AppState: new AppState(),</span><br><span class=\"line\">    NavState: new NavState(),</span><br><span class=\"line\">    iSliderState: new iSliderState(),</span><br><span class=\"line\">    hotPointState: new hotPointState(),</span><br><span class=\"line\">    recommendState: new recommendState(),</span><br><span class=\"line\">    serviceState: new serviceState(),</span><br><span class=\"line\">    repairState: new repairState()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>@observer</strong> 函数/修饰器用于react组件。通过mobx-react依赖包来提供。它通过mobx.autorun来包装了组件的render函数，以确保组件的render函数在任何数据的更改是强制重新渲染。</p>\n<p><strong>Autorun</strong>是用在一些你想要产生一个不用观察者参与的被动调用函数里面。当autorun被使用的时候，一旦依赖项发生变化，autorun提供的函数就会被执行。</p>\n<p><strong>action</strong>是任何改变状态的事物。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file serviceStore</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;observable, action, runInAction&#125; from &apos;mobx&apos;;</span><br><span class=\"line\">import _ from &apos;lodash&apos;;</span><br><span class=\"line\">import * as model from &apos;src/itsm/model/model&apos;;</span><br><span class=\"line\">import &#123;getSearchParam&#125; from &apos;section/common/js/utils&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class serviceState &#123;</span><br><span class=\"line\">    @observable serviceList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    @action getServiceList() &#123;</span><br><span class=\"line\">        let params = &#123;</span><br><span class=\"line\">            mappedAppKey: getSearchParam(&apos;appKey&apos;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        model.getServiceListList(params).then(data =&gt; &#123;</span><br><span class=\"line\">            runInAction(()=&gt;&#123;</span><br><span class=\"line\">                this.serviceList = _.get(data, &apos;data.data&apos;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @action serviceClick(id) &#123;</span><br><span class=\"line\">        let params = &#123;</span><br><span class=\"line\">            mappedAppKey: getSearchParam(&apos;appKey&apos;),</span><br><span class=\"line\">            id: id</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        model.serviceClick(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-Axios库发送ajax请求\"><a href=\"#3-3-Axios库发送ajax请求\" class=\"headerlink\" title=\"3.3 Axios库发送ajax请求\"></a>3.3 Axios库发送ajax请求</h3><p>安装axios，并通过get/post/put/delete等方式请求接口，对于json数据，一般在post请求进行数据格式转换，并在请求头部设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file  接口文件</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">import axios from &apos;axios&apos;;</span><br><span class=\"line\">let axiosConfig = &#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        &apos;Content-Type&apos;: &apos;application/json;charset=UTF-8&apos;,</span><br><span class=\"line\">        &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 获取列表</span><br><span class=\"line\">export let getHotList = function (data) &#123;</span><br><span class=\"line\">    return axios.post(&apos;/rdwtv2/api/hot&apos;, JSON.stringify(data), axiosConfig);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-代理转发gulp-bird\"><a href=\"#3-4-代理转发gulp-bird\" class=\"headerlink\" title=\"3.4 代理转发gulp-bird\"></a>3.4 代理转发gulp-bird</h3><p><a href=\"https://www.npmjs.com/package/gulp-bird\" target=\"_blank\" rel=\"noopener\">gulp-bird</a>是由百度BEFE团队开发的代理转发工具，并不是一个gulp插件，在bird基础上进行了一些优化并发布到了npm，配置方法和bird一样。<br>配置目标服务器host和port等，参考如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @file  bird-config.js</span><br><span class=\"line\"> * @author guoyueting</span><br><span class=\"line\"> */</span><br><span class=\"line\">var bird = require(&apos;./node_modules/gulp-bird/index&apos;);</span><br><span class=\"line\">// 静态服务器配置，可同时配置多个，域名需host到127.0.0.1</span><br><span class=\"line\">var server = &#123;</span><br><span class=\"line\">    &apos;8009&apos;: &#123;</span><br><span class=\"line\">        // 静态文件根目录</span><br><span class=\"line\">        &apos;basePath&apos;: &apos;./src/&apos;,</span><br><span class=\"line\">        // 是否开启调试模式，true(表示server端不缓存)，false（反之）</span><br><span class=\"line\">        &apos;debug&apos;: true</span><br><span class=\"line\">        // 忽略的静态文件请求，与此正则匹配的请求将直接走转发规则（可选配置）</span><br><span class=\"line\">        // &apos;ignoreRegExp&apos;: /\\/js\\/urls\\.js/g</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 转发规则——静态服务器没有响应的或者忽略的请求将根据一下规则转发</span><br><span class=\"line\">var transpondRules = &#123;</span><br><span class=\"line\">    &apos;8009&apos;: &#123;</span><br><span class=\"line\">        // 目标服务器的ip和端口，域名也可，但注意不要被host了</span><br><span class=\"line\">        targetServer: &#123;</span><br><span class=\"line\">            &apos;port&apos;: &apos;8680&apos;,</span><br><span class=\"line\">            // &apos;port&apos;: &apos;8080&apos;,</span><br><span class=\"line\">            &apos;host&apos;: &apos;http://m1-ite-hidev04.m1.baidu.com&apos;,</span><br><span class=\"line\">            // &apos;host&apos;: &apos;cp01-ps-dev373-liuchao31.epc.baidu.com&apos;,</span><br><span class=\"line\">            // 当为true时，如果cookie or header中有相同key，则替换</span><br><span class=\"line\">            &apos;replaceHeaders&apos;: true,</span><br><span class=\"line\">            &apos;headers&apos;: &#123;</span><br><span class=\"line\">                    &apos;cookie&apos;: &apos;&apos;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        // 特殊请求转发，可选配置，内部的host、port和attachHeaders为可选参数</span><br><span class=\"line\">        regExpPath: &#123;</span><br><span class=\"line\">            // &apos;/oa-frontend-apply-1.0.0-SNAPSHOT&apos;: &#123;</span><br><span class=\"line\">            //     &apos;host&apos;: &apos;cp01-dev-heliping.epc.baidu.com/&apos;,</span><br><span class=\"line\">            //     &apos;port&apos;: &apos;8080&apos;,</span><br><span class=\"line\">            //     //&apos;attachHeaders&apos;: &#123;&apos;app-id&apos;: 5&#125;,</span><br><span class=\"line\">            //     &apos;path&apos;: &apos;\\/&apos;</span><br><span class=\"line\">            // &#125;npm</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &apos;ajaxOnly&apos;: false</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var toolsConf = &#123;</span><br><span class=\"line\">    weinre: &#123;</span><br><span class=\"line\">        // 和移动调试工具条中的vconsole冲突, 当为true时vconsole自动关闭</span><br><span class=\"line\">        open: false,</span><br><span class=\"line\">        port: 8009</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 移动端调试工具条，PC端开发可关闭</span><br><span class=\"line\">    showTools: false</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bird.start(server, transpondRules, toolsConf);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5webpack配置打包\"><a href=\"#3-5webpack配置打包\" class=\"headerlink\" title=\"3.5webpack配置打包\"></a>3.5webpack配置打包</h3><p>下面是一个较为基础的webpack文件配置。entry是配置模块的入口，webpack执行构建的第一步将从入口开始搜寻及递归解析出所有入口依赖的模块；output定义了打包后的输出文件名、路径；module配置模块的读取和解析规则，通常用来配置loader；resolve配置Webpack如何寻找模块对应的文件；Plugins用于扩展webpack的功能，几乎所有Webpack无法直接实现的功能都能在社区找到开源的Plugin去解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\">const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin;</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(env) &#123;</span><br><span class=\"line\">    console.log(env);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        entry: &#123;</span><br><span class=\"line\">            &apos;index&apos;: &apos;./src/itsm/index.js&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        output: &#123;</span><br><span class=\"line\">            filename: &apos;js/[name]-[chunkhash].js&apos;,</span><br><span class=\"line\">            path: path.resolve(__dirname, &apos;./build&apos;),</span><br><span class=\"line\">            chunkFilename: &apos;[name].[chunkhash:4].child.js&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        module: &#123;</span><br><span class=\"line\">            rules: [&#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/i,</span><br><span class=\"line\">                use: [&#123;</span><br><span class=\"line\">                    loader: &apos;babel-loader&apos;</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">                // exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.scss|\\.sass)$/i,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &apos;style-loader&apos;,</span><br><span class=\"line\">                    use: [&#123;</span><br><span class=\"line\">                        loader: &apos;css-loader&apos;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            module: false,</span><br><span class=\"line\">                            minimize: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &apos;postcss-loader&apos;,</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &apos;sass-loader&apos;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            sourceMap: false</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.png|\\.jpg|\\.jpeg|\\.gif)$/i,</span><br><span class=\"line\">                use: [&#123;</span><br><span class=\"line\">                    loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        limit: 100</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        resolve: &#123;</span><br><span class=\"line\">            alias: &#123;</span><br><span class=\"line\">                &apos;src&apos;: path.resolve(__dirname, &apos;src&apos;),</span><br><span class=\"line\">                &apos;section&apos;: path.resolve(__dirname, &apos;src/itsm/section&apos;),</span><br><span class=\"line\">                &apos;img&apos;: path.resolve(__dirname, &apos;src/itsm/img&apos;),</span><br><span class=\"line\">                &apos;modules&apos;: path.resolve(__dirname, &apos;node_modules/islider.js/build&apos;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        plugins: [</span><br><span class=\"line\">            new CleanWebpackPlugin([&apos;./build&apos;]),</span><br><span class=\"line\">            new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">                &apos;process.env.NODE_ENV&apos;: JSON.stringify(env.NODE_ENV || &apos;development&apos;),</span><br><span class=\"line\">                &apos;isDev&apos;: JSON.stringify(env.isDev || &apos;true&apos;)</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            new ExtractTextPlugin(&apos;style.css&apos;),</span><br><span class=\"line\">            new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                template: &apos;./src/itsm/index.html&apos;,</span><br><span class=\"line\">                filename: &apos;./index.html&apos;,</span><br><span class=\"line\">                chunks: [&apos;index&apos;]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        devServer: &#123;</span><br><span class=\"line\">            host: &apos;0.0.0.0&apos;,</span><br><span class=\"line\">            port: 9822,</span><br><span class=\"line\">            proxy: &#123;</span><br><span class=\"line\">                &apos;/rdwtv2&apos;: &apos;http://localhost:8009&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-6打包指令配置\"><a href=\"#3-6打包指令配置\" class=\"headerlink\" title=\"3.6打包指令配置\"></a>3.6打包指令配置</h3><p>配置不同环境的变量值，生产环境，QA环境，开发环境某些变量可能需要根据环境进行配置，然后用webpack的definePlugin插件，定义全局变量，可以保证在和环境有关的变量取值的正确性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=production&quot;,</span><br><span class=\"line\">    &quot;dev&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=development&quot;,</span><br><span class=\"line\">    &quot;qa&quot;: &quot;./node_modules/.bin/webpack --config webpack.config.js --env.NODE_ENV=qa&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;./node_modules/.bin/webpack-dev-server --config webpack.config.js --env.NODE_ENV=local&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、未来改进\"><a href=\"#四、未来改进\" class=\"headerlink\" title=\"四、未来改进\"></a>四、未来改进</h2><p>未来架构设计还需要完善的点：</p>\n<ol>\n<li>Immutable数据，考虑引入Immutable.js； </li>\n<li>测试，考虑jest集成应用测试</li>\n<li>函数库，如ramda，underscore； </li>\n<li>调试工具，reactotron,react-devtools</li>\n</ol>\n<h2 id=\"五、Demo地址\"><a href=\"#五、Demo地址\" class=\"headerlink\" title=\"五、Demo地址\"></a>五、Demo地址</h2><p>最后，附上demo地址：<code>https://github.com/guoyueting/react-mobx-seed</code></p>\n"},{"title":"常用的CSS小技巧（一）","_content":"实际开发过程中会遇到一些需要用CSS小技巧处理的布局问题，现在分享几个个人工作中遇到的小问题和解决方案。\n\n## 1.inline元素间的空白间隙\n这里要介绍一个神器**font-size:0**。\n如果你写了个列表，因为元素节点有文本节点，在缩进代码时会占据宽度，比如：\n\n```\n<ul>\n    <li>我是第一项</li>\n    <li>我是第二项</li>\n    <li>我是第三项</li>\n    <li>我是第四项</li>\n</ul>\n```\n\n设置了CSS\n\n```\n<style>\n    ul {\n        list-style: none;\n    }\n    li {\n        width: 25%;\n        display: inline-block;\n        background: green;\n        text-align: center;\n        height: 40px;\n        line-height: 40px;\n    }\n</style>\n```\n就会发现\n![有空白间隙](http://pbzqi3myf.bkt.clouddn.com/font-size0.png)\n我们为了页面代码的整洁可读性，往往会设置一些适当的缩进、换行，但当元素的display为inline或者inline-block的时候，这些缩进、换行就会产生空白，所以出现上述问题。虽然还有其他方法能解决我们因为缩进、换行而产生的问题，但此时，最合适的方法就是给li的父级ul设置**font-size: 0**， 给li设置**font-size: 16px**，如此就达到了所需效果\n![空白间隙消失啦~](http://pbzqi3myf.bkt.clouddn.com/font-size1.png)\n\n图片间的间隙问题也是因为换行、缩进。\n\n```\n<div>\n     <img src=\"pic1.jpg\">\n     <img src=\"pic2.jpg\">\n</div>\n```\n如上，图片出现间隙后，在div设置**font-size:0**，间隙就会消失。\n\n## 2.图片等比缩放\n在做项目时遇到轮播图的图片从某服务器获取的情况，但图片大小比例却是不定的，这种情况该如何保证图片按比例显示？或者在移动端场景下，如何做图片的响应性布局？\n\n在CSS3中，可使用`background-size`来解决针对响应性布局的背景图片自适应。\n\n+ 浏览器支持的程度：`IE9+, Firefox4+, opera, chrome, safari5+`\n+ 基本语法：`background-size: length | percentage | cover | contain`\n\n\n1. `length`该属性值是设置背景图像的宽度和高度的，第一个值是宽度，第二个值是设置高度的。如果只设置第一个值，那么第二个值会自动转换为 “auto”；**调整图片到指定大小；**\n2. `percentage`该属性是以父元素的百分比来设置图片的宽度和高度的，第一个值是宽度，第二个值是高度。如果只设置一个值，那么第二个值会被设置为 “auto”；**调整图片到指定大小，百分比相对于包含元素的尺寸。**\n3. `cover`把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。**扩展图片来填满元素（保持像素的长宽比）；**\n4. `contain`把图像扩展至最大尺寸，以使宽度和高度完全适应内容区域。 **缩小图片来适应元素的尺寸（保持像素的长宽比）**\n\n那究竟是怎么使用的呢？举个🌰\n\n```\n// html部分\n<div class=\"bsize1\"></div>\n// CSS部分\n.bsize1 {\n\tposition: relative;\n\twidth: 28%;\n\theight: 0;\n\tpadding-bottom: 17.5%;\n\toverflow: hidden;\n\tbackground-position: center center;\n\tbackground-repeat: no-repeat;\n\tbackground-size: cover;\n\tborder: 1px solid #e2e5e7 !important;\n}\n```\n\n## 3.文字折行\n单行文本溢出\n\n```\noverflow: hidden;\ntext-overflow:ellipsis;\nwhite-space: nowrap;\n```\n多行文本溢出\n\n```\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3;\noverflow: hidden;\n```\n\n`-webkit-line-clamp`用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：\n`display: -webkit-box;`必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。\n`-webkit-box-orient` 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。\n\n## 4.calc()\n\n整体高度自适应布局怎么实现？在讲calc()之前先说一下vh和vw：\n\n```\nvw   相对于视口的宽度。视口被均分为100单位的vw\nvh   相对于视口的高度。视口被均分为100单位的vh\nvmax 相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax\nvmin 相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin\n```\n\n+ calc 是 css3提供的一个在css文件中计算值的函数：用于动态计算长度值。\n+ 需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；\n+ 任何长度值都可以使用calc()函数进行计算；\n+ calc()函数支持 \"+\", \"-\", \"*\", \"/\" 运算；\n+ calc()函数使用标准的数学运算优先级规则；\n\n**注意！**\n\n**如果用了CSS预处理器（LESS/SCSS）会被它们先解析，这时需要禁用解析calc(~ '100vh - 64px')**","source":"_posts/常用的CSS小技巧（一）.md","raw":"---\ntitle: 常用的CSS小技巧（一）\ncategories: CSS\n---\n实际开发过程中会遇到一些需要用CSS小技巧处理的布局问题，现在分享几个个人工作中遇到的小问题和解决方案。\n\n## 1.inline元素间的空白间隙\n这里要介绍一个神器**font-size:0**。\n如果你写了个列表，因为元素节点有文本节点，在缩进代码时会占据宽度，比如：\n\n```\n<ul>\n    <li>我是第一项</li>\n    <li>我是第二项</li>\n    <li>我是第三项</li>\n    <li>我是第四项</li>\n</ul>\n```\n\n设置了CSS\n\n```\n<style>\n    ul {\n        list-style: none;\n    }\n    li {\n        width: 25%;\n        display: inline-block;\n        background: green;\n        text-align: center;\n        height: 40px;\n        line-height: 40px;\n    }\n</style>\n```\n就会发现\n![有空白间隙](http://pbzqi3myf.bkt.clouddn.com/font-size0.png)\n我们为了页面代码的整洁可读性，往往会设置一些适当的缩进、换行，但当元素的display为inline或者inline-block的时候，这些缩进、换行就会产生空白，所以出现上述问题。虽然还有其他方法能解决我们因为缩进、换行而产生的问题，但此时，最合适的方法就是给li的父级ul设置**font-size: 0**， 给li设置**font-size: 16px**，如此就达到了所需效果\n![空白间隙消失啦~](http://pbzqi3myf.bkt.clouddn.com/font-size1.png)\n\n图片间的间隙问题也是因为换行、缩进。\n\n```\n<div>\n     <img src=\"pic1.jpg\">\n     <img src=\"pic2.jpg\">\n</div>\n```\n如上，图片出现间隙后，在div设置**font-size:0**，间隙就会消失。\n\n## 2.图片等比缩放\n在做项目时遇到轮播图的图片从某服务器获取的情况，但图片大小比例却是不定的，这种情况该如何保证图片按比例显示？或者在移动端场景下，如何做图片的响应性布局？\n\n在CSS3中，可使用`background-size`来解决针对响应性布局的背景图片自适应。\n\n+ 浏览器支持的程度：`IE9+, Firefox4+, opera, chrome, safari5+`\n+ 基本语法：`background-size: length | percentage | cover | contain`\n\n\n1. `length`该属性值是设置背景图像的宽度和高度的，第一个值是宽度，第二个值是设置高度的。如果只设置第一个值，那么第二个值会自动转换为 “auto”；**调整图片到指定大小；**\n2. `percentage`该属性是以父元素的百分比来设置图片的宽度和高度的，第一个值是宽度，第二个值是高度。如果只设置一个值，那么第二个值会被设置为 “auto”；**调整图片到指定大小，百分比相对于包含元素的尺寸。**\n3. `cover`把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。**扩展图片来填满元素（保持像素的长宽比）；**\n4. `contain`把图像扩展至最大尺寸，以使宽度和高度完全适应内容区域。 **缩小图片来适应元素的尺寸（保持像素的长宽比）**\n\n那究竟是怎么使用的呢？举个🌰\n\n```\n// html部分\n<div class=\"bsize1\"></div>\n// CSS部分\n.bsize1 {\n\tposition: relative;\n\twidth: 28%;\n\theight: 0;\n\tpadding-bottom: 17.5%;\n\toverflow: hidden;\n\tbackground-position: center center;\n\tbackground-repeat: no-repeat;\n\tbackground-size: cover;\n\tborder: 1px solid #e2e5e7 !important;\n}\n```\n\n## 3.文字折行\n单行文本溢出\n\n```\noverflow: hidden;\ntext-overflow:ellipsis;\nwhite-space: nowrap;\n```\n多行文本溢出\n\n```\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3;\noverflow: hidden;\n```\n\n`-webkit-line-clamp`用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：\n`display: -webkit-box;`必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。\n`-webkit-box-orient` 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。\n\n## 4.calc()\n\n整体高度自适应布局怎么实现？在讲calc()之前先说一下vh和vw：\n\n```\nvw   相对于视口的宽度。视口被均分为100单位的vw\nvh   相对于视口的高度。视口被均分为100单位的vh\nvmax 相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax\nvmin 相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin\n```\n\n+ calc 是 css3提供的一个在css文件中计算值的函数：用于动态计算长度值。\n+ 需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；\n+ 任何长度值都可以使用calc()函数进行计算；\n+ calc()函数支持 \"+\", \"-\", \"*\", \"/\" 运算；\n+ calc()函数使用标准的数学运算优先级规则；\n\n**注意！**\n\n**如果用了CSS预处理器（LESS/SCSS）会被它们先解析，这时需要禁用解析calc(~ '100vh - 64px')**","slug":"常用的CSS小技巧（一）","published":1,"date":"2018-07-25T10:44:19.000Z","updated":"2018-07-25T10:54:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkpapzj2000648r6fsfifh7y","content":"<p>实际开发过程中会遇到一些需要用CSS小技巧处理的布局问题，现在分享几个个人工作中遇到的小问题和解决方案。</p>\n<h2 id=\"1-inline元素间的空白间隙\"><a href=\"#1-inline元素间的空白间隙\" class=\"headerlink\" title=\"1.inline元素间的空白间隙\"></a>1.inline元素间的空白间隙</h2><p>这里要介绍一个神器<strong>font-size:0</strong>。<br>如果你写了个列表，因为元素节点有文本节点，在缩进代码时会占据宽度，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第一项&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第二项&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第三项&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第四项&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>设置了CSS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    ul &#123;</span><br><span class=\"line\">        list-style: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    li &#123;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        background: green;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        height: 40px;</span><br><span class=\"line\">        line-height: 40px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>就会发现<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/font-size0.png\" alt=\"有空白间隙\"><br>我们为了页面代码的整洁可读性，往往会设置一些适当的缩进、换行，但当元素的display为inline或者inline-block的时候，这些缩进、换行就会产生空白，所以出现上述问题。虽然还有其他方法能解决我们因为缩进、换行而产生的问题，但此时，最合适的方法就是给li的父级ul设置<strong>font-size: 0</strong>， 给li设置<strong>font-size: 16px</strong>，如此就达到了所需效果<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/font-size1.png\" alt=\"空白间隙消失啦~\"></p>\n<p>图片间的间隙问题也是因为换行、缩进。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">     &lt;img src=&quot;pic1.jpg&quot;&gt;</span><br><span class=\"line\">     &lt;img src=&quot;pic2.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>如上，图片出现间隙后，在div设置<strong>font-size:0</strong>，间隙就会消失。</p>\n<h2 id=\"2-图片等比缩放\"><a href=\"#2-图片等比缩放\" class=\"headerlink\" title=\"2.图片等比缩放\"></a>2.图片等比缩放</h2><p>在做项目时遇到轮播图的图片从某服务器获取的情况，但图片大小比例却是不定的，这种情况该如何保证图片按比例显示？或者在移动端场景下，如何做图片的响应性布局？</p>\n<p>在CSS3中，可使用<code>background-size</code>来解决针对响应性布局的背景图片自适应。</p>\n<ul>\n<li>浏览器支持的程度：<code>IE9+, Firefox4+, opera, chrome, safari5+</code></li>\n<li>基本语法：<code>background-size: length | percentage | cover | contain</code></li>\n</ul>\n<ol>\n<li><code>length</code>该属性值是设置背景图像的宽度和高度的，第一个值是宽度，第二个值是设置高度的。如果只设置第一个值，那么第二个值会自动转换为 “auto”；<strong>调整图片到指定大小；</strong></li>\n<li><code>percentage</code>该属性是以父元素的百分比来设置图片的宽度和高度的，第一个值是宽度，第二个值是高度。如果只设置一个值，那么第二个值会被设置为 “auto”；<strong>调整图片到指定大小，百分比相对于包含元素的尺寸。</strong></li>\n<li><code>cover</code>把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。<strong>扩展图片来填满元素（保持像素的长宽比）；</strong></li>\n<li><code>contain</code>把图像扩展至最大尺寸，以使宽度和高度完全适应内容区域。 <strong>缩小图片来适应元素的尺寸（保持像素的长宽比）</strong></li>\n</ol>\n<p>那究竟是怎么使用的呢？举个🌰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html部分</span><br><span class=\"line\">&lt;div class=&quot;bsize1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">// CSS部分</span><br><span class=\"line\">.bsize1 &#123;</span><br><span class=\"line\">\tposition: relative;</span><br><span class=\"line\">\twidth: 28%;</span><br><span class=\"line\">\theight: 0;</span><br><span class=\"line\">\tpadding-bottom: 17.5%;</span><br><span class=\"line\">\toverflow: hidden;</span><br><span class=\"line\">\tbackground-position: center center;</span><br><span class=\"line\">\tbackground-repeat: no-repeat;</span><br><span class=\"line\">\tbackground-size: cover;</span><br><span class=\"line\">\tborder: 1px solid #e2e5e7 !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-文字折行\"><a href=\"#3-文字折行\" class=\"headerlink\" title=\"3.文字折行\"></a>3.文字折行</h2><p>单行文本溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow:ellipsis;</span><br><span class=\"line\">white-space: nowrap;</span><br></pre></td></tr></table></figure>\n<p>多行文本溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: -webkit-box;</span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br><span class=\"line\">-webkit-line-clamp: 3;</span><br><span class=\"line\">overflow: hidden;</span><br></pre></td></tr></table></figure>\n<p><code>-webkit-line-clamp</code>用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：<br><code>display: -webkit-box;</code>必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。<br><code>-webkit-box-orient</code> 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</p>\n<h2 id=\"4-calc\"><a href=\"#4-calc\" class=\"headerlink\" title=\"4.calc()\"></a>4.calc()</h2><p>整体高度自适应布局怎么实现？在讲calc()之前先说一下vh和vw：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vw   相对于视口的宽度。视口被均分为100单位的vw</span><br><span class=\"line\">vh   相对于视口的高度。视口被均分为100单位的vh</span><br><span class=\"line\">vmax 相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax</span><br><span class=\"line\">vmin 相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>calc 是 css3提供的一个在css文件中计算值的函数：用于动态计算长度值。</li>\n<li>需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；</li>\n<li>任何长度值都可以使用calc()函数进行计算；</li>\n<li>calc()函数支持 “+”, “-“, “*”, “/“ 运算；</li>\n<li>calc()函数使用标准的数学运算优先级规则；</li>\n</ul>\n<p><strong>注意！</strong></p>\n<p><strong>如果用了CSS预处理器（LESS/SCSS）会被它们先解析，这时需要禁用解析calc(~ ‘100vh - 64px’)</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实际开发过程中会遇到一些需要用CSS小技巧处理的布局问题，现在分享几个个人工作中遇到的小问题和解决方案。</p>\n<h2 id=\"1-inline元素间的空白间隙\"><a href=\"#1-inline元素间的空白间隙\" class=\"headerlink\" title=\"1.inline元素间的空白间隙\"></a>1.inline元素间的空白间隙</h2><p>这里要介绍一个神器<strong>font-size:0</strong>。<br>如果你写了个列表，因为元素节点有文本节点，在缩进代码时会占据宽度，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第一项&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第二项&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第三项&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;我是第四项&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>设置了CSS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    ul &#123;</span><br><span class=\"line\">        list-style: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    li &#123;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        background: green;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        height: 40px;</span><br><span class=\"line\">        line-height: 40px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>就会发现<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/font-size0.png\" alt=\"有空白间隙\"><br>我们为了页面代码的整洁可读性，往往会设置一些适当的缩进、换行，但当元素的display为inline或者inline-block的时候，这些缩进、换行就会产生空白，所以出现上述问题。虽然还有其他方法能解决我们因为缩进、换行而产生的问题，但此时，最合适的方法就是给li的父级ul设置<strong>font-size: 0</strong>， 给li设置<strong>font-size: 16px</strong>，如此就达到了所需效果<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/font-size1.png\" alt=\"空白间隙消失啦~\"></p>\n<p>图片间的间隙问题也是因为换行、缩进。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">     &lt;img src=&quot;pic1.jpg&quot;&gt;</span><br><span class=\"line\">     &lt;img src=&quot;pic2.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>如上，图片出现间隙后，在div设置<strong>font-size:0</strong>，间隙就会消失。</p>\n<h2 id=\"2-图片等比缩放\"><a href=\"#2-图片等比缩放\" class=\"headerlink\" title=\"2.图片等比缩放\"></a>2.图片等比缩放</h2><p>在做项目时遇到轮播图的图片从某服务器获取的情况，但图片大小比例却是不定的，这种情况该如何保证图片按比例显示？或者在移动端场景下，如何做图片的响应性布局？</p>\n<p>在CSS3中，可使用<code>background-size</code>来解决针对响应性布局的背景图片自适应。</p>\n<ul>\n<li>浏览器支持的程度：<code>IE9+, Firefox4+, opera, chrome, safari5+</code></li>\n<li>基本语法：<code>background-size: length | percentage | cover | contain</code></li>\n</ul>\n<ol>\n<li><code>length</code>该属性值是设置背景图像的宽度和高度的，第一个值是宽度，第二个值是设置高度的。如果只设置第一个值，那么第二个值会自动转换为 “auto”；<strong>调整图片到指定大小；</strong></li>\n<li><code>percentage</code>该属性是以父元素的百分比来设置图片的宽度和高度的，第一个值是宽度，第二个值是高度。如果只设置一个值，那么第二个值会被设置为 “auto”；<strong>调整图片到指定大小，百分比相对于包含元素的尺寸。</strong></li>\n<li><code>cover</code>把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。<strong>扩展图片来填满元素（保持像素的长宽比）；</strong></li>\n<li><code>contain</code>把图像扩展至最大尺寸，以使宽度和高度完全适应内容区域。 <strong>缩小图片来适应元素的尺寸（保持像素的长宽比）</strong></li>\n</ol>\n<p>那究竟是怎么使用的呢？举个🌰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html部分</span><br><span class=\"line\">&lt;div class=&quot;bsize1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">// CSS部分</span><br><span class=\"line\">.bsize1 &#123;</span><br><span class=\"line\">\tposition: relative;</span><br><span class=\"line\">\twidth: 28%;</span><br><span class=\"line\">\theight: 0;</span><br><span class=\"line\">\tpadding-bottom: 17.5%;</span><br><span class=\"line\">\toverflow: hidden;</span><br><span class=\"line\">\tbackground-position: center center;</span><br><span class=\"line\">\tbackground-repeat: no-repeat;</span><br><span class=\"line\">\tbackground-size: cover;</span><br><span class=\"line\">\tborder: 1px solid #e2e5e7 !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-文字折行\"><a href=\"#3-文字折行\" class=\"headerlink\" title=\"3.文字折行\"></a>3.文字折行</h2><p>单行文本溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow:ellipsis;</span><br><span class=\"line\">white-space: nowrap;</span><br></pre></td></tr></table></figure>\n<p>多行文本溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: -webkit-box;</span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br><span class=\"line\">-webkit-line-clamp: 3;</span><br><span class=\"line\">overflow: hidden;</span><br></pre></td></tr></table></figure>\n<p><code>-webkit-line-clamp</code>用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：<br><code>display: -webkit-box;</code>必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。<br><code>-webkit-box-orient</code> 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</p>\n<h2 id=\"4-calc\"><a href=\"#4-calc\" class=\"headerlink\" title=\"4.calc()\"></a>4.calc()</h2><p>整体高度自适应布局怎么实现？在讲calc()之前先说一下vh和vw：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vw   相对于视口的宽度。视口被均分为100单位的vw</span><br><span class=\"line\">vh   相对于视口的高度。视口被均分为100单位的vh</span><br><span class=\"line\">vmax 相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax</span><br><span class=\"line\">vmin 相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>calc 是 css3提供的一个在css文件中计算值的函数：用于动态计算长度值。</li>\n<li>需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；</li>\n<li>任何长度值都可以使用calc()函数进行计算；</li>\n<li>calc()函数支持 “+”, “-“, “*”, “/“ 运算；</li>\n<li>calc()函数使用标准的数学运算优先级规则；</li>\n</ul>\n<p><strong>注意！</strong></p>\n<p><strong>如果用了CSS预处理器（LESS/SCSS）会被它们先解析，这时需要禁用解析calc(~ ‘100vh - 64px’)</strong></p>\n"},{"title":"常用的CSS小技巧（二）","_content":"\n## tranform知多少\ntransform是变换，包括旋转rotate、扭曲skew、缩放scale和移动translate，可以改变对象的外形和位置。transform的转换，并不是动态的，而是最终时刻的状态。\n\n> transform: rotate | scale | skew | translate | matrix\n\nCSS3中的坐标系如图所示。后续介绍会用上。\n![XYZ坐标轴](http://pbzqi3myf.bkt.clouddn.com/xyz.png)\n\n### （1）rotate\n可进行2D或者3D旋转。其中常用的rotate(angle)定义2D旋转，angle定义旋转的角度，正数表示顺时针旋转，负数表示逆时针旋转。\n\n* 定义\n\n|值|描述|\n|---|---|\n|rotate(angle)|定义 2D 旋转，在参数中规定角度（正数顺时针、负数逆时针）|\n|rotate3d(x,y,z,angle)|定义 3D 旋转|\n|rotateX(angle)|定义沿着 X 轴的 3D 旋转|\n|rotateY(angle)|定义沿着 Y 轴的 3D 旋转|\n|rotateZ(angle)|定义沿着 Z 轴的 3D 旋转|\n\n* 使用方法\n\n```\ndiv\n{\n    transform: rotate(30deg);\n    -ms-transform: rotate(30deg); /* IE 9 */\n    -webkit-transform: rotate(30deg); /* Safari and Chrome */\n}\n```\n\n* 效果\n\n![rotate](http://pbzqi3myf.bkt.clouddn.com/rotate.png)\n\n\n### (2) scale\nscale(x,y)方法让元素可以在x,y轴方向上进行拉伸或缩放。伸缩程度由x，y参数决定。scale的参数如果只有一个，则默认为等比例变化。（例如scale(1.5)代表放大1.5倍）。\n\n* 定义\n\n|值|描述|\n|---|---|\n|scale(x[,y]?)|定义 2D 缩放转换|\n|scale3d(x,y,z)|定义 3D 缩放转换|\n|scaleX(x)|通过设置 X 轴的值来定义缩放转换|\n|scaleY(y)|通过设置 Y 轴的值来定义缩放转换|\n|scaleZ(z)|通过设置 Z 轴的值来定义 3D 缩放转换|\n\n* 使用方法\n\n```\ndiv\n{\n    transform: scale(2,3); /* 标准语法 */\n    -ms-transform:scale(2,3); /* IE 9 */\n    -webkit-transform: scale(2,3); /* Safari */\n}\n```\n\n* 效果\n\n![scale](http://pbzqi3myf.bkt.clouddn.com/scale.png)\n\n\n### (3) translate\ntranslate(x,y)方法，让元素相对当前位置在x、y方向上偏移给定参数的距离。它是translateX()和translateY()的结合。\n\n* 定义\n\n|值|描述|\n|---|---|\n|translate(x,y)|定义 2D 转换|\n|translate3d(x,y,z)|定义 3D 转换|\n|translateX(x)|定义转换，只是用 X 轴的值|\n|translateY(y)|定义转换，只是用 Y 轴的值|\n|translateZ(z)|定义 3D 转换，只是用 Z 轴的值|\n\n* 使用方法\n\n```\ndiv\n{\n    transform: translate(50px,100px);\n    -ms-transform: translate(50px,100px); /* IE 9 */\n    -webkit-transform: translate(50px,100px); /* Safari and Chrome */\n}\n```\n\n* 效果\n\n![scale](http://pbzqi3myf.bkt.clouddn.com/translate.png)\n\n### Q：tranlateZ(0)为什么可以提高浏览器渲染的性能?\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里要特别提出`tranlateZ(0)`,可以利用GPU加速，提高浏览器渲染的性能。为什么`translateZ(0)`可以提升渲染的性能呢？？这得从浏览器的渲染原理说起。\n\n<big>** 浏览器渲染原理 **</big>\n在从服务器拿到数据后，浏览器会先解析三类东西：\n\n* 解析html,xhtml,svg这三类文档，形成dom树。\n* 解析css，产生css rule tree。\n* 解析js，js会通过api来操作dom tree和css rule tree。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解析完成之后，浏览器引擎会通过dom tree和css rule tree来构建rendering tree：\n\n* rendering tree和dom tree并不完全相同，例如：<head></head>或display:none的东西就不会放在渲染树中\n* css rule tree主要是完成匹配，并把css rule附加给rendering tree的每个element\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在渲染树构建完成后，\n\n* 浏览器会对这些元素进行定位和布局，这一步也叫做reflow(回流)或者layout\n* 浏览器绘制这些元素的样式，颜色，背景，大小及边框等，这一步也叫做repaint(重绘)\n* 然后浏览器会将各层的信息发送给GPU，GPU会将各层合成；显示在屏幕上\n\n即渲染树构建完成后，浏览器要做的步骤是：\nreflow --->  repaint ---> composite\n\nreflow和repaint都是耗费浏览器性能的操作,为了仅发生composite，我们做动画的css property必须满足以下三个条件：\n\n1. 不影响文档流。\n2. 不依赖文档流。\n3. 不会造成重绘。\n\n满足以上以上条件的css property只有transform和opacity。\n\n这样做有两个优势:\n\n1. 动画将会非常流畅\n2. 动画不在绑定到CPU，即使js执行大量的工作；动画依然流畅。\n\nGPU有2个问题：\n\n1. 一个或多个没有自己复合层的元素要出现在有复合层元素的上方，它就会拥有自己的复合层；这种情况被称为隐式合成。\n2. 使用GPU动画需要发送多张渲染层的图像给GPU，GPU也需要缓存它们以便于后续动画的使用。\n\n所以——\n\n* 保持动画的对象的z-index尽可能的高。理想的，这些元素应该是body元素的直接子元素。当然，这不是总可能的。所以你可以克隆一个元素，把它放在body元素下仅仅是为了做动画。\n\n* 将元素上设置will-change CSS属性，元素上有了这个属性，浏览器会提升这个元素成为一个复合层（不是总是）。这样动画就可以平滑的开始和结束。但是不要滥用这个属性，否则会大大增加内存消耗。\n\n\n\n\n<big>** tranlateZ(0)为什么可以提高浏览器渲染的性能？**</big>\n这个问题是因为使用transform和opacity做CSS动画的时候，会将元素提升为一个复合层；而使用js操作css属性做动画时，必须使用translateZ或will-change才能将元素强行提升至一个复合层。\n\n元素本身使用transform和opacity做CSS动画的时候，会提前告诉GPU动画如何开始和结束及所需要的指令；所以会创建一个复合层（渲染层），并把页面所有的复合层发送给GPU；作为图像缓存，然后动画的发生仅仅是复合层间相对移动。当元素使用css动画时，在控制台中的layers可以看到，会有两个layer。\n\n而使用js做动画，js必须在动画的每一帧计算元素的状态；发送给GPU，但不会将元素提升至一个复合层；所以想让元素提升至一个复合层，必须使用translateZ或will-change: transform, opacity。当我们使用js动画时，在控制台，可以看到只有一个layer，添加translateZ(0)的时候，可以看到又有两个layer了。\n\n\n> 简而言之，是因为transform不会触发repaint，而是会创建composited layer，\nGPU会来执行transform的操作，将浏览器的渲染过程交给GPU处理，而不是使用自带的比较慢的渲染器。\n这样就可以使得动画更加顺畅。\n\n\n\n\n\n\n\n","source":"_posts/常用的CSS小技巧（二）.md","raw":"---\ntitle: 常用的CSS小技巧（二）\ncategories: CSS\n---\n\n## tranform知多少\ntransform是变换，包括旋转rotate、扭曲skew、缩放scale和移动translate，可以改变对象的外形和位置。transform的转换，并不是动态的，而是最终时刻的状态。\n\n> transform: rotate | scale | skew | translate | matrix\n\nCSS3中的坐标系如图所示。后续介绍会用上。\n![XYZ坐标轴](http://pbzqi3myf.bkt.clouddn.com/xyz.png)\n\n### （1）rotate\n可进行2D或者3D旋转。其中常用的rotate(angle)定义2D旋转，angle定义旋转的角度，正数表示顺时针旋转，负数表示逆时针旋转。\n\n* 定义\n\n|值|描述|\n|---|---|\n|rotate(angle)|定义 2D 旋转，在参数中规定角度（正数顺时针、负数逆时针）|\n|rotate3d(x,y,z,angle)|定义 3D 旋转|\n|rotateX(angle)|定义沿着 X 轴的 3D 旋转|\n|rotateY(angle)|定义沿着 Y 轴的 3D 旋转|\n|rotateZ(angle)|定义沿着 Z 轴的 3D 旋转|\n\n* 使用方法\n\n```\ndiv\n{\n    transform: rotate(30deg);\n    -ms-transform: rotate(30deg); /* IE 9 */\n    -webkit-transform: rotate(30deg); /* Safari and Chrome */\n}\n```\n\n* 效果\n\n![rotate](http://pbzqi3myf.bkt.clouddn.com/rotate.png)\n\n\n### (2) scale\nscale(x,y)方法让元素可以在x,y轴方向上进行拉伸或缩放。伸缩程度由x，y参数决定。scale的参数如果只有一个，则默认为等比例变化。（例如scale(1.5)代表放大1.5倍）。\n\n* 定义\n\n|值|描述|\n|---|---|\n|scale(x[,y]?)|定义 2D 缩放转换|\n|scale3d(x,y,z)|定义 3D 缩放转换|\n|scaleX(x)|通过设置 X 轴的值来定义缩放转换|\n|scaleY(y)|通过设置 Y 轴的值来定义缩放转换|\n|scaleZ(z)|通过设置 Z 轴的值来定义 3D 缩放转换|\n\n* 使用方法\n\n```\ndiv\n{\n    transform: scale(2,3); /* 标准语法 */\n    -ms-transform:scale(2,3); /* IE 9 */\n    -webkit-transform: scale(2,3); /* Safari */\n}\n```\n\n* 效果\n\n![scale](http://pbzqi3myf.bkt.clouddn.com/scale.png)\n\n\n### (3) translate\ntranslate(x,y)方法，让元素相对当前位置在x、y方向上偏移给定参数的距离。它是translateX()和translateY()的结合。\n\n* 定义\n\n|值|描述|\n|---|---|\n|translate(x,y)|定义 2D 转换|\n|translate3d(x,y,z)|定义 3D 转换|\n|translateX(x)|定义转换，只是用 X 轴的值|\n|translateY(y)|定义转换，只是用 Y 轴的值|\n|translateZ(z)|定义 3D 转换，只是用 Z 轴的值|\n\n* 使用方法\n\n```\ndiv\n{\n    transform: translate(50px,100px);\n    -ms-transform: translate(50px,100px); /* IE 9 */\n    -webkit-transform: translate(50px,100px); /* Safari and Chrome */\n}\n```\n\n* 效果\n\n![scale](http://pbzqi3myf.bkt.clouddn.com/translate.png)\n\n### Q：tranlateZ(0)为什么可以提高浏览器渲染的性能?\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里要特别提出`tranlateZ(0)`,可以利用GPU加速，提高浏览器渲染的性能。为什么`translateZ(0)`可以提升渲染的性能呢？？这得从浏览器的渲染原理说起。\n\n<big>** 浏览器渲染原理 **</big>\n在从服务器拿到数据后，浏览器会先解析三类东西：\n\n* 解析html,xhtml,svg这三类文档，形成dom树。\n* 解析css，产生css rule tree。\n* 解析js，js会通过api来操作dom tree和css rule tree。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解析完成之后，浏览器引擎会通过dom tree和css rule tree来构建rendering tree：\n\n* rendering tree和dom tree并不完全相同，例如：<head></head>或display:none的东西就不会放在渲染树中\n* css rule tree主要是完成匹配，并把css rule附加给rendering tree的每个element\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在渲染树构建完成后，\n\n* 浏览器会对这些元素进行定位和布局，这一步也叫做reflow(回流)或者layout\n* 浏览器绘制这些元素的样式，颜色，背景，大小及边框等，这一步也叫做repaint(重绘)\n* 然后浏览器会将各层的信息发送给GPU，GPU会将各层合成；显示在屏幕上\n\n即渲染树构建完成后，浏览器要做的步骤是：\nreflow --->  repaint ---> composite\n\nreflow和repaint都是耗费浏览器性能的操作,为了仅发生composite，我们做动画的css property必须满足以下三个条件：\n\n1. 不影响文档流。\n2. 不依赖文档流。\n3. 不会造成重绘。\n\n满足以上以上条件的css property只有transform和opacity。\n\n这样做有两个优势:\n\n1. 动画将会非常流畅\n2. 动画不在绑定到CPU，即使js执行大量的工作；动画依然流畅。\n\nGPU有2个问题：\n\n1. 一个或多个没有自己复合层的元素要出现在有复合层元素的上方，它就会拥有自己的复合层；这种情况被称为隐式合成。\n2. 使用GPU动画需要发送多张渲染层的图像给GPU，GPU也需要缓存它们以便于后续动画的使用。\n\n所以——\n\n* 保持动画的对象的z-index尽可能的高。理想的，这些元素应该是body元素的直接子元素。当然，这不是总可能的。所以你可以克隆一个元素，把它放在body元素下仅仅是为了做动画。\n\n* 将元素上设置will-change CSS属性，元素上有了这个属性，浏览器会提升这个元素成为一个复合层（不是总是）。这样动画就可以平滑的开始和结束。但是不要滥用这个属性，否则会大大增加内存消耗。\n\n\n\n\n<big>** tranlateZ(0)为什么可以提高浏览器渲染的性能？**</big>\n这个问题是因为使用transform和opacity做CSS动画的时候，会将元素提升为一个复合层；而使用js操作css属性做动画时，必须使用translateZ或will-change才能将元素强行提升至一个复合层。\n\n元素本身使用transform和opacity做CSS动画的时候，会提前告诉GPU动画如何开始和结束及所需要的指令；所以会创建一个复合层（渲染层），并把页面所有的复合层发送给GPU；作为图像缓存，然后动画的发生仅仅是复合层间相对移动。当元素使用css动画时，在控制台中的layers可以看到，会有两个layer。\n\n而使用js做动画，js必须在动画的每一帧计算元素的状态；发送给GPU，但不会将元素提升至一个复合层；所以想让元素提升至一个复合层，必须使用translateZ或will-change: transform, opacity。当我们使用js动画时，在控制台，可以看到只有一个layer，添加translateZ(0)的时候，可以看到又有两个layer了。\n\n\n> 简而言之，是因为transform不会触发repaint，而是会创建composited layer，\nGPU会来执行transform的操作，将浏览器的渲染过程交给GPU处理，而不是使用自带的比较慢的渲染器。\n这样就可以使得动画更加顺畅。\n\n\n\n\n\n\n\n","slug":"常用的CSS小技巧（二）","published":1,"date":"2018-08-10T08:44:48.000Z","updated":"2018-08-11T10:44:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkpapzjm000c48r6lelifuc7","content":"<h2 id=\"tranform知多少\"><a href=\"#tranform知多少\" class=\"headerlink\" title=\"tranform知多少\"></a>tranform知多少</h2><p>transform是变换，包括旋转rotate、扭曲skew、缩放scale和移动translate，可以改变对象的外形和位置。transform的转换，并不是动态的，而是最终时刻的状态。</p>\n<blockquote>\n<p>transform: rotate | scale | skew | translate | matrix</p>\n</blockquote>\n<p>CSS3中的坐标系如图所示。后续介绍会用上。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/xyz.png\" alt=\"XYZ坐标轴\"></p>\n<h3 id=\"（1）rotate\"><a href=\"#（1）rotate\" class=\"headerlink\" title=\"（1）rotate\"></a>（1）rotate</h3><p>可进行2D或者3D旋转。其中常用的rotate(angle)定义2D旋转，angle定义旋转的角度，正数表示顺时针旋转，负数表示逆时针旋转。</p>\n<ul>\n<li>定义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rotate(angle)</td>\n<td>定义 2D 旋转，在参数中规定角度（正数顺时针、负数逆时针）</td>\n</tr>\n<tr>\n<td>rotate3d(x,y,z,angle)</td>\n<td>定义 3D 旋转</td>\n</tr>\n<tr>\n<td>rotateX(angle)</td>\n<td>定义沿着 X 轴的 3D 旋转</td>\n</tr>\n<tr>\n<td>rotateY(angle)</td>\n<td>定义沿着 Y 轴的 3D 旋转</td>\n</tr>\n<tr>\n<td>rotateZ(angle)</td>\n<td>定义沿着 Z 轴的 3D 旋转</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>使用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: rotate(30deg);</span><br><span class=\"line\">    -ms-transform: rotate(30deg); /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: rotate(30deg); /* Safari and Chrome */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/rotate.png\" alt=\"rotate\"></p>\n<h3 id=\"2-scale\"><a href=\"#2-scale\" class=\"headerlink\" title=\"(2) scale\"></a>(2) scale</h3><p>scale(x,y)方法让元素可以在x,y轴方向上进行拉伸或缩放。伸缩程度由x，y参数决定。scale的参数如果只有一个，则默认为等比例变化。（例如scale(1.5)代表放大1.5倍）。</p>\n<ul>\n<li>定义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scale(x[,y]?)</td>\n<td>定义 2D 缩放转换</td>\n</tr>\n<tr>\n<td>scale3d(x,y,z)</td>\n<td>定义 3D 缩放转换</td>\n</tr>\n<tr>\n<td>scaleX(x)</td>\n<td>通过设置 X 轴的值来定义缩放转换</td>\n</tr>\n<tr>\n<td>scaleY(y)</td>\n<td>通过设置 Y 轴的值来定义缩放转换</td>\n</tr>\n<tr>\n<td>scaleZ(z)</td>\n<td>通过设置 Z 轴的值来定义 3D 缩放转换</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>使用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: scale(2,3); /* 标准语法 */</span><br><span class=\"line\">    -ms-transform:scale(2,3); /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: scale(2,3); /* Safari */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/scale.png\" alt=\"scale\"></p>\n<h3 id=\"3-translate\"><a href=\"#3-translate\" class=\"headerlink\" title=\"(3) translate\"></a>(3) translate</h3><p>translate(x,y)方法，让元素相对当前位置在x、y方向上偏移给定参数的距离。它是translateX()和translateY()的结合。</p>\n<ul>\n<li>定义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>translate(x,y)</td>\n<td>定义 2D 转换</td>\n</tr>\n<tr>\n<td>translate3d(x,y,z)</td>\n<td>定义 3D 转换</td>\n</tr>\n<tr>\n<td>translateX(x)</td>\n<td>定义转换，只是用 X 轴的值</td>\n</tr>\n<tr>\n<td>translateY(y)</td>\n<td>定义转换，只是用 Y 轴的值</td>\n</tr>\n<tr>\n<td>translateZ(z)</td>\n<td>定义 3D 转换，只是用 Z 轴的值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>使用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: translate(50px,100px);</span><br><span class=\"line\">    -ms-transform: translate(50px,100px); /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: translate(50px,100px); /* Safari and Chrome */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/translate.png\" alt=\"scale\"></p>\n<h3 id=\"Q：tranlateZ-0-为什么可以提高浏览器渲染的性能\"><a href=\"#Q：tranlateZ-0-为什么可以提高浏览器渲染的性能\" class=\"headerlink\" title=\"Q：tranlateZ(0)为什么可以提高浏览器渲染的性能?\"></a>Q：tranlateZ(0)为什么可以提高浏览器渲染的性能?</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里要特别提出<code>tranlateZ(0)</code>,可以利用GPU加速，提高浏览器渲染的性能。为什么<code>translateZ(0)</code>可以提升渲染的性能呢？？这得从浏览器的渲染原理说起。</p>\n<p><big><strong> 浏览器渲染原理 </strong></big><br>在从服务器拿到数据后，浏览器会先解析三类东西：</p>\n<ul>\n<li>解析html,xhtml,svg这三类文档，形成dom树。</li>\n<li>解析css，产生css rule tree。</li>\n<li>解析js，js会通过api来操作dom tree和css rule tree。</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解析完成之后，浏览器引擎会通过dom tree和css rule tree来构建rendering tree：</p>\n<ul>\n<li>rendering tree和dom tree并不完全相同，例如：<head></head>或display:none的东西就不会放在渲染树中</li>\n<li>css rule tree主要是完成匹配，并把css rule附加给rendering tree的每个element</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在渲染树构建完成后，</p>\n<ul>\n<li>浏览器会对这些元素进行定位和布局，这一步也叫做reflow(回流)或者layout</li>\n<li>浏览器绘制这些元素的样式，颜色，背景，大小及边框等，这一步也叫做repaint(重绘)</li>\n<li>然后浏览器会将各层的信息发送给GPU，GPU会将各层合成；显示在屏幕上</li>\n</ul>\n<p>即渲染树构建完成后，浏览器要做的步骤是：<br>reflow —&gt;  repaint —&gt; composite</p>\n<p>reflow和repaint都是耗费浏览器性能的操作,为了仅发生composite，我们做动画的css property必须满足以下三个条件：</p>\n<ol>\n<li>不影响文档流。</li>\n<li>不依赖文档流。</li>\n<li>不会造成重绘。</li>\n</ol>\n<p>满足以上以上条件的css property只有transform和opacity。</p>\n<p>这样做有两个优势:</p>\n<ol>\n<li>动画将会非常流畅</li>\n<li>动画不在绑定到CPU，即使js执行大量的工作；动画依然流畅。</li>\n</ol>\n<p>GPU有2个问题：</p>\n<ol>\n<li>一个或多个没有自己复合层的元素要出现在有复合层元素的上方，它就会拥有自己的复合层；这种情况被称为隐式合成。</li>\n<li>使用GPU动画需要发送多张渲染层的图像给GPU，GPU也需要缓存它们以便于后续动画的使用。</li>\n</ol>\n<p>所以——</p>\n<ul>\n<li><p>保持动画的对象的z-index尽可能的高。理想的，这些元素应该是body元素的直接子元素。当然，这不是总可能的。所以你可以克隆一个元素，把它放在body元素下仅仅是为了做动画。</p>\n</li>\n<li><p>将元素上设置will-change CSS属性，元素上有了这个属性，浏览器会提升这个元素成为一个复合层（不是总是）。这样动画就可以平滑的开始和结束。但是不要滥用这个属性，否则会大大增加内存消耗。</p>\n</li>\n</ul>\n<p><big><strong> tranlateZ(0)为什么可以提高浏览器渲染的性能？</strong></big><br>这个问题是因为使用transform和opacity做CSS动画的时候，会将元素提升为一个复合层；而使用js操作css属性做动画时，必须使用translateZ或will-change才能将元素强行提升至一个复合层。</p>\n<p>元素本身使用transform和opacity做CSS动画的时候，会提前告诉GPU动画如何开始和结束及所需要的指令；所以会创建一个复合层（渲染层），并把页面所有的复合层发送给GPU；作为图像缓存，然后动画的发生仅仅是复合层间相对移动。当元素使用css动画时，在控制台中的layers可以看到，会有两个layer。</p>\n<p>而使用js做动画，js必须在动画的每一帧计算元素的状态；发送给GPU，但不会将元素提升至一个复合层；所以想让元素提升至一个复合层，必须使用translateZ或will-change: transform, opacity。当我们使用js动画时，在控制台，可以看到只有一个layer，添加translateZ(0)的时候，可以看到又有两个layer了。</p>\n<blockquote>\n<p>简而言之，是因为transform不会触发repaint，而是会创建composited layer，<br>GPU会来执行transform的操作，将浏览器的渲染过程交给GPU处理，而不是使用自带的比较慢的渲染器。<br>这样就可以使得动画更加顺畅。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tranform知多少\"><a href=\"#tranform知多少\" class=\"headerlink\" title=\"tranform知多少\"></a>tranform知多少</h2><p>transform是变换，包括旋转rotate、扭曲skew、缩放scale和移动translate，可以改变对象的外形和位置。transform的转换，并不是动态的，而是最终时刻的状态。</p>\n<blockquote>\n<p>transform: rotate | scale | skew | translate | matrix</p>\n</blockquote>\n<p>CSS3中的坐标系如图所示。后续介绍会用上。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/xyz.png\" alt=\"XYZ坐标轴\"></p>\n<h3 id=\"（1）rotate\"><a href=\"#（1）rotate\" class=\"headerlink\" title=\"（1）rotate\"></a>（1）rotate</h3><p>可进行2D或者3D旋转。其中常用的rotate(angle)定义2D旋转，angle定义旋转的角度，正数表示顺时针旋转，负数表示逆时针旋转。</p>\n<ul>\n<li>定义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rotate(angle)</td>\n<td>定义 2D 旋转，在参数中规定角度（正数顺时针、负数逆时针）</td>\n</tr>\n<tr>\n<td>rotate3d(x,y,z,angle)</td>\n<td>定义 3D 旋转</td>\n</tr>\n<tr>\n<td>rotateX(angle)</td>\n<td>定义沿着 X 轴的 3D 旋转</td>\n</tr>\n<tr>\n<td>rotateY(angle)</td>\n<td>定义沿着 Y 轴的 3D 旋转</td>\n</tr>\n<tr>\n<td>rotateZ(angle)</td>\n<td>定义沿着 Z 轴的 3D 旋转</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>使用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: rotate(30deg);</span><br><span class=\"line\">    -ms-transform: rotate(30deg); /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: rotate(30deg); /* Safari and Chrome */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/rotate.png\" alt=\"rotate\"></p>\n<h3 id=\"2-scale\"><a href=\"#2-scale\" class=\"headerlink\" title=\"(2) scale\"></a>(2) scale</h3><p>scale(x,y)方法让元素可以在x,y轴方向上进行拉伸或缩放。伸缩程度由x，y参数决定。scale的参数如果只有一个，则默认为等比例变化。（例如scale(1.5)代表放大1.5倍）。</p>\n<ul>\n<li>定义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scale(x[,y]?)</td>\n<td>定义 2D 缩放转换</td>\n</tr>\n<tr>\n<td>scale3d(x,y,z)</td>\n<td>定义 3D 缩放转换</td>\n</tr>\n<tr>\n<td>scaleX(x)</td>\n<td>通过设置 X 轴的值来定义缩放转换</td>\n</tr>\n<tr>\n<td>scaleY(y)</td>\n<td>通过设置 Y 轴的值来定义缩放转换</td>\n</tr>\n<tr>\n<td>scaleZ(z)</td>\n<td>通过设置 Z 轴的值来定义 3D 缩放转换</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>使用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: scale(2,3); /* 标准语法 */</span><br><span class=\"line\">    -ms-transform:scale(2,3); /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: scale(2,3); /* Safari */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/scale.png\" alt=\"scale\"></p>\n<h3 id=\"3-translate\"><a href=\"#3-translate\" class=\"headerlink\" title=\"(3) translate\"></a>(3) translate</h3><p>translate(x,y)方法，让元素相对当前位置在x、y方向上偏移给定参数的距离。它是translateX()和translateY()的结合。</p>\n<ul>\n<li>定义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>translate(x,y)</td>\n<td>定义 2D 转换</td>\n</tr>\n<tr>\n<td>translate3d(x,y,z)</td>\n<td>定义 3D 转换</td>\n</tr>\n<tr>\n<td>translateX(x)</td>\n<td>定义转换，只是用 X 轴的值</td>\n</tr>\n<tr>\n<td>translateY(y)</td>\n<td>定义转换，只是用 Y 轴的值</td>\n</tr>\n<tr>\n<td>translateZ(z)</td>\n<td>定义 3D 转换，只是用 Z 轴的值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>使用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    transform: translate(50px,100px);</span><br><span class=\"line\">    -ms-transform: translate(50px,100px); /* IE 9 */</span><br><span class=\"line\">    -webkit-transform: translate(50px,100px); /* Safari and Chrome */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/translate.png\" alt=\"scale\"></p>\n<h3 id=\"Q：tranlateZ-0-为什么可以提高浏览器渲染的性能\"><a href=\"#Q：tranlateZ-0-为什么可以提高浏览器渲染的性能\" class=\"headerlink\" title=\"Q：tranlateZ(0)为什么可以提高浏览器渲染的性能?\"></a>Q：tranlateZ(0)为什么可以提高浏览器渲染的性能?</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里要特别提出<code>tranlateZ(0)</code>,可以利用GPU加速，提高浏览器渲染的性能。为什么<code>translateZ(0)</code>可以提升渲染的性能呢？？这得从浏览器的渲染原理说起。</p>\n<p><big><strong> 浏览器渲染原理 </strong></big><br>在从服务器拿到数据后，浏览器会先解析三类东西：</p>\n<ul>\n<li>解析html,xhtml,svg这三类文档，形成dom树。</li>\n<li>解析css，产生css rule tree。</li>\n<li>解析js，js会通过api来操作dom tree和css rule tree。</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解析完成之后，浏览器引擎会通过dom tree和css rule tree来构建rendering tree：</p>\n<ul>\n<li>rendering tree和dom tree并不完全相同，例如：<head></head>或display:none的东西就不会放在渲染树中</li>\n<li>css rule tree主要是完成匹配，并把css rule附加给rendering tree的每个element</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在渲染树构建完成后，</p>\n<ul>\n<li>浏览器会对这些元素进行定位和布局，这一步也叫做reflow(回流)或者layout</li>\n<li>浏览器绘制这些元素的样式，颜色，背景，大小及边框等，这一步也叫做repaint(重绘)</li>\n<li>然后浏览器会将各层的信息发送给GPU，GPU会将各层合成；显示在屏幕上</li>\n</ul>\n<p>即渲染树构建完成后，浏览器要做的步骤是：<br>reflow —&gt;  repaint —&gt; composite</p>\n<p>reflow和repaint都是耗费浏览器性能的操作,为了仅发生composite，我们做动画的css property必须满足以下三个条件：</p>\n<ol>\n<li>不影响文档流。</li>\n<li>不依赖文档流。</li>\n<li>不会造成重绘。</li>\n</ol>\n<p>满足以上以上条件的css property只有transform和opacity。</p>\n<p>这样做有两个优势:</p>\n<ol>\n<li>动画将会非常流畅</li>\n<li>动画不在绑定到CPU，即使js执行大量的工作；动画依然流畅。</li>\n</ol>\n<p>GPU有2个问题：</p>\n<ol>\n<li>一个或多个没有自己复合层的元素要出现在有复合层元素的上方，它就会拥有自己的复合层；这种情况被称为隐式合成。</li>\n<li>使用GPU动画需要发送多张渲染层的图像给GPU，GPU也需要缓存它们以便于后续动画的使用。</li>\n</ol>\n<p>所以——</p>\n<ul>\n<li><p>保持动画的对象的z-index尽可能的高。理想的，这些元素应该是body元素的直接子元素。当然，这不是总可能的。所以你可以克隆一个元素，把它放在body元素下仅仅是为了做动画。</p>\n</li>\n<li><p>将元素上设置will-change CSS属性，元素上有了这个属性，浏览器会提升这个元素成为一个复合层（不是总是）。这样动画就可以平滑的开始和结束。但是不要滥用这个属性，否则会大大增加内存消耗。</p>\n</li>\n</ul>\n<p><big><strong> tranlateZ(0)为什么可以提高浏览器渲染的性能？</strong></big><br>这个问题是因为使用transform和opacity做CSS动画的时候，会将元素提升为一个复合层；而使用js操作css属性做动画时，必须使用translateZ或will-change才能将元素强行提升至一个复合层。</p>\n<p>元素本身使用transform和opacity做CSS动画的时候，会提前告诉GPU动画如何开始和结束及所需要的指令；所以会创建一个复合层（渲染层），并把页面所有的复合层发送给GPU；作为图像缓存，然后动画的发生仅仅是复合层间相对移动。当元素使用css动画时，在控制台中的layers可以看到，会有两个layer。</p>\n<p>而使用js做动画，js必须在动画的每一帧计算元素的状态；发送给GPU，但不会将元素提升至一个复合层；所以想让元素提升至一个复合层，必须使用translateZ或will-change: transform, opacity。当我们使用js动画时，在控制台，可以看到只有一个layer，添加translateZ(0)的时候，可以看到又有两个layer了。</p>\n<blockquote>\n<p>简而言之，是因为transform不会触发repaint，而是会创建composited layer，<br>GPU会来执行transform的操作，将浏览器的渲染过程交给GPU处理，而不是使用自带的比较慢的渲染器。<br>这样就可以使得动画更加顺畅。</p>\n</blockquote>\n"},{"title":"雅虎35条军规——前端性能优化","_content":"\n本文主要考虑客户端性能、服务器端和网络性能，内容框架来自[Yahoo Developer Network](https://developer.yahoo.com/performance/rules.html?guccounter=1)，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。\n\n![前端性能优化](http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png)\n\n前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。\n\n>\n* 来自Google的数据表明，一个有10条数据0.4秒能加载完的页面，变成30条数据0.9秒加载完之后，流量和广告收入下降90%。\n* Google Map 首页文件大小从100KB减小到70-80KB后，流量在第一周涨了10%，接下来的三周涨了25%。\n* 亚马逊的数据表明：加载时间增加100毫秒，销量就下降1%。\n\n以上数据更说明「加载时间就是金钱」，前端优化主要围绕提高加载速度进行。\n\n# 一、页面内容\n## （1）减少HTTP请求数\nWeb 前端 80% 的响应时间花在图片、样式、脚本等资源下载上。最直接的方式是减少页面所需资源，但并不现实。所以，减少HTTP请求数主要的途径是：\n\n> 合并JS/CSS文件。服务器端（CDN）自动合并，基于Node.js的文件合并工具，通过把所有脚本放在一个文件中的方式来减少请求数。\n\n> 使用**CSS Sprite**将背景图片合并成一个文件，通过`background-image` 和 `background-position` 控制显示\n\n> **行内图片**（Base64编码）。使用Data URI scheme将图片嵌入HTML或者CSS中；或者将CSS、JS、图片直接嵌入HTML中，会增加文件大小，也可能产生浏览器兼容及其他性能问题。\n\n减少页面的HTTP请求数是个起点，这是提升站点首次访问速度的重要指导原则。\n\n## （2）减少DNS查询\n用户输入URL以后，浏览器首先要查询域名（hostname）对应服务器的IP地址，一般需要耗费20-120毫秒时间。DNS查询完成之前，浏览器无法从服务器下载任何数据。\n\n基于性能考虑，ISP、局域网、操作系统、浏览器都会有相应的DNS缓存机制。\n\n* IE缓存30分钟，可以通过注册表中DnsCacheTimeout项设置；\n* Firefox缓存1分钟，通过network.dnsCacheExpiration配置；\n\n另外减少不同的主机名可减少DNS查找，减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免DNS查找削减了响应时间，而减少并行下载数量却增加了响应时间。原则是把组件分散在2到4个主机名下，这是同时减少DNS查找和允许高并发下载的折中方案。\n\n## （3）避免重定向\nHTTP重定向通过`301/302`状态码实现。下面是一个有301状态码的HTTP头\n\n```\n HTTP/1.1 301 Moved Permanently \n Location: http://example.com/newuri\n Content-Type: text/html\n```\n浏览器会自动跳转到Location域指明的URL。重定向需要的所有信息都在HTTP头部，而响应体一般是空的。其实额外的HTTP头，比如Expires和Cache-Control也表示重定向。除此之外还有别的跳转方式：refresh元标签和JavaScript，但如果你必须得做重定向，最好用标准的3xxHTTP状态码，主要是为了让返回按钮能正常使用。\n\n客户端收到服务器的重定向响应后，会根据响应头中Location的地址再次发送请求。重定向会影响用户体验，尤其是多次重定向时，用户在一段时间内看不到任何内容，只看到浏览器进度条一直在刷新。\n\n* 最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加`/ `但未添加。比如，访问`http://astrology.yahoo.com/astrology`将被`301`重定向到 `http://astrology.yahoo.com/astrology/`（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。\n* 网站域名变更：CNAME结合Alias或mod_rewrite或者其他服务器类似功能实现跳转。\n\n## （4）缓存Ajax请求\n最重要的的优化方式是缓存响应结果。有尚未过期的Expires或者Cache-Control HTTP头，那么之前的资源就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的资源响应，还是去请求一个新的。可以通过给资源的Ajax URL里添加一个表明用户资源最后修改时间的时间戳来实现。如果资源从上一次下载之后再没有被修改过，时间戳不变，资源就将从浏览器缓存中直接读出，从而避免一次额外的HTTP往返消耗。详见`服务器-添加Expires或Cache响应头`。\n\n## （5）延迟加载\n页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：\n\n* 非首屏使用的数据、样式、脚本、图片等；\n* 用户交互时才会显示的内容。\n\n遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。\n\n> 将首屏以外的HTML放在不渲染的元素中，如隐藏的`<textarea>`，或者type属性为非执行脚本的`<script>`标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。\n\n## （6）预加载\n预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。\n\n* 无条件预先加载：页面加载完成（load）后，马上获取其他资源。以 google.com 为例，首页加载完成后会立即下载一个 Sprite 图片，此图首页不需要，但是搜索结果页要用到。\n* 有条件预先加载：根据用户行为预判用户去向，预载相关资源。比如search.yahoo.com开始输入时会有额外的资源加载。Chrome 等浏览器的地址栏也有类似的机制。\n* 有「阴谋」的预先加载：页面即将上线新版前预先加载新版内容。网站改版后由于缓存、使用习惯等原因，会有旧版的网站更快更流畅的反馈。为缓解这一问题，在新版上线之前，旧版可以利用空闲提前加载一些新版的资源缓存到客户端，以便新版正式上线后更快的载入。\n\n## （7）减少DOM元素数量\n复杂的页面不仅下载的字节更多，JavaScript DOM操作也更慢。例如，同是添加一个事件处理器，500个元素和5000个元素的页面速度上会有很大区别。\n\n从以下几个角度考虑移除不必要的标记：\n\n* 是否还在使用表格布局？\n* 塞进去更多的`<div>`仅为了处理布局问题？也许有更好、更语义化的标记。\n* 能通过伪元素实现的功能，就没必要添加额外元素，如清除浮动。\n\n浏览器控制台中输入以下代码可以计算出页面中有多少 DOM 元素：\n> document.getElementsByTagName('*').length;\n\n为什么不使用表格布局？\n\n* 更多的标签，增加文件大小；\n* 不易维护，无法适应响应式设计；\n* 性能考量，默认的表格布局算法会产生大量重绘\n\n\n## （8）划分内容到不同域名\n浏览器一般会限制每个域的并行线程（一般为6个，甚至更少），使用不同的域名可以最大化下载线程，但注意保持在2-4个域名内，以避免DNS查询损耗。\n\n例如，动态内容放在`csspod.com`上，静态资源放在`static.csspod.com`上。这样还可以禁用静态资源域下的Cookie，减少数据传输，详见`Cookie 优化`。\n\n## （9）尽量减少iframe的使用\n用iframe可以把一个HTML文档插入到父文档里，重要的是明白iframe是如何工作的并高效地使用它。\n\n`<iframe>`的优点：\n\n* 可以用来加载速度较慢的第三方资源，如广告、徽章；\n* 可用作安全沙箱；\n* 可以并行下载脚本。\n\n`<iframe>`的缺点：\n\n* 加载代价昂贵，即使是空的页面；\n* 阻塞页面 load 事件触发；\n> Iframe 完全加载以后，父页面才会触发 load 事件。 Safari、Chrome 中通过 JavaScript 动态设置 iframe src 可以避免这个问题。\n\n* 缺乏语义。\n\n## （10）避免404错误\nHTTP请求很昂贵，返回无效的响应（如404未找到）完全没必要，降低用户体验而且毫无益处。\n一些网站设计很酷炫、有提示信息的404页面，有助于提高用户体验，但还是浪费服务器资源。尤其糟糕的是外部脚本返回404，不仅阻塞其他资源下载，浏览器还会尝试把404页面内容当作JavaScript解析，消耗更多资源。\n\n\n# 二、服务器\n## （1）使用CDN\n用户与服务器的物理距离对响应时间也有影响。把内容部署在多个地理位置分散的服务器上能让用户更快地载入页面。但具体要怎么做呢？\n\n网站80-90%响应时间消耗在资源下载上，减少资源下载时间是性能优化的黄金法则。相比分布式架构的复杂和巨大投入，静态内容分发网络（CDN）可以以较低的投入，获得加载速度有效提升。\n\n内容分发网络（CDN）是一组分散在不同地理位置的web服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。\n\n## （2）添加Expires或Cache-Control响应头\n* 静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；\n* 动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。\n\n> Cache-Control头在HTTP/1.1规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires、Pragma）。当前的所有浏览器都支持Cache-Control，因此，使用它就够了。\n\n## （3）启用Gzip\n    \n前端工程师可以想办法明显地缩短通过网络传输HTTP请求和响应的时间。毫无疑问，终端用户的带宽速度，网络服务商，对等交换点的距离等等，都是开发团队所无法控制的。但还有别的能够影响响应时间的因素，压缩可以通过减少HTTP响应的大小来缩短响应时间。\n\nGzip压缩通常可以减少70%的响应大小，对某些文件更可能高达90%，比Deflate更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持gzip解码。所以，应该对HTML、CSS、JS、XML、JSON等文本类型的内容启用压缩。\n\n> **注意!!!** 图片和 PDF 文件不要使用 gzip。它们本身已经压缩过，再使用 gzip 压缩不仅浪费 CPU 资源，而且还可能增加文件体积。\n\n从HTTP/1.1开始，**web客户端**就有了支持压缩的Accept-Encoding HTTP请求头。\n> Accept-Encoding: gzip, deflate\n\n如果web服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。**web服务器**通过Content-Encoding响应头来通知客户端。\n> Content-Encoding: gzip\n\n\n## （4）配置 Etag\n实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加ETags可以提供一种实体验证机制，比最后修改日期更加灵活。一个ETag是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的ETag来指定组件的ETag。\n\n\n\n```\nHTTP/1.1 200 OK\n      Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT\n      ETag: \"10c24bc-4ab-457e1c1f\"\n      Content-Length: 12195\n```\n\n然后，如果浏览器必须验证一个组件，它用If-None-Match请求头来把ETag传回源服务器。如果ETags匹配成功，会返回一个304状态码，这样就减少了12195个字节的响应体。Etag 通过文件版本标识，方便服务器判断请求的内容是否有更新，如果没有就响应 304，避免重新下载。\n\n```\nGET /i/yahoo.gif HTTP/1.1\n      Host: us.yimg.com\n      If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT\n      If-None-Match: \"10c24bc-4ab-457e1c1f\"\n      HTTP/1.1 304 Not Modified\n```\n\n\n## （5）尽早输出（flush）缓冲\n用户请求页面时，服务器通常需要花费200 ~ 500毫秒来组合 HTML 页面。在此期间，浏览器处于空闲、等待数据状态。使用PHP中的flush()函数，可以发送部分已经准备好的 HTML到浏览器，以便服务器还在忙于处理剩余页面时，浏览器可以提前开始获取资源。\n\n可以考虑在`</head>`之后输出一次缓冲，HTML head一般比较容易生成，先发送以便浏览器开始获取`<head>`里引用的CSS等资源。\n\nExample:\n\n```\n<!-- css, js -->\n</head>\n<?php flush(); ?>\n<body>\n<!-- content -->\n```\n\n## （6）Ajax请求使用GET方法\n浏览器执行XMLHttpRequest POST请求时分成两步，先发送Http Header，再发送data。而GET只使用一个TCP数据包（Http Header与data）发送数据，所以首选GET方法。\n\n根据HTTP规范，GET用于获取数据，POST则用于向服务器发送数据，所以Ajax请求数据时使用GET更符合规范。\n\n## （7）避免图片src为空\n图片src属性值为空字符串可能以下面两种形式出现：\n\nHTML:\n```\n<img src=\"\" />\n```\n\nJavaScript：\n\n```\nvar img = new Image(); \nimg.src = \"\";\n```\n\n虽然src属性为空字符串，但浏览器仍然会向服务器发起一个HTTP请求：\n\n* IE 向页面所在的目录发送请求；\n* Safari、Chrome、Firefox向页面本身发送请求；\n* Opera不执行任何操作。\n\n空src产生请求的后果不容小觑：\n\n* 给服务器造成意外的流量负担，尤其时日 PV 较大时；\n* 浪费服务器计算资源；\n* 可能产生报错。\n\n> 空的href属性也存在类似问题。用户点击空链接时，浏览器也会向服务器发送HTTP请求，可以通过JavaScript阻止空链接的默认的行为。\n\n# 三、Cookie\n## （1）减少 Cookie 大小\nCookie被用于身份认证、个性化设置等诸多用途。Cookie通过HTTP头在服务器和浏览器间来回传送，减少Cookie大小可以降低其对响应速度的影响。\n\n* 去除不必要的 Cookie；\n* 尽量压缩 Cookie 大小；\n* 注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；\n* 设置合适的过期时间。\n\n## （2）静态资源使用无Cookie域名\n静态资源一般无需使用Cookie，可以把它们放在使用二级域名或者专门域名的无Cookie服务器上，降低Cookie传送的造成的流量浪费，提高响应速度。\n\n# 四、CSS\n## （1）把样式表放在`<head>`中\n把样式表放在`<head>`中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。\n\n这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。\n\n如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。\n\n## （2）不要使用CSS表达式\nCSS表达式可以在CSS里执行JavaScript，仅IE5-IE7支持，IE8标准模式已经废弃。\nCSS表达式超出预期的频繁执行，页面滚动、鼠标移动时都会不断执行，带来很大的性能损耗。\n\n## （3）使用`<link>`替代`@import`\n对于IE某些版本，@import的行为和<link>放在页面底部一样。所以，不要用它。\n\n## （4）不要使用 filter\nAlphaImageLoader为IE5.5-IE8专有的技术，和CSS表达式一样，放进博物馆吧。IE专有的AlphaImageLoader滤镜可以用来修复IE7之前的版本中半透明PNG图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。\n\n> 注意！！！这里所说的不是 CSS3 Filter\n\n\n# 五、Javasript\n## （1）把脚本放在页面底部\n浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源。因此，最好将脚本放在底部，以提高页面加载速度。\n\n一些特殊场景无法将脚本放到页面底部的，可以考虑`<script>`的以下属性：\n\n* defer 属性；\n* HTML5 新增的async属性。\n\n## （2）使用外部JavaScript和CSS\n外部JavaScript和CSS文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。\n\n当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。\n\n## （3）压缩JavaScript和CSS\n压缩代码可以移除非功能性的字符（注释、空格、空行等），减少文件大小，提高载入速度。\n\n> 得益于Node.js的流行，开源社区涌现出许多高效、易用的前端优化工具，JavaScript 和CSS压缩类的，不敢说多如牛毛，多入鸡毛倒是一点不夸张，如[UglifyJS 2] (https://github.com/mishoo/UglifyJS2)、csso、cssnano 等。\n\n> 对于内嵌的CSS和JavaScript，也可以通过htmlmin等工具压缩。\n\n> 这些项目都有Gulp、Webpack等流行构建工具的配套版本。\n\n## （4）移除重复脚本\n重复的脚本不仅产生不必要的HTTP请求，而且重复解析执行浪费时间和计算资源。\n\n## （5）减少DOM操作\nJavaScript 操作 DOM 很慢，尤其是 DOM 节点很多时。\n\n使用时应该注意：\n\n* 缓存已经访问过的元素；\n* 使用DocumentFragment暂存DOM，整理好以后再插入DOM树；\n* 操作className，而不是多次读写style；\n* 避免使用JavaScript修复布局。\n\n## （6）使用高效的事件处理\n* 减少绑定事件监听的节点，如通过事件委托；\n* 尽早处理事件，在DOMContentLoaded即可进行，不用等到load以后。\n\n# 六、图片\n## （1）优化图片\n尝试把GIF格式转换成PNG格式，看看是否节省空间。在所有的PNG图片上运行pngcrush（或者其它PNG优化工具）。\n\n> YDN[列出的相关工具](https://developer.yahoo.com/performance/rules.html#opt_images)缺乏易用性，建议参考以下工具\n\n\n* [imagemin](https://github.com/imagemin/imagemin)\n* [imageoptim.com](https://imageoptim.com/mac)\n\n> TODO:\n* PNG 终极优化；\n* Webp 相关内容；\n* SVG 相关内容。\n\n\nPNG终极优化\n\n* [Most Effective Method to Reduce and Optimize PNG Images](https://www.queness.com/post/2507/most-effective-method-to-reduce-and-optimize-png-images)\n* [Clever PNG Optimization Techniques](https://www.smashingmagazine.com/2009/07/clever-png-optimization-techniques/)\n\n\n## （2）优化CSS Sprite\n* 水平排列Sprite中的图片，垂直排列会增加图片大小；\n* Spirite中把颜色较近的组合在一起可以降低颜色数，理想状况是低于256色以适用PNG8格式；\n* 不要在Spirite的图像中间留有较大空隙。减少空隙虽然不太影响文件大小，但可以降低用户代理把图片解压为像素图的内存消耗，对移动设备更友好。\n\n## （3）不要在HTML中缩放图片\n不要使用`<img>`的width、height缩放图片，如果用到小图片，就使用相应大小的图片。如果需要\n\n`<img width=\"100\" height=\"100\" src=\"mycat.jpg\" alt=\"My Cat\" />`\n\n那么图片本身（mycat.jpg）应该是100x100px的，而不是去缩小500x500px的图片。\n\n> 很多 CMS 和 CDN 都提供图片裁切功能。\n\n**补充**：设置图片的宽和高，以免浏览器按照「猜」的宽高给图片保留的区域和实际宽高差异，产生重绘。\n\n## （4）使用体积小、可缓存的favicon.ico\nFavicon.ico一般存放在网站根目录下，无论是否在页面中设置，浏览器都会尝试请求这个文件。\n\n所以确保这个图标：\n\n* 存在（避免 404）；\n* 尽量小，最好小于 1K；\n* 设置较长的过期时间。\n\n> 对于较新的浏览器，可以使用PNG格式的favicon。\n\n# 七、移动端\n## （1）保证所有组件都小于25K\n这个限制是因为iPhone不能缓存大于25K的组件，注意这里指的是未压缩的大小。这就是为什么缩减内容本身也很重要，因为单纯的gzip可能不够。\n\n[保证所有组件都小于25K](https://developer.yahoo.com/performance/rules.html#under25)\n\n## （2）打包内容为分段（multipart）文档\n把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个HTTP请求获取多个组件（记住一点：HTTP请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone就不支持）。\n\n\n# 总结\n写到这里，雅虎的35条军规算是介绍完了。条目虽然很多，但经过分类，可以发现，性能优化主要切入点可以从以下几个方面去考虑：\n\n* 资源本身大小的压缩优化（想办法减少资源的体积）\n* 网络请求的全过程（从url地址栏输入发送请求开始到返回响应包的每个环节）\n* 浏览器渲染的全过程（拿到资源后浏览器渲染的每个环节）\n\n因此，要彻底掌握优化的方法，必须对http请求的全过程以及浏览器的渲染全过程都有深入的理解。\n\n![前端性能优化](http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png)\n","source":"_posts/雅虎35条军规——前端性能优化.md","raw":"---\ntitle: 雅虎35条军规——前端性能优化\ncategories: 性能优化\n---\n\n本文主要考虑客户端性能、服务器端和网络性能，内容框架来自[Yahoo Developer Network](https://developer.yahoo.com/performance/rules.html?guccounter=1)，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。\n\n![前端性能优化](http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png)\n\n前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。\n\n>\n* 来自Google的数据表明，一个有10条数据0.4秒能加载完的页面，变成30条数据0.9秒加载完之后，流量和广告收入下降90%。\n* Google Map 首页文件大小从100KB减小到70-80KB后，流量在第一周涨了10%，接下来的三周涨了25%。\n* 亚马逊的数据表明：加载时间增加100毫秒，销量就下降1%。\n\n以上数据更说明「加载时间就是金钱」，前端优化主要围绕提高加载速度进行。\n\n# 一、页面内容\n## （1）减少HTTP请求数\nWeb 前端 80% 的响应时间花在图片、样式、脚本等资源下载上。最直接的方式是减少页面所需资源，但并不现实。所以，减少HTTP请求数主要的途径是：\n\n> 合并JS/CSS文件。服务器端（CDN）自动合并，基于Node.js的文件合并工具，通过把所有脚本放在一个文件中的方式来减少请求数。\n\n> 使用**CSS Sprite**将背景图片合并成一个文件，通过`background-image` 和 `background-position` 控制显示\n\n> **行内图片**（Base64编码）。使用Data URI scheme将图片嵌入HTML或者CSS中；或者将CSS、JS、图片直接嵌入HTML中，会增加文件大小，也可能产生浏览器兼容及其他性能问题。\n\n减少页面的HTTP请求数是个起点，这是提升站点首次访问速度的重要指导原则。\n\n## （2）减少DNS查询\n用户输入URL以后，浏览器首先要查询域名（hostname）对应服务器的IP地址，一般需要耗费20-120毫秒时间。DNS查询完成之前，浏览器无法从服务器下载任何数据。\n\n基于性能考虑，ISP、局域网、操作系统、浏览器都会有相应的DNS缓存机制。\n\n* IE缓存30分钟，可以通过注册表中DnsCacheTimeout项设置；\n* Firefox缓存1分钟，通过network.dnsCacheExpiration配置；\n\n另外减少不同的主机名可减少DNS查找，减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免DNS查找削减了响应时间，而减少并行下载数量却增加了响应时间。原则是把组件分散在2到4个主机名下，这是同时减少DNS查找和允许高并发下载的折中方案。\n\n## （3）避免重定向\nHTTP重定向通过`301/302`状态码实现。下面是一个有301状态码的HTTP头\n\n```\n HTTP/1.1 301 Moved Permanently \n Location: http://example.com/newuri\n Content-Type: text/html\n```\n浏览器会自动跳转到Location域指明的URL。重定向需要的所有信息都在HTTP头部，而响应体一般是空的。其实额外的HTTP头，比如Expires和Cache-Control也表示重定向。除此之外还有别的跳转方式：refresh元标签和JavaScript，但如果你必须得做重定向，最好用标准的3xxHTTP状态码，主要是为了让返回按钮能正常使用。\n\n客户端收到服务器的重定向响应后，会根据响应头中Location的地址再次发送请求。重定向会影响用户体验，尤其是多次重定向时，用户在一段时间内看不到任何内容，只看到浏览器进度条一直在刷新。\n\n* 最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加`/ `但未添加。比如，访问`http://astrology.yahoo.com/astrology`将被`301`重定向到 `http://astrology.yahoo.com/astrology/`（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。\n* 网站域名变更：CNAME结合Alias或mod_rewrite或者其他服务器类似功能实现跳转。\n\n## （4）缓存Ajax请求\n最重要的的优化方式是缓存响应结果。有尚未过期的Expires或者Cache-Control HTTP头，那么之前的资源就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的资源响应，还是去请求一个新的。可以通过给资源的Ajax URL里添加一个表明用户资源最后修改时间的时间戳来实现。如果资源从上一次下载之后再没有被修改过，时间戳不变，资源就将从浏览器缓存中直接读出，从而避免一次额外的HTTP往返消耗。详见`服务器-添加Expires或Cache响应头`。\n\n## （5）延迟加载\n页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：\n\n* 非首屏使用的数据、样式、脚本、图片等；\n* 用户交互时才会显示的内容。\n\n遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。\n\n> 将首屏以外的HTML放在不渲染的元素中，如隐藏的`<textarea>`，或者type属性为非执行脚本的`<script>`标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。\n\n## （6）预加载\n预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。\n\n* 无条件预先加载：页面加载完成（load）后，马上获取其他资源。以 google.com 为例，首页加载完成后会立即下载一个 Sprite 图片，此图首页不需要，但是搜索结果页要用到。\n* 有条件预先加载：根据用户行为预判用户去向，预载相关资源。比如search.yahoo.com开始输入时会有额外的资源加载。Chrome 等浏览器的地址栏也有类似的机制。\n* 有「阴谋」的预先加载：页面即将上线新版前预先加载新版内容。网站改版后由于缓存、使用习惯等原因，会有旧版的网站更快更流畅的反馈。为缓解这一问题，在新版上线之前，旧版可以利用空闲提前加载一些新版的资源缓存到客户端，以便新版正式上线后更快的载入。\n\n## （7）减少DOM元素数量\n复杂的页面不仅下载的字节更多，JavaScript DOM操作也更慢。例如，同是添加一个事件处理器，500个元素和5000个元素的页面速度上会有很大区别。\n\n从以下几个角度考虑移除不必要的标记：\n\n* 是否还在使用表格布局？\n* 塞进去更多的`<div>`仅为了处理布局问题？也许有更好、更语义化的标记。\n* 能通过伪元素实现的功能，就没必要添加额外元素，如清除浮动。\n\n浏览器控制台中输入以下代码可以计算出页面中有多少 DOM 元素：\n> document.getElementsByTagName('*').length;\n\n为什么不使用表格布局？\n\n* 更多的标签，增加文件大小；\n* 不易维护，无法适应响应式设计；\n* 性能考量，默认的表格布局算法会产生大量重绘\n\n\n## （8）划分内容到不同域名\n浏览器一般会限制每个域的并行线程（一般为6个，甚至更少），使用不同的域名可以最大化下载线程，但注意保持在2-4个域名内，以避免DNS查询损耗。\n\n例如，动态内容放在`csspod.com`上，静态资源放在`static.csspod.com`上。这样还可以禁用静态资源域下的Cookie，减少数据传输，详见`Cookie 优化`。\n\n## （9）尽量减少iframe的使用\n用iframe可以把一个HTML文档插入到父文档里，重要的是明白iframe是如何工作的并高效地使用它。\n\n`<iframe>`的优点：\n\n* 可以用来加载速度较慢的第三方资源，如广告、徽章；\n* 可用作安全沙箱；\n* 可以并行下载脚本。\n\n`<iframe>`的缺点：\n\n* 加载代价昂贵，即使是空的页面；\n* 阻塞页面 load 事件触发；\n> Iframe 完全加载以后，父页面才会触发 load 事件。 Safari、Chrome 中通过 JavaScript 动态设置 iframe src 可以避免这个问题。\n\n* 缺乏语义。\n\n## （10）避免404错误\nHTTP请求很昂贵，返回无效的响应（如404未找到）完全没必要，降低用户体验而且毫无益处。\n一些网站设计很酷炫、有提示信息的404页面，有助于提高用户体验，但还是浪费服务器资源。尤其糟糕的是外部脚本返回404，不仅阻塞其他资源下载，浏览器还会尝试把404页面内容当作JavaScript解析，消耗更多资源。\n\n\n# 二、服务器\n## （1）使用CDN\n用户与服务器的物理距离对响应时间也有影响。把内容部署在多个地理位置分散的服务器上能让用户更快地载入页面。但具体要怎么做呢？\n\n网站80-90%响应时间消耗在资源下载上，减少资源下载时间是性能优化的黄金法则。相比分布式架构的复杂和巨大投入，静态内容分发网络（CDN）可以以较低的投入，获得加载速度有效提升。\n\n内容分发网络（CDN）是一组分散在不同地理位置的web服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。\n\n## （2）添加Expires或Cache-Control响应头\n* 静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；\n* 动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。\n\n> Cache-Control头在HTTP/1.1规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires、Pragma）。当前的所有浏览器都支持Cache-Control，因此，使用它就够了。\n\n## （3）启用Gzip\n    \n前端工程师可以想办法明显地缩短通过网络传输HTTP请求和响应的时间。毫无疑问，终端用户的带宽速度，网络服务商，对等交换点的距离等等，都是开发团队所无法控制的。但还有别的能够影响响应时间的因素，压缩可以通过减少HTTP响应的大小来缩短响应时间。\n\nGzip压缩通常可以减少70%的响应大小，对某些文件更可能高达90%，比Deflate更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持gzip解码。所以，应该对HTML、CSS、JS、XML、JSON等文本类型的内容启用压缩。\n\n> **注意!!!** 图片和 PDF 文件不要使用 gzip。它们本身已经压缩过，再使用 gzip 压缩不仅浪费 CPU 资源，而且还可能增加文件体积。\n\n从HTTP/1.1开始，**web客户端**就有了支持压缩的Accept-Encoding HTTP请求头。\n> Accept-Encoding: gzip, deflate\n\n如果web服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。**web服务器**通过Content-Encoding响应头来通知客户端。\n> Content-Encoding: gzip\n\n\n## （4）配置 Etag\n实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加ETags可以提供一种实体验证机制，比最后修改日期更加灵活。一个ETag是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的ETag来指定组件的ETag。\n\n\n\n```\nHTTP/1.1 200 OK\n      Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT\n      ETag: \"10c24bc-4ab-457e1c1f\"\n      Content-Length: 12195\n```\n\n然后，如果浏览器必须验证一个组件，它用If-None-Match请求头来把ETag传回源服务器。如果ETags匹配成功，会返回一个304状态码，这样就减少了12195个字节的响应体。Etag 通过文件版本标识，方便服务器判断请求的内容是否有更新，如果没有就响应 304，避免重新下载。\n\n```\nGET /i/yahoo.gif HTTP/1.1\n      Host: us.yimg.com\n      If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT\n      If-None-Match: \"10c24bc-4ab-457e1c1f\"\n      HTTP/1.1 304 Not Modified\n```\n\n\n## （5）尽早输出（flush）缓冲\n用户请求页面时，服务器通常需要花费200 ~ 500毫秒来组合 HTML 页面。在此期间，浏览器处于空闲、等待数据状态。使用PHP中的flush()函数，可以发送部分已经准备好的 HTML到浏览器，以便服务器还在忙于处理剩余页面时，浏览器可以提前开始获取资源。\n\n可以考虑在`</head>`之后输出一次缓冲，HTML head一般比较容易生成，先发送以便浏览器开始获取`<head>`里引用的CSS等资源。\n\nExample:\n\n```\n<!-- css, js -->\n</head>\n<?php flush(); ?>\n<body>\n<!-- content -->\n```\n\n## （6）Ajax请求使用GET方法\n浏览器执行XMLHttpRequest POST请求时分成两步，先发送Http Header，再发送data。而GET只使用一个TCP数据包（Http Header与data）发送数据，所以首选GET方法。\n\n根据HTTP规范，GET用于获取数据，POST则用于向服务器发送数据，所以Ajax请求数据时使用GET更符合规范。\n\n## （7）避免图片src为空\n图片src属性值为空字符串可能以下面两种形式出现：\n\nHTML:\n```\n<img src=\"\" />\n```\n\nJavaScript：\n\n```\nvar img = new Image(); \nimg.src = \"\";\n```\n\n虽然src属性为空字符串，但浏览器仍然会向服务器发起一个HTTP请求：\n\n* IE 向页面所在的目录发送请求；\n* Safari、Chrome、Firefox向页面本身发送请求；\n* Opera不执行任何操作。\n\n空src产生请求的后果不容小觑：\n\n* 给服务器造成意外的流量负担，尤其时日 PV 较大时；\n* 浪费服务器计算资源；\n* 可能产生报错。\n\n> 空的href属性也存在类似问题。用户点击空链接时，浏览器也会向服务器发送HTTP请求，可以通过JavaScript阻止空链接的默认的行为。\n\n# 三、Cookie\n## （1）减少 Cookie 大小\nCookie被用于身份认证、个性化设置等诸多用途。Cookie通过HTTP头在服务器和浏览器间来回传送，减少Cookie大小可以降低其对响应速度的影响。\n\n* 去除不必要的 Cookie；\n* 尽量压缩 Cookie 大小；\n* 注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；\n* 设置合适的过期时间。\n\n## （2）静态资源使用无Cookie域名\n静态资源一般无需使用Cookie，可以把它们放在使用二级域名或者专门域名的无Cookie服务器上，降低Cookie传送的造成的流量浪费，提高响应速度。\n\n# 四、CSS\n## （1）把样式表放在`<head>`中\n把样式表放在`<head>`中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。\n\n这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。\n\n如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。\n\n## （2）不要使用CSS表达式\nCSS表达式可以在CSS里执行JavaScript，仅IE5-IE7支持，IE8标准模式已经废弃。\nCSS表达式超出预期的频繁执行，页面滚动、鼠标移动时都会不断执行，带来很大的性能损耗。\n\n## （3）使用`<link>`替代`@import`\n对于IE某些版本，@import的行为和<link>放在页面底部一样。所以，不要用它。\n\n## （4）不要使用 filter\nAlphaImageLoader为IE5.5-IE8专有的技术，和CSS表达式一样，放进博物馆吧。IE专有的AlphaImageLoader滤镜可以用来修复IE7之前的版本中半透明PNG图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。\n\n> 注意！！！这里所说的不是 CSS3 Filter\n\n\n# 五、Javasript\n## （1）把脚本放在页面底部\n浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源。因此，最好将脚本放在底部，以提高页面加载速度。\n\n一些特殊场景无法将脚本放到页面底部的，可以考虑`<script>`的以下属性：\n\n* defer 属性；\n* HTML5 新增的async属性。\n\n## （2）使用外部JavaScript和CSS\n外部JavaScript和CSS文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。\n\n当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。\n\n## （3）压缩JavaScript和CSS\n压缩代码可以移除非功能性的字符（注释、空格、空行等），减少文件大小，提高载入速度。\n\n> 得益于Node.js的流行，开源社区涌现出许多高效、易用的前端优化工具，JavaScript 和CSS压缩类的，不敢说多如牛毛，多入鸡毛倒是一点不夸张，如[UglifyJS 2] (https://github.com/mishoo/UglifyJS2)、csso、cssnano 等。\n\n> 对于内嵌的CSS和JavaScript，也可以通过htmlmin等工具压缩。\n\n> 这些项目都有Gulp、Webpack等流行构建工具的配套版本。\n\n## （4）移除重复脚本\n重复的脚本不仅产生不必要的HTTP请求，而且重复解析执行浪费时间和计算资源。\n\n## （5）减少DOM操作\nJavaScript 操作 DOM 很慢，尤其是 DOM 节点很多时。\n\n使用时应该注意：\n\n* 缓存已经访问过的元素；\n* 使用DocumentFragment暂存DOM，整理好以后再插入DOM树；\n* 操作className，而不是多次读写style；\n* 避免使用JavaScript修复布局。\n\n## （6）使用高效的事件处理\n* 减少绑定事件监听的节点，如通过事件委托；\n* 尽早处理事件，在DOMContentLoaded即可进行，不用等到load以后。\n\n# 六、图片\n## （1）优化图片\n尝试把GIF格式转换成PNG格式，看看是否节省空间。在所有的PNG图片上运行pngcrush（或者其它PNG优化工具）。\n\n> YDN[列出的相关工具](https://developer.yahoo.com/performance/rules.html#opt_images)缺乏易用性，建议参考以下工具\n\n\n* [imagemin](https://github.com/imagemin/imagemin)\n* [imageoptim.com](https://imageoptim.com/mac)\n\n> TODO:\n* PNG 终极优化；\n* Webp 相关内容；\n* SVG 相关内容。\n\n\nPNG终极优化\n\n* [Most Effective Method to Reduce and Optimize PNG Images](https://www.queness.com/post/2507/most-effective-method-to-reduce-and-optimize-png-images)\n* [Clever PNG Optimization Techniques](https://www.smashingmagazine.com/2009/07/clever-png-optimization-techniques/)\n\n\n## （2）优化CSS Sprite\n* 水平排列Sprite中的图片，垂直排列会增加图片大小；\n* Spirite中把颜色较近的组合在一起可以降低颜色数，理想状况是低于256色以适用PNG8格式；\n* 不要在Spirite的图像中间留有较大空隙。减少空隙虽然不太影响文件大小，但可以降低用户代理把图片解压为像素图的内存消耗，对移动设备更友好。\n\n## （3）不要在HTML中缩放图片\n不要使用`<img>`的width、height缩放图片，如果用到小图片，就使用相应大小的图片。如果需要\n\n`<img width=\"100\" height=\"100\" src=\"mycat.jpg\" alt=\"My Cat\" />`\n\n那么图片本身（mycat.jpg）应该是100x100px的，而不是去缩小500x500px的图片。\n\n> 很多 CMS 和 CDN 都提供图片裁切功能。\n\n**补充**：设置图片的宽和高，以免浏览器按照「猜」的宽高给图片保留的区域和实际宽高差异，产生重绘。\n\n## （4）使用体积小、可缓存的favicon.ico\nFavicon.ico一般存放在网站根目录下，无论是否在页面中设置，浏览器都会尝试请求这个文件。\n\n所以确保这个图标：\n\n* 存在（避免 404）；\n* 尽量小，最好小于 1K；\n* 设置较长的过期时间。\n\n> 对于较新的浏览器，可以使用PNG格式的favicon。\n\n# 七、移动端\n## （1）保证所有组件都小于25K\n这个限制是因为iPhone不能缓存大于25K的组件，注意这里指的是未压缩的大小。这就是为什么缩减内容本身也很重要，因为单纯的gzip可能不够。\n\n[保证所有组件都小于25K](https://developer.yahoo.com/performance/rules.html#under25)\n\n## （2）打包内容为分段（multipart）文档\n把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个HTTP请求获取多个组件（记住一点：HTTP请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone就不支持）。\n\n\n# 总结\n写到这里，雅虎的35条军规算是介绍完了。条目虽然很多，但经过分类，可以发现，性能优化主要切入点可以从以下几个方面去考虑：\n\n* 资源本身大小的压缩优化（想办法减少资源的体积）\n* 网络请求的全过程（从url地址栏输入发送请求开始到返回响应包的每个环节）\n* 浏览器渲染的全过程（拿到资源后浏览器渲染的每个环节）\n\n因此，要彻底掌握优化的方法，必须对http请求的全过程以及浏览器的渲染全过程都有深入的理解。\n\n![前端性能优化](http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png)\n","slug":"雅虎35条军规——前端性能优化","published":1,"date":"2018-08-13T03:18:20.000Z","updated":"2018-08-15T09:12:55.000Z","_id":"cjkrpoghe00001br6tslvz719","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文主要考虑客户端性能、服务器端和网络性能，内容框架来自<a href=\"https://developer.yahoo.com/performance/rules.html?guccounter=1\" target=\"_blank\" rel=\"noopener\">Yahoo Developer Network</a>，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。</p>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png\" alt=\"前端性能优化\"></p>\n<p>前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。</p>\n<blockquote>\n</blockquote>\n<ul>\n<li>来自Google的数据表明，一个有10条数据0.4秒能加载完的页面，变成30条数据0.9秒加载完之后，流量和广告收入下降90%。</li>\n<li>Google Map 首页文件大小从100KB减小到70-80KB后，流量在第一周涨了10%，接下来的三周涨了25%。</li>\n<li>亚马逊的数据表明：加载时间增加100毫秒，销量就下降1%。</li>\n</ul>\n<p>以上数据更说明「加载时间就是金钱」，前端优化主要围绕提高加载速度进行。</p>\n<h1 id=\"一、页面内容\"><a href=\"#一、页面内容\" class=\"headerlink\" title=\"一、页面内容\"></a>一、页面内容</h1><h2 id=\"（1）减少HTTP请求数\"><a href=\"#（1）减少HTTP请求数\" class=\"headerlink\" title=\"（1）减少HTTP请求数\"></a>（1）减少HTTP请求数</h2><p>Web 前端 80% 的响应时间花在图片、样式、脚本等资源下载上。最直接的方式是减少页面所需资源，但并不现实。所以，减少HTTP请求数主要的途径是：</p>\n<blockquote>\n<p>合并JS/CSS文件。服务器端（CDN）自动合并，基于Node.js的文件合并工具，通过把所有脚本放在一个文件中的方式来减少请求数。</p>\n</blockquote>\n<blockquote>\n<p>使用<strong>CSS Sprite</strong>将背景图片合并成一个文件，通过<code>background-image</code> 和 <code>background-position</code> 控制显示</p>\n</blockquote>\n<blockquote>\n<p><strong>行内图片</strong>（Base64编码）。使用Data URI scheme将图片嵌入HTML或者CSS中；或者将CSS、JS、图片直接嵌入HTML中，会增加文件大小，也可能产生浏览器兼容及其他性能问题。</p>\n</blockquote>\n<p>减少页面的HTTP请求数是个起点，这是提升站点首次访问速度的重要指导原则。</p>\n<h2 id=\"（2）减少DNS查询\"><a href=\"#（2）减少DNS查询\" class=\"headerlink\" title=\"（2）减少DNS查询\"></a>（2）减少DNS查询</h2><p>用户输入URL以后，浏览器首先要查询域名（hostname）对应服务器的IP地址，一般需要耗费20-120毫秒时间。DNS查询完成之前，浏览器无法从服务器下载任何数据。</p>\n<p>基于性能考虑，ISP、局域网、操作系统、浏览器都会有相应的DNS缓存机制。</p>\n<ul>\n<li>IE缓存30分钟，可以通过注册表中DnsCacheTimeout项设置；</li>\n<li>Firefox缓存1分钟，通过network.dnsCacheExpiration配置；</li>\n</ul>\n<p>另外减少不同的主机名可减少DNS查找，减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免DNS查找削减了响应时间，而减少并行下载数量却增加了响应时间。原则是把组件分散在2到4个主机名下，这是同时减少DNS查找和允许高并发下载的折中方案。</p>\n<h2 id=\"（3）避免重定向\"><a href=\"#（3）避免重定向\" class=\"headerlink\" title=\"（3）避免重定向\"></a>（3）避免重定向</h2><p>HTTP重定向通过<code>301/302</code>状态码实现。下面是一个有301状态码的HTTP头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 301 Moved Permanently </span><br><span class=\"line\">Location: http://example.com/newuri</span><br><span class=\"line\">Content-Type: text/html</span><br></pre></td></tr></table></figure>\n<p>浏览器会自动跳转到Location域指明的URL。重定向需要的所有信息都在HTTP头部，而响应体一般是空的。其实额外的HTTP头，比如Expires和Cache-Control也表示重定向。除此之外还有别的跳转方式：refresh元标签和JavaScript，但如果你必须得做重定向，最好用标准的3xxHTTP状态码，主要是为了让返回按钮能正常使用。</p>\n<p>客户端收到服务器的重定向响应后，会根据响应头中Location的地址再次发送请求。重定向会影响用户体验，尤其是多次重定向时，用户在一段时间内看不到任何内容，只看到浏览器进度条一直在刷新。</p>\n<ul>\n<li>最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加<code>/</code>但未添加。比如，访问<code>http://astrology.yahoo.com/astrology</code>将被<code>301</code>重定向到 <code>http://astrology.yahoo.com/astrology/</code>（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。</li>\n<li>网站域名变更：CNAME结合Alias或mod_rewrite或者其他服务器类似功能实现跳转。</li>\n</ul>\n<h2 id=\"（4）缓存Ajax请求\"><a href=\"#（4）缓存Ajax请求\" class=\"headerlink\" title=\"（4）缓存Ajax请求\"></a>（4）缓存Ajax请求</h2><p>最重要的的优化方式是缓存响应结果。有尚未过期的Expires或者Cache-Control HTTP头，那么之前的资源就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的资源响应，还是去请求一个新的。可以通过给资源的Ajax URL里添加一个表明用户资源最后修改时间的时间戳来实现。如果资源从上一次下载之后再没有被修改过，时间戳不变，资源就将从浏览器缓存中直接读出，从而避免一次额外的HTTP往返消耗。详见<code>服务器-添加Expires或Cache响应头</code>。</p>\n<h2 id=\"（5）延迟加载\"><a href=\"#（5）延迟加载\" class=\"headerlink\" title=\"（5）延迟加载\"></a>（5）延迟加载</h2><p>页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等；</li>\n<li>用户交互时才会显示的内容。</li>\n</ul>\n<p>遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。</p>\n<blockquote>\n<p>将首屏以外的HTML放在不渲染的元素中，如隐藏的<code>&lt;textarea&gt;</code>，或者type属性为非执行脚本的<code>&lt;script&gt;</code>标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</p>\n</blockquote>\n<h2 id=\"（6）预加载\"><a href=\"#（6）预加载\" class=\"headerlink\" title=\"（6）预加载\"></a>（6）预加载</h2><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<ul>\n<li>无条件预先加载：页面加载完成（load）后，马上获取其他资源。以 google.com 为例，首页加载完成后会立即下载一个 Sprite 图片，此图首页不需要，但是搜索结果页要用到。</li>\n<li>有条件预先加载：根据用户行为预判用户去向，预载相关资源。比如search.yahoo.com开始输入时会有额外的资源加载。Chrome 等浏览器的地址栏也有类似的机制。</li>\n<li>有「阴谋」的预先加载：页面即将上线新版前预先加载新版内容。网站改版后由于缓存、使用习惯等原因，会有旧版的网站更快更流畅的反馈。为缓解这一问题，在新版上线之前，旧版可以利用空闲提前加载一些新版的资源缓存到客户端，以便新版正式上线后更快的载入。</li>\n</ul>\n<h2 id=\"（7）减少DOM元素数量\"><a href=\"#（7）减少DOM元素数量\" class=\"headerlink\" title=\"（7）减少DOM元素数量\"></a>（7）减少DOM元素数量</h2><p>复杂的页面不仅下载的字节更多，JavaScript DOM操作也更慢。例如，同是添加一个事件处理器，500个元素和5000个元素的页面速度上会有很大区别。</p>\n<p>从以下几个角度考虑移除不必要的标记：</p>\n<ul>\n<li>是否还在使用表格布局？</li>\n<li>塞进去更多的<code>&lt;div&gt;</code>仅为了处理布局问题？也许有更好、更语义化的标记。</li>\n<li>能通过伪元素实现的功能，就没必要添加额外元素，如清除浮动。</li>\n</ul>\n<p>浏览器控制台中输入以下代码可以计算出页面中有多少 DOM 元素：</p>\n<blockquote>\n<p>document.getElementsByTagName(‘*’).length;</p>\n</blockquote>\n<p>为什么不使用表格布局？</p>\n<ul>\n<li>更多的标签，增加文件大小；</li>\n<li>不易维护，无法适应响应式设计；</li>\n<li>性能考量，默认的表格布局算法会产生大量重绘</li>\n</ul>\n<h2 id=\"（8）划分内容到不同域名\"><a href=\"#（8）划分内容到不同域名\" class=\"headerlink\" title=\"（8）划分内容到不同域名\"></a>（8）划分内容到不同域名</h2><p>浏览器一般会限制每个域的并行线程（一般为6个，甚至更少），使用不同的域名可以最大化下载线程，但注意保持在2-4个域名内，以避免DNS查询损耗。</p>\n<p>例如，动态内容放在<code>csspod.com</code>上，静态资源放在<code>static.csspod.com</code>上。这样还可以禁用静态资源域下的Cookie，减少数据传输，详见<code>Cookie 优化</code>。</p>\n<h2 id=\"（9）尽量减少iframe的使用\"><a href=\"#（9）尽量减少iframe的使用\" class=\"headerlink\" title=\"（9）尽量减少iframe的使用\"></a>（9）尽量减少iframe的使用</h2><p>用iframe可以把一个HTML文档插入到父文档里，重要的是明白iframe是如何工作的并高效地使用它。</p>\n<p><code>&lt;iframe&gt;</code>的优点：</p>\n<ul>\n<li>可以用来加载速度较慢的第三方资源，如广告、徽章；</li>\n<li>可用作安全沙箱；</li>\n<li>可以并行下载脚本。</li>\n</ul>\n<p><code>&lt;iframe&gt;</code>的缺点：</p>\n<ul>\n<li>加载代价昂贵，即使是空的页面；</li>\n<li><p>阻塞页面 load 事件触发；</p>\n<blockquote>\n<p>Iframe 完全加载以后，父页面才会触发 load 事件。 Safari、Chrome 中通过 JavaScript 动态设置 iframe src 可以避免这个问题。</p>\n</blockquote>\n</li>\n<li><p>缺乏语义。</p>\n</li>\n</ul>\n<h2 id=\"（10）避免404错误\"><a href=\"#（10）避免404错误\" class=\"headerlink\" title=\"（10）避免404错误\"></a>（10）避免404错误</h2><p>HTTP请求很昂贵，返回无效的响应（如404未找到）完全没必要，降低用户体验而且毫无益处。<br>一些网站设计很酷炫、有提示信息的404页面，有助于提高用户体验，但还是浪费服务器资源。尤其糟糕的是外部脚本返回404，不仅阻塞其他资源下载，浏览器还会尝试把404页面内容当作JavaScript解析，消耗更多资源。</p>\n<h1 id=\"二、服务器\"><a href=\"#二、服务器\" class=\"headerlink\" title=\"二、服务器\"></a>二、服务器</h1><h2 id=\"（1）使用CDN\"><a href=\"#（1）使用CDN\" class=\"headerlink\" title=\"（1）使用CDN\"></a>（1）使用CDN</h2><p>用户与服务器的物理距离对响应时间也有影响。把内容部署在多个地理位置分散的服务器上能让用户更快地载入页面。但具体要怎么做呢？</p>\n<p>网站80-90%响应时间消耗在资源下载上，减少资源下载时间是性能优化的黄金法则。相比分布式架构的复杂和巨大投入，静态内容分发网络（CDN）可以以较低的投入，获得加载速度有效提升。</p>\n<p>内容分发网络（CDN）是一组分散在不同地理位置的web服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。</p>\n<h2 id=\"（2）添加Expires或Cache-Control响应头\"><a href=\"#（2）添加Expires或Cache-Control响应头\" class=\"headerlink\" title=\"（2）添加Expires或Cache-Control响应头\"></a>（2）添加Expires或Cache-Control响应头</h2><ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<blockquote>\n<p>Cache-Control头在HTTP/1.1规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires、Pragma）。当前的所有浏览器都支持Cache-Control，因此，使用它就够了。</p>\n</blockquote>\n<h2 id=\"（3）启用Gzip\"><a href=\"#（3）启用Gzip\" class=\"headerlink\" title=\"（3）启用Gzip\"></a>（3）启用Gzip</h2><p>前端工程师可以想办法明显地缩短通过网络传输HTTP请求和响应的时间。毫无疑问，终端用户的带宽速度，网络服务商，对等交换点的距离等等，都是开发团队所无法控制的。但还有别的能够影响响应时间的因素，压缩可以通过减少HTTP响应的大小来缩短响应时间。</p>\n<p>Gzip压缩通常可以减少70%的响应大小，对某些文件更可能高达90%，比Deflate更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持gzip解码。所以，应该对HTML、CSS、JS、XML、JSON等文本类型的内容启用压缩。</p>\n<blockquote>\n<p><strong>注意!!!</strong> 图片和 PDF 文件不要使用 gzip。它们本身已经压缩过，再使用 gzip 压缩不仅浪费 CPU 资源，而且还可能增加文件体积。</p>\n</blockquote>\n<p>从HTTP/1.1开始，<strong>web客户端</strong>就有了支持压缩的Accept-Encoding HTTP请求头。</p>\n<blockquote>\n<p>Accept-Encoding: gzip, deflate</p>\n</blockquote>\n<p>如果web服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。<strong>web服务器</strong>通过Content-Encoding响应头来通知客户端。</p>\n<blockquote>\n<p>Content-Encoding: gzip</p>\n</blockquote>\n<h2 id=\"（4）配置-Etag\"><a href=\"#（4）配置-Etag\" class=\"headerlink\" title=\"（4）配置 Etag\"></a>（4）配置 Etag</h2><p>实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加ETags可以提供一种实体验证机制，比最后修改日期更加灵活。一个ETag是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的ETag来指定组件的ETag。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">      Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class=\"line\">      ETag: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class=\"line\">      Content-Length: 12195</span><br></pre></td></tr></table></figure>\n<p>然后，如果浏览器必须验证一个组件，它用If-None-Match请求头来把ETag传回源服务器。如果ETags匹配成功，会返回一个304状态码，这样就减少了12195个字节的响应体。Etag 通过文件版本标识，方便服务器判断请求的内容是否有更新，如果没有就响应 304，避免重新下载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /i/yahoo.gif HTTP/1.1</span><br><span class=\"line\">      Host: us.yimg.com</span><br><span class=\"line\">      If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class=\"line\">      If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class=\"line\">      HTTP/1.1 304 Not Modified</span><br></pre></td></tr></table></figure>\n<h2 id=\"（5）尽早输出（flush）缓冲\"><a href=\"#（5）尽早输出（flush）缓冲\" class=\"headerlink\" title=\"（5）尽早输出（flush）缓冲\"></a>（5）尽早输出（flush）缓冲</h2><p>用户请求页面时，服务器通常需要花费200 ~ 500毫秒来组合 HTML 页面。在此期间，浏览器处于空闲、等待数据状态。使用PHP中的flush()函数，可以发送部分已经准备好的 HTML到浏览器，以便服务器还在忙于处理剩余页面时，浏览器可以提前开始获取资源。</p>\n<p>可以考虑在<code>&lt;/head&gt;</code>之后输出一次缓冲，HTML head一般比较容易生成，先发送以便浏览器开始获取<code>&lt;head&gt;</code>里引用的CSS等资源。</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- css, js --&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;?php flush(); ?&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;!-- content --&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"（6）Ajax请求使用GET方法\"><a href=\"#（6）Ajax请求使用GET方法\" class=\"headerlink\" title=\"（6）Ajax请求使用GET方法\"></a>（6）Ajax请求使用GET方法</h2><p>浏览器执行XMLHttpRequest POST请求时分成两步，先发送Http Header，再发送data。而GET只使用一个TCP数据包（Http Header与data）发送数据，所以首选GET方法。</p>\n<p>根据HTTP规范，GET用于获取数据，POST则用于向服务器发送数据，所以Ajax请求数据时使用GET更符合规范。</p>\n<h2 id=\"（7）避免图片src为空\"><a href=\"#（7）避免图片src为空\" class=\"headerlink\" title=\"（7）避免图片src为空\"></a>（7）避免图片src为空</h2><p>图片src属性值为空字符串可能以下面两种形式出现：</p>\n<p>HTML:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var img = new Image(); </span><br><span class=\"line\">img.src = &quot;&quot;;</span><br></pre></td></tr></table></figure>\n<p>虽然src属性为空字符串，但浏览器仍然会向服务器发起一个HTTP请求：</p>\n<ul>\n<li>IE 向页面所在的目录发送请求；</li>\n<li>Safari、Chrome、Firefox向页面本身发送请求；</li>\n<li>Opera不执行任何操作。</li>\n</ul>\n<p>空src产生请求的后果不容小觑：</p>\n<ul>\n<li>给服务器造成意外的流量负担，尤其时日 PV 较大时；</li>\n<li>浪费服务器计算资源；</li>\n<li>可能产生报错。</li>\n</ul>\n<blockquote>\n<p>空的href属性也存在类似问题。用户点击空链接时，浏览器也会向服务器发送HTTP请求，可以通过JavaScript阻止空链接的默认的行为。</p>\n</blockquote>\n<h1 id=\"三、Cookie\"><a href=\"#三、Cookie\" class=\"headerlink\" title=\"三、Cookie\"></a>三、Cookie</h1><h2 id=\"（1）减少-Cookie-大小\"><a href=\"#（1）减少-Cookie-大小\" class=\"headerlink\" title=\"（1）减少 Cookie 大小\"></a>（1）减少 Cookie 大小</h2><p>Cookie被用于身份认证、个性化设置等诸多用途。Cookie通过HTTP头在服务器和浏览器间来回传送，减少Cookie大小可以降低其对响应速度的影响。</p>\n<ul>\n<li>去除不必要的 Cookie；</li>\n<li>尽量压缩 Cookie 大小；</li>\n<li>注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；</li>\n<li>设置合适的过期时间。</li>\n</ul>\n<h2 id=\"（2）静态资源使用无Cookie域名\"><a href=\"#（2）静态资源使用无Cookie域名\" class=\"headerlink\" title=\"（2）静态资源使用无Cookie域名\"></a>（2）静态资源使用无Cookie域名</h2><p>静态资源一般无需使用Cookie，可以把它们放在使用二级域名或者专门域名的无Cookie服务器上，降低Cookie传送的造成的流量浪费，提高响应速度。</p>\n<h1 id=\"四、CSS\"><a href=\"#四、CSS\" class=\"headerlink\" title=\"四、CSS\"></a>四、CSS</h1><h2 id=\"（1）把样式表放在-lt-head-gt-中\"><a href=\"#（1）把样式表放在-lt-head-gt-中\" class=\"headerlink\" title=\"（1）把样式表放在&lt;head&gt;中\"></a>（1）把样式表放在<code>&lt;head&gt;</code>中</h2><p>把样式表放在<code>&lt;head&gt;</code>中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。</p>\n<p>这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。</p>\n<p>如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。</p>\n<h2 id=\"（2）不要使用CSS表达式\"><a href=\"#（2）不要使用CSS表达式\" class=\"headerlink\" title=\"（2）不要使用CSS表达式\"></a>（2）不要使用CSS表达式</h2><p>CSS表达式可以在CSS里执行JavaScript，仅IE5-IE7支持，IE8标准模式已经废弃。<br>CSS表达式超出预期的频繁执行，页面滚动、鼠标移动时都会不断执行，带来很大的性能损耗。</p>\n<h2 id=\"（3）使用-lt-link-gt-替代-import\"><a href=\"#（3）使用-lt-link-gt-替代-import\" class=\"headerlink\" title=\"（3）使用&lt;link&gt;替代@import\"></a>（3）使用<code>&lt;link&gt;</code>替代<code>@import</code></h2><p>对于IE某些版本，@import的行为和<link>放在页面底部一样。所以，不要用它。</p>\n<h2 id=\"（4）不要使用-filter\"><a href=\"#（4）不要使用-filter\" class=\"headerlink\" title=\"（4）不要使用 filter\"></a>（4）不要使用 filter</h2><p>AlphaImageLoader为IE5.5-IE8专有的技术，和CSS表达式一样，放进博物馆吧。IE专有的AlphaImageLoader滤镜可以用来修复IE7之前的版本中半透明PNG图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。</p>\n<blockquote>\n<p>注意！！！这里所说的不是 CSS3 Filter</p>\n</blockquote>\n<h1 id=\"五、Javasript\"><a href=\"#五、Javasript\" class=\"headerlink\" title=\"五、Javasript\"></a>五、Javasript</h1><h2 id=\"（1）把脚本放在页面底部\"><a href=\"#（1）把脚本放在页面底部\" class=\"headerlink\" title=\"（1）把脚本放在页面底部\"></a>（1）把脚本放在页面底部</h2><p>浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源。因此，最好将脚本放在底部，以提高页面加载速度。</p>\n<p>一些特殊场景无法将脚本放到页面底部的，可以考虑<code>&lt;script&gt;</code>的以下属性：</p>\n<ul>\n<li>defer 属性；</li>\n<li>HTML5 新增的async属性。</li>\n</ul>\n<h2 id=\"（2）使用外部JavaScript和CSS\"><a href=\"#（2）使用外部JavaScript和CSS\" class=\"headerlink\" title=\"（2）使用外部JavaScript和CSS\"></a>（2）使用外部JavaScript和CSS</h2><p>外部JavaScript和CSS文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。</p>\n<p>当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。</p>\n<h2 id=\"（3）压缩JavaScript和CSS\"><a href=\"#（3）压缩JavaScript和CSS\" class=\"headerlink\" title=\"（3）压缩JavaScript和CSS\"></a>（3）压缩JavaScript和CSS</h2><p>压缩代码可以移除非功能性的字符（注释、空格、空行等），减少文件大小，提高载入速度。</p>\n<blockquote>\n<p>得益于Node.js的流行，开源社区涌现出许多高效、易用的前端优化工具，JavaScript 和CSS压缩类的，不敢说多如牛毛，多入鸡毛倒是一点不夸张，如[UglifyJS 2] (<a href=\"https://github.com/mishoo/UglifyJS2)、csso、cssnano\" target=\"_blank\" rel=\"noopener\">https://github.com/mishoo/UglifyJS2)、csso、cssnano</a> 等。</p>\n</blockquote>\n<blockquote>\n<p>对于内嵌的CSS和JavaScript，也可以通过htmlmin等工具压缩。</p>\n</blockquote>\n<blockquote>\n<p>这些项目都有Gulp、Webpack等流行构建工具的配套版本。</p>\n</blockquote>\n<h2 id=\"（4）移除重复脚本\"><a href=\"#（4）移除重复脚本\" class=\"headerlink\" title=\"（4）移除重复脚本\"></a>（4）移除重复脚本</h2><p>重复的脚本不仅产生不必要的HTTP请求，而且重复解析执行浪费时间和计算资源。</p>\n<h2 id=\"（5）减少DOM操作\"><a href=\"#（5）减少DOM操作\" class=\"headerlink\" title=\"（5）减少DOM操作\"></a>（5）减少DOM操作</h2><p>JavaScript 操作 DOM 很慢，尤其是 DOM 节点很多时。</p>\n<p>使用时应该注意：</p>\n<ul>\n<li>缓存已经访问过的元素；</li>\n<li>使用DocumentFragment暂存DOM，整理好以后再插入DOM树；</li>\n<li>操作className，而不是多次读写style；</li>\n<li>避免使用JavaScript修复布局。</li>\n</ul>\n<h2 id=\"（6）使用高效的事件处理\"><a href=\"#（6）使用高效的事件处理\" class=\"headerlink\" title=\"（6）使用高效的事件处理\"></a>（6）使用高效的事件处理</h2><ul>\n<li>减少绑定事件监听的节点，如通过事件委托；</li>\n<li>尽早处理事件，在DOMContentLoaded即可进行，不用等到load以后。</li>\n</ul>\n<h1 id=\"六、图片\"><a href=\"#六、图片\" class=\"headerlink\" title=\"六、图片\"></a>六、图片</h1><h2 id=\"（1）优化图片\"><a href=\"#（1）优化图片\" class=\"headerlink\" title=\"（1）优化图片\"></a>（1）优化图片</h2><p>尝试把GIF格式转换成PNG格式，看看是否节省空间。在所有的PNG图片上运行pngcrush（或者其它PNG优化工具）。</p>\n<blockquote>\n<p>YDN<a href=\"https://developer.yahoo.com/performance/rules.html#opt_images\" target=\"_blank\" rel=\"noopener\">列出的相关工具</a>缺乏易用性，建议参考以下工具</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/imagemin/imagemin\" target=\"_blank\" rel=\"noopener\">imagemin</a></li>\n<li><a href=\"https://imageoptim.com/mac\" target=\"_blank\" rel=\"noopener\">imageoptim.com</a></li>\n</ul>\n<blockquote>\n<p>TODO:</p>\n<ul>\n<li>PNG 终极优化；</li>\n<li>Webp 相关内容；</li>\n<li>SVG 相关内容。</li>\n</ul>\n</blockquote>\n<p>PNG终极优化</p>\n<ul>\n<li><a href=\"https://www.queness.com/post/2507/most-effective-method-to-reduce-and-optimize-png-images\" target=\"_blank\" rel=\"noopener\">Most Effective Method to Reduce and Optimize PNG Images</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2009/07/clever-png-optimization-techniques/\" target=\"_blank\" rel=\"noopener\">Clever PNG Optimization Techniques</a></li>\n</ul>\n<h2 id=\"（2）优化CSS-Sprite\"><a href=\"#（2）优化CSS-Sprite\" class=\"headerlink\" title=\"（2）优化CSS Sprite\"></a>（2）优化CSS Sprite</h2><ul>\n<li>水平排列Sprite中的图片，垂直排列会增加图片大小；</li>\n<li>Spirite中把颜色较近的组合在一起可以降低颜色数，理想状况是低于256色以适用PNG8格式；</li>\n<li>不要在Spirite的图像中间留有较大空隙。减少空隙虽然不太影响文件大小，但可以降低用户代理把图片解压为像素图的内存消耗，对移动设备更友好。</li>\n</ul>\n<h2 id=\"（3）不要在HTML中缩放图片\"><a href=\"#（3）不要在HTML中缩放图片\" class=\"headerlink\" title=\"（3）不要在HTML中缩放图片\"></a>（3）不要在HTML中缩放图片</h2><p>不要使用<code>&lt;img&gt;</code>的width、height缩放图片，如果用到小图片，就使用相应大小的图片。如果需要</p>\n<p><code>&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt;</code></p>\n<p>那么图片本身（mycat.jpg）应该是100x100px的，而不是去缩小500x500px的图片。</p>\n<blockquote>\n<p>很多 CMS 和 CDN 都提供图片裁切功能。</p>\n</blockquote>\n<p><strong>补充</strong>：设置图片的宽和高，以免浏览器按照「猜」的宽高给图片保留的区域和实际宽高差异，产生重绘。</p>\n<h2 id=\"（4）使用体积小、可缓存的favicon-ico\"><a href=\"#（4）使用体积小、可缓存的favicon-ico\" class=\"headerlink\" title=\"（4）使用体积小、可缓存的favicon.ico\"></a>（4）使用体积小、可缓存的favicon.ico</h2><p>Favicon.ico一般存放在网站根目录下，无论是否在页面中设置，浏览器都会尝试请求这个文件。</p>\n<p>所以确保这个图标：</p>\n<ul>\n<li>存在（避免 404）；</li>\n<li>尽量小，最好小于 1K；</li>\n<li>设置较长的过期时间。</li>\n</ul>\n<blockquote>\n<p>对于较新的浏览器，可以使用PNG格式的favicon。</p>\n</blockquote>\n<h1 id=\"七、移动端\"><a href=\"#七、移动端\" class=\"headerlink\" title=\"七、移动端\"></a>七、移动端</h1><h2 id=\"（1）保证所有组件都小于25K\"><a href=\"#（1）保证所有组件都小于25K\" class=\"headerlink\" title=\"（1）保证所有组件都小于25K\"></a>（1）保证所有组件都小于25K</h2><p>这个限制是因为iPhone不能缓存大于25K的组件，注意这里指的是未压缩的大小。这就是为什么缩减内容本身也很重要，因为单纯的gzip可能不够。</p>\n<p><a href=\"https://developer.yahoo.com/performance/rules.html#under25\" target=\"_blank\" rel=\"noopener\">保证所有组件都小于25K</a></p>\n<h2 id=\"（2）打包内容为分段（multipart）文档\"><a href=\"#（2）打包内容为分段（multipart）文档\" class=\"headerlink\" title=\"（2）打包内容为分段（multipart）文档\"></a>（2）打包内容为分段（multipart）文档</h2><p>把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个HTTP请求获取多个组件（记住一点：HTTP请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone就不支持）。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>写到这里，雅虎的35条军规算是介绍完了。条目虽然很多，但经过分类，可以发现，性能优化主要切入点可以从以下几个方面去考虑：</p>\n<ul>\n<li>资源本身大小的压缩优化（想办法减少资源的体积）</li>\n<li>网络请求的全过程（从url地址栏输入发送请求开始到返回响应包的每个环节）</li>\n<li>浏览器渲染的全过程（拿到资源后浏览器渲染的每个环节）</li>\n</ul>\n<p>因此，要彻底掌握优化的方法，必须对http请求的全过程以及浏览器的渲染全过程都有深入的理解。</p>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png\" alt=\"前端性能优化\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要考虑客户端性能、服务器端和网络性能，内容框架来自<a href=\"https://developer.yahoo.com/performance/rules.html?guccounter=1\" target=\"_blank\" rel=\"noopener\">Yahoo Developer Network</a>，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。</p>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png\" alt=\"前端性能优化\"></p>\n<p>前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。</p>\n<blockquote>\n</blockquote>\n<ul>\n<li>来自Google的数据表明，一个有10条数据0.4秒能加载完的页面，变成30条数据0.9秒加载完之后，流量和广告收入下降90%。</li>\n<li>Google Map 首页文件大小从100KB减小到70-80KB后，流量在第一周涨了10%，接下来的三周涨了25%。</li>\n<li>亚马逊的数据表明：加载时间增加100毫秒，销量就下降1%。</li>\n</ul>\n<p>以上数据更说明「加载时间就是金钱」，前端优化主要围绕提高加载速度进行。</p>\n<h1 id=\"一、页面内容\"><a href=\"#一、页面内容\" class=\"headerlink\" title=\"一、页面内容\"></a>一、页面内容</h1><h2 id=\"（1）减少HTTP请求数\"><a href=\"#（1）减少HTTP请求数\" class=\"headerlink\" title=\"（1）减少HTTP请求数\"></a>（1）减少HTTP请求数</h2><p>Web 前端 80% 的响应时间花在图片、样式、脚本等资源下载上。最直接的方式是减少页面所需资源，但并不现实。所以，减少HTTP请求数主要的途径是：</p>\n<blockquote>\n<p>合并JS/CSS文件。服务器端（CDN）自动合并，基于Node.js的文件合并工具，通过把所有脚本放在一个文件中的方式来减少请求数。</p>\n</blockquote>\n<blockquote>\n<p>使用<strong>CSS Sprite</strong>将背景图片合并成一个文件，通过<code>background-image</code> 和 <code>background-position</code> 控制显示</p>\n</blockquote>\n<blockquote>\n<p><strong>行内图片</strong>（Base64编码）。使用Data URI scheme将图片嵌入HTML或者CSS中；或者将CSS、JS、图片直接嵌入HTML中，会增加文件大小，也可能产生浏览器兼容及其他性能问题。</p>\n</blockquote>\n<p>减少页面的HTTP请求数是个起点，这是提升站点首次访问速度的重要指导原则。</p>\n<h2 id=\"（2）减少DNS查询\"><a href=\"#（2）减少DNS查询\" class=\"headerlink\" title=\"（2）减少DNS查询\"></a>（2）减少DNS查询</h2><p>用户输入URL以后，浏览器首先要查询域名（hostname）对应服务器的IP地址，一般需要耗费20-120毫秒时间。DNS查询完成之前，浏览器无法从服务器下载任何数据。</p>\n<p>基于性能考虑，ISP、局域网、操作系统、浏览器都会有相应的DNS缓存机制。</p>\n<ul>\n<li>IE缓存30分钟，可以通过注册表中DnsCacheTimeout项设置；</li>\n<li>Firefox缓存1分钟，通过network.dnsCacheExpiration配置；</li>\n</ul>\n<p>另外减少不同的主机名可减少DNS查找，减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免DNS查找削减了响应时间，而减少并行下载数量却增加了响应时间。原则是把组件分散在2到4个主机名下，这是同时减少DNS查找和允许高并发下载的折中方案。</p>\n<h2 id=\"（3）避免重定向\"><a href=\"#（3）避免重定向\" class=\"headerlink\" title=\"（3）避免重定向\"></a>（3）避免重定向</h2><p>HTTP重定向通过<code>301/302</code>状态码实现。下面是一个有301状态码的HTTP头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 301 Moved Permanently </span><br><span class=\"line\">Location: http://example.com/newuri</span><br><span class=\"line\">Content-Type: text/html</span><br></pre></td></tr></table></figure>\n<p>浏览器会自动跳转到Location域指明的URL。重定向需要的所有信息都在HTTP头部，而响应体一般是空的。其实额外的HTTP头，比如Expires和Cache-Control也表示重定向。除此之外还有别的跳转方式：refresh元标签和JavaScript，但如果你必须得做重定向，最好用标准的3xxHTTP状态码，主要是为了让返回按钮能正常使用。</p>\n<p>客户端收到服务器的重定向响应后，会根据响应头中Location的地址再次发送请求。重定向会影响用户体验，尤其是多次重定向时，用户在一段时间内看不到任何内容，只看到浏览器进度条一直在刷新。</p>\n<ul>\n<li>最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加<code>/</code>但未添加。比如，访问<code>http://astrology.yahoo.com/astrology</code>将被<code>301</code>重定向到 <code>http://astrology.yahoo.com/astrology/</code>（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。</li>\n<li>网站域名变更：CNAME结合Alias或mod_rewrite或者其他服务器类似功能实现跳转。</li>\n</ul>\n<h2 id=\"（4）缓存Ajax请求\"><a href=\"#（4）缓存Ajax请求\" class=\"headerlink\" title=\"（4）缓存Ajax请求\"></a>（4）缓存Ajax请求</h2><p>最重要的的优化方式是缓存响应结果。有尚未过期的Expires或者Cache-Control HTTP头，那么之前的资源就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的资源响应，还是去请求一个新的。可以通过给资源的Ajax URL里添加一个表明用户资源最后修改时间的时间戳来实现。如果资源从上一次下载之后再没有被修改过，时间戳不变，资源就将从浏览器缓存中直接读出，从而避免一次额外的HTTP往返消耗。详见<code>服务器-添加Expires或Cache响应头</code>。</p>\n<h2 id=\"（5）延迟加载\"><a href=\"#（5）延迟加载\" class=\"headerlink\" title=\"（5）延迟加载\"></a>（5）延迟加载</h2><p>页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等；</li>\n<li>用户交互时才会显示的内容。</li>\n</ul>\n<p>遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。</p>\n<blockquote>\n<p>将首屏以外的HTML放在不渲染的元素中，如隐藏的<code>&lt;textarea&gt;</code>，或者type属性为非执行脚本的<code>&lt;script&gt;</code>标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</p>\n</blockquote>\n<h2 id=\"（6）预加载\"><a href=\"#（6）预加载\" class=\"headerlink\" title=\"（6）预加载\"></a>（6）预加载</h2><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<ul>\n<li>无条件预先加载：页面加载完成（load）后，马上获取其他资源。以 google.com 为例，首页加载完成后会立即下载一个 Sprite 图片，此图首页不需要，但是搜索结果页要用到。</li>\n<li>有条件预先加载：根据用户行为预判用户去向，预载相关资源。比如search.yahoo.com开始输入时会有额外的资源加载。Chrome 等浏览器的地址栏也有类似的机制。</li>\n<li>有「阴谋」的预先加载：页面即将上线新版前预先加载新版内容。网站改版后由于缓存、使用习惯等原因，会有旧版的网站更快更流畅的反馈。为缓解这一问题，在新版上线之前，旧版可以利用空闲提前加载一些新版的资源缓存到客户端，以便新版正式上线后更快的载入。</li>\n</ul>\n<h2 id=\"（7）减少DOM元素数量\"><a href=\"#（7）减少DOM元素数量\" class=\"headerlink\" title=\"（7）减少DOM元素数量\"></a>（7）减少DOM元素数量</h2><p>复杂的页面不仅下载的字节更多，JavaScript DOM操作也更慢。例如，同是添加一个事件处理器，500个元素和5000个元素的页面速度上会有很大区别。</p>\n<p>从以下几个角度考虑移除不必要的标记：</p>\n<ul>\n<li>是否还在使用表格布局？</li>\n<li>塞进去更多的<code>&lt;div&gt;</code>仅为了处理布局问题？也许有更好、更语义化的标记。</li>\n<li>能通过伪元素实现的功能，就没必要添加额外元素，如清除浮动。</li>\n</ul>\n<p>浏览器控制台中输入以下代码可以计算出页面中有多少 DOM 元素：</p>\n<blockquote>\n<p>document.getElementsByTagName(‘*’).length;</p>\n</blockquote>\n<p>为什么不使用表格布局？</p>\n<ul>\n<li>更多的标签，增加文件大小；</li>\n<li>不易维护，无法适应响应式设计；</li>\n<li>性能考量，默认的表格布局算法会产生大量重绘</li>\n</ul>\n<h2 id=\"（8）划分内容到不同域名\"><a href=\"#（8）划分内容到不同域名\" class=\"headerlink\" title=\"（8）划分内容到不同域名\"></a>（8）划分内容到不同域名</h2><p>浏览器一般会限制每个域的并行线程（一般为6个，甚至更少），使用不同的域名可以最大化下载线程，但注意保持在2-4个域名内，以避免DNS查询损耗。</p>\n<p>例如，动态内容放在<code>csspod.com</code>上，静态资源放在<code>static.csspod.com</code>上。这样还可以禁用静态资源域下的Cookie，减少数据传输，详见<code>Cookie 优化</code>。</p>\n<h2 id=\"（9）尽量减少iframe的使用\"><a href=\"#（9）尽量减少iframe的使用\" class=\"headerlink\" title=\"（9）尽量减少iframe的使用\"></a>（9）尽量减少iframe的使用</h2><p>用iframe可以把一个HTML文档插入到父文档里，重要的是明白iframe是如何工作的并高效地使用它。</p>\n<p><code>&lt;iframe&gt;</code>的优点：</p>\n<ul>\n<li>可以用来加载速度较慢的第三方资源，如广告、徽章；</li>\n<li>可用作安全沙箱；</li>\n<li>可以并行下载脚本。</li>\n</ul>\n<p><code>&lt;iframe&gt;</code>的缺点：</p>\n<ul>\n<li>加载代价昂贵，即使是空的页面；</li>\n<li><p>阻塞页面 load 事件触发；</p>\n<blockquote>\n<p>Iframe 完全加载以后，父页面才会触发 load 事件。 Safari、Chrome 中通过 JavaScript 动态设置 iframe src 可以避免这个问题。</p>\n</blockquote>\n</li>\n<li><p>缺乏语义。</p>\n</li>\n</ul>\n<h2 id=\"（10）避免404错误\"><a href=\"#（10）避免404错误\" class=\"headerlink\" title=\"（10）避免404错误\"></a>（10）避免404错误</h2><p>HTTP请求很昂贵，返回无效的响应（如404未找到）完全没必要，降低用户体验而且毫无益处。<br>一些网站设计很酷炫、有提示信息的404页面，有助于提高用户体验，但还是浪费服务器资源。尤其糟糕的是外部脚本返回404，不仅阻塞其他资源下载，浏览器还会尝试把404页面内容当作JavaScript解析，消耗更多资源。</p>\n<h1 id=\"二、服务器\"><a href=\"#二、服务器\" class=\"headerlink\" title=\"二、服务器\"></a>二、服务器</h1><h2 id=\"（1）使用CDN\"><a href=\"#（1）使用CDN\" class=\"headerlink\" title=\"（1）使用CDN\"></a>（1）使用CDN</h2><p>用户与服务器的物理距离对响应时间也有影响。把内容部署在多个地理位置分散的服务器上能让用户更快地载入页面。但具体要怎么做呢？</p>\n<p>网站80-90%响应时间消耗在资源下载上，减少资源下载时间是性能优化的黄金法则。相比分布式架构的复杂和巨大投入，静态内容分发网络（CDN）可以以较低的投入，获得加载速度有效提升。</p>\n<p>内容分发网络（CDN）是一组分散在不同地理位置的web服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。</p>\n<h2 id=\"（2）添加Expires或Cache-Control响应头\"><a href=\"#（2）添加Expires或Cache-Control响应头\" class=\"headerlink\" title=\"（2）添加Expires或Cache-Control响应头\"></a>（2）添加Expires或Cache-Control响应头</h2><ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<blockquote>\n<p>Cache-Control头在HTTP/1.1规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires、Pragma）。当前的所有浏览器都支持Cache-Control，因此，使用它就够了。</p>\n</blockquote>\n<h2 id=\"（3）启用Gzip\"><a href=\"#（3）启用Gzip\" class=\"headerlink\" title=\"（3）启用Gzip\"></a>（3）启用Gzip</h2><p>前端工程师可以想办法明显地缩短通过网络传输HTTP请求和响应的时间。毫无疑问，终端用户的带宽速度，网络服务商，对等交换点的距离等等，都是开发团队所无法控制的。但还有别的能够影响响应时间的因素，压缩可以通过减少HTTP响应的大小来缩短响应时间。</p>\n<p>Gzip压缩通常可以减少70%的响应大小，对某些文件更可能高达90%，比Deflate更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持gzip解码。所以，应该对HTML、CSS、JS、XML、JSON等文本类型的内容启用压缩。</p>\n<blockquote>\n<p><strong>注意!!!</strong> 图片和 PDF 文件不要使用 gzip。它们本身已经压缩过，再使用 gzip 压缩不仅浪费 CPU 资源，而且还可能增加文件体积。</p>\n</blockquote>\n<p>从HTTP/1.1开始，<strong>web客户端</strong>就有了支持压缩的Accept-Encoding HTTP请求头。</p>\n<blockquote>\n<p>Accept-Encoding: gzip, deflate</p>\n</blockquote>\n<p>如果web服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。<strong>web服务器</strong>通过Content-Encoding响应头来通知客户端。</p>\n<blockquote>\n<p>Content-Encoding: gzip</p>\n</blockquote>\n<h2 id=\"（4）配置-Etag\"><a href=\"#（4）配置-Etag\" class=\"headerlink\" title=\"（4）配置 Etag\"></a>（4）配置 Etag</h2><p>实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加ETags可以提供一种实体验证机制，比最后修改日期更加灵活。一个ETag是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的ETag来指定组件的ETag。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">      Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class=\"line\">      ETag: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class=\"line\">      Content-Length: 12195</span><br></pre></td></tr></table></figure>\n<p>然后，如果浏览器必须验证一个组件，它用If-None-Match请求头来把ETag传回源服务器。如果ETags匹配成功，会返回一个304状态码，这样就减少了12195个字节的响应体。Etag 通过文件版本标识，方便服务器判断请求的内容是否有更新，如果没有就响应 304，避免重新下载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /i/yahoo.gif HTTP/1.1</span><br><span class=\"line\">      Host: us.yimg.com</span><br><span class=\"line\">      If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class=\"line\">      If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class=\"line\">      HTTP/1.1 304 Not Modified</span><br></pre></td></tr></table></figure>\n<h2 id=\"（5）尽早输出（flush）缓冲\"><a href=\"#（5）尽早输出（flush）缓冲\" class=\"headerlink\" title=\"（5）尽早输出（flush）缓冲\"></a>（5）尽早输出（flush）缓冲</h2><p>用户请求页面时，服务器通常需要花费200 ~ 500毫秒来组合 HTML 页面。在此期间，浏览器处于空闲、等待数据状态。使用PHP中的flush()函数，可以发送部分已经准备好的 HTML到浏览器，以便服务器还在忙于处理剩余页面时，浏览器可以提前开始获取资源。</p>\n<p>可以考虑在<code>&lt;/head&gt;</code>之后输出一次缓冲，HTML head一般比较容易生成，先发送以便浏览器开始获取<code>&lt;head&gt;</code>里引用的CSS等资源。</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- css, js --&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;?php flush(); ?&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;!-- content --&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"（6）Ajax请求使用GET方法\"><a href=\"#（6）Ajax请求使用GET方法\" class=\"headerlink\" title=\"（6）Ajax请求使用GET方法\"></a>（6）Ajax请求使用GET方法</h2><p>浏览器执行XMLHttpRequest POST请求时分成两步，先发送Http Header，再发送data。而GET只使用一个TCP数据包（Http Header与data）发送数据，所以首选GET方法。</p>\n<p>根据HTTP规范，GET用于获取数据，POST则用于向服务器发送数据，所以Ajax请求数据时使用GET更符合规范。</p>\n<h2 id=\"（7）避免图片src为空\"><a href=\"#（7）避免图片src为空\" class=\"headerlink\" title=\"（7）避免图片src为空\"></a>（7）避免图片src为空</h2><p>图片src属性值为空字符串可能以下面两种形式出现：</p>\n<p>HTML:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var img = new Image(); </span><br><span class=\"line\">img.src = &quot;&quot;;</span><br></pre></td></tr></table></figure>\n<p>虽然src属性为空字符串，但浏览器仍然会向服务器发起一个HTTP请求：</p>\n<ul>\n<li>IE 向页面所在的目录发送请求；</li>\n<li>Safari、Chrome、Firefox向页面本身发送请求；</li>\n<li>Opera不执行任何操作。</li>\n</ul>\n<p>空src产生请求的后果不容小觑：</p>\n<ul>\n<li>给服务器造成意外的流量负担，尤其时日 PV 较大时；</li>\n<li>浪费服务器计算资源；</li>\n<li>可能产生报错。</li>\n</ul>\n<blockquote>\n<p>空的href属性也存在类似问题。用户点击空链接时，浏览器也会向服务器发送HTTP请求，可以通过JavaScript阻止空链接的默认的行为。</p>\n</blockquote>\n<h1 id=\"三、Cookie\"><a href=\"#三、Cookie\" class=\"headerlink\" title=\"三、Cookie\"></a>三、Cookie</h1><h2 id=\"（1）减少-Cookie-大小\"><a href=\"#（1）减少-Cookie-大小\" class=\"headerlink\" title=\"（1）减少 Cookie 大小\"></a>（1）减少 Cookie 大小</h2><p>Cookie被用于身份认证、个性化设置等诸多用途。Cookie通过HTTP头在服务器和浏览器间来回传送，减少Cookie大小可以降低其对响应速度的影响。</p>\n<ul>\n<li>去除不必要的 Cookie；</li>\n<li>尽量压缩 Cookie 大小；</li>\n<li>注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；</li>\n<li>设置合适的过期时间。</li>\n</ul>\n<h2 id=\"（2）静态资源使用无Cookie域名\"><a href=\"#（2）静态资源使用无Cookie域名\" class=\"headerlink\" title=\"（2）静态资源使用无Cookie域名\"></a>（2）静态资源使用无Cookie域名</h2><p>静态资源一般无需使用Cookie，可以把它们放在使用二级域名或者专门域名的无Cookie服务器上，降低Cookie传送的造成的流量浪费，提高响应速度。</p>\n<h1 id=\"四、CSS\"><a href=\"#四、CSS\" class=\"headerlink\" title=\"四、CSS\"></a>四、CSS</h1><h2 id=\"（1）把样式表放在-lt-head-gt-中\"><a href=\"#（1）把样式表放在-lt-head-gt-中\" class=\"headerlink\" title=\"（1）把样式表放在&lt;head&gt;中\"></a>（1）把样式表放在<code>&lt;head&gt;</code>中</h2><p>把样式表放在<code>&lt;head&gt;</code>中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。</p>\n<p>这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。</p>\n<p>如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。</p>\n<h2 id=\"（2）不要使用CSS表达式\"><a href=\"#（2）不要使用CSS表达式\" class=\"headerlink\" title=\"（2）不要使用CSS表达式\"></a>（2）不要使用CSS表达式</h2><p>CSS表达式可以在CSS里执行JavaScript，仅IE5-IE7支持，IE8标准模式已经废弃。<br>CSS表达式超出预期的频繁执行，页面滚动、鼠标移动时都会不断执行，带来很大的性能损耗。</p>\n<h2 id=\"（3）使用-lt-link-gt-替代-import\"><a href=\"#（3）使用-lt-link-gt-替代-import\" class=\"headerlink\" title=\"（3）使用&lt;link&gt;替代@import\"></a>（3）使用<code>&lt;link&gt;</code>替代<code>@import</code></h2><p>对于IE某些版本，@import的行为和<link>放在页面底部一样。所以，不要用它。</p>\n<h2 id=\"（4）不要使用-filter\"><a href=\"#（4）不要使用-filter\" class=\"headerlink\" title=\"（4）不要使用 filter\"></a>（4）不要使用 filter</h2><p>AlphaImageLoader为IE5.5-IE8专有的技术，和CSS表达式一样，放进博物馆吧。IE专有的AlphaImageLoader滤镜可以用来修复IE7之前的版本中半透明PNG图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。</p>\n<blockquote>\n<p>注意！！！这里所说的不是 CSS3 Filter</p>\n</blockquote>\n<h1 id=\"五、Javasript\"><a href=\"#五、Javasript\" class=\"headerlink\" title=\"五、Javasript\"></a>五、Javasript</h1><h2 id=\"（1）把脚本放在页面底部\"><a href=\"#（1）把脚本放在页面底部\" class=\"headerlink\" title=\"（1）把脚本放在页面底部\"></a>（1）把脚本放在页面底部</h2><p>浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源。因此，最好将脚本放在底部，以提高页面加载速度。</p>\n<p>一些特殊场景无法将脚本放到页面底部的，可以考虑<code>&lt;script&gt;</code>的以下属性：</p>\n<ul>\n<li>defer 属性；</li>\n<li>HTML5 新增的async属性。</li>\n</ul>\n<h2 id=\"（2）使用外部JavaScript和CSS\"><a href=\"#（2）使用外部JavaScript和CSS\" class=\"headerlink\" title=\"（2）使用外部JavaScript和CSS\"></a>（2）使用外部JavaScript和CSS</h2><p>外部JavaScript和CSS文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。</p>\n<p>当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。</p>\n<h2 id=\"（3）压缩JavaScript和CSS\"><a href=\"#（3）压缩JavaScript和CSS\" class=\"headerlink\" title=\"（3）压缩JavaScript和CSS\"></a>（3）压缩JavaScript和CSS</h2><p>压缩代码可以移除非功能性的字符（注释、空格、空行等），减少文件大小，提高载入速度。</p>\n<blockquote>\n<p>得益于Node.js的流行，开源社区涌现出许多高效、易用的前端优化工具，JavaScript 和CSS压缩类的，不敢说多如牛毛，多入鸡毛倒是一点不夸张，如[UglifyJS 2] (<a href=\"https://github.com/mishoo/UglifyJS2)、csso、cssnano\" target=\"_blank\" rel=\"noopener\">https://github.com/mishoo/UglifyJS2)、csso、cssnano</a> 等。</p>\n</blockquote>\n<blockquote>\n<p>对于内嵌的CSS和JavaScript，也可以通过htmlmin等工具压缩。</p>\n</blockquote>\n<blockquote>\n<p>这些项目都有Gulp、Webpack等流行构建工具的配套版本。</p>\n</blockquote>\n<h2 id=\"（4）移除重复脚本\"><a href=\"#（4）移除重复脚本\" class=\"headerlink\" title=\"（4）移除重复脚本\"></a>（4）移除重复脚本</h2><p>重复的脚本不仅产生不必要的HTTP请求，而且重复解析执行浪费时间和计算资源。</p>\n<h2 id=\"（5）减少DOM操作\"><a href=\"#（5）减少DOM操作\" class=\"headerlink\" title=\"（5）减少DOM操作\"></a>（5）减少DOM操作</h2><p>JavaScript 操作 DOM 很慢，尤其是 DOM 节点很多时。</p>\n<p>使用时应该注意：</p>\n<ul>\n<li>缓存已经访问过的元素；</li>\n<li>使用DocumentFragment暂存DOM，整理好以后再插入DOM树；</li>\n<li>操作className，而不是多次读写style；</li>\n<li>避免使用JavaScript修复布局。</li>\n</ul>\n<h2 id=\"（6）使用高效的事件处理\"><a href=\"#（6）使用高效的事件处理\" class=\"headerlink\" title=\"（6）使用高效的事件处理\"></a>（6）使用高效的事件处理</h2><ul>\n<li>减少绑定事件监听的节点，如通过事件委托；</li>\n<li>尽早处理事件，在DOMContentLoaded即可进行，不用等到load以后。</li>\n</ul>\n<h1 id=\"六、图片\"><a href=\"#六、图片\" class=\"headerlink\" title=\"六、图片\"></a>六、图片</h1><h2 id=\"（1）优化图片\"><a href=\"#（1）优化图片\" class=\"headerlink\" title=\"（1）优化图片\"></a>（1）优化图片</h2><p>尝试把GIF格式转换成PNG格式，看看是否节省空间。在所有的PNG图片上运行pngcrush（或者其它PNG优化工具）。</p>\n<blockquote>\n<p>YDN<a href=\"https://developer.yahoo.com/performance/rules.html#opt_images\" target=\"_blank\" rel=\"noopener\">列出的相关工具</a>缺乏易用性，建议参考以下工具</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/imagemin/imagemin\" target=\"_blank\" rel=\"noopener\">imagemin</a></li>\n<li><a href=\"https://imageoptim.com/mac\" target=\"_blank\" rel=\"noopener\">imageoptim.com</a></li>\n</ul>\n<blockquote>\n<p>TODO:</p>\n<ul>\n<li>PNG 终极优化；</li>\n<li>Webp 相关内容；</li>\n<li>SVG 相关内容。</li>\n</ul>\n</blockquote>\n<p>PNG终极优化</p>\n<ul>\n<li><a href=\"https://www.queness.com/post/2507/most-effective-method-to-reduce-and-optimize-png-images\" target=\"_blank\" rel=\"noopener\">Most Effective Method to Reduce and Optimize PNG Images</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2009/07/clever-png-optimization-techniques/\" target=\"_blank\" rel=\"noopener\">Clever PNG Optimization Techniques</a></li>\n</ul>\n<h2 id=\"（2）优化CSS-Sprite\"><a href=\"#（2）优化CSS-Sprite\" class=\"headerlink\" title=\"（2）优化CSS Sprite\"></a>（2）优化CSS Sprite</h2><ul>\n<li>水平排列Sprite中的图片，垂直排列会增加图片大小；</li>\n<li>Spirite中把颜色较近的组合在一起可以降低颜色数，理想状况是低于256色以适用PNG8格式；</li>\n<li>不要在Spirite的图像中间留有较大空隙。减少空隙虽然不太影响文件大小，但可以降低用户代理把图片解压为像素图的内存消耗，对移动设备更友好。</li>\n</ul>\n<h2 id=\"（3）不要在HTML中缩放图片\"><a href=\"#（3）不要在HTML中缩放图片\" class=\"headerlink\" title=\"（3）不要在HTML中缩放图片\"></a>（3）不要在HTML中缩放图片</h2><p>不要使用<code>&lt;img&gt;</code>的width、height缩放图片，如果用到小图片，就使用相应大小的图片。如果需要</p>\n<p><code>&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt;</code></p>\n<p>那么图片本身（mycat.jpg）应该是100x100px的，而不是去缩小500x500px的图片。</p>\n<blockquote>\n<p>很多 CMS 和 CDN 都提供图片裁切功能。</p>\n</blockquote>\n<p><strong>补充</strong>：设置图片的宽和高，以免浏览器按照「猜」的宽高给图片保留的区域和实际宽高差异，产生重绘。</p>\n<h2 id=\"（4）使用体积小、可缓存的favicon-ico\"><a href=\"#（4）使用体积小、可缓存的favicon-ico\" class=\"headerlink\" title=\"（4）使用体积小、可缓存的favicon.ico\"></a>（4）使用体积小、可缓存的favicon.ico</h2><p>Favicon.ico一般存放在网站根目录下，无论是否在页面中设置，浏览器都会尝试请求这个文件。</p>\n<p>所以确保这个图标：</p>\n<ul>\n<li>存在（避免 404）；</li>\n<li>尽量小，最好小于 1K；</li>\n<li>设置较长的过期时间。</li>\n</ul>\n<blockquote>\n<p>对于较新的浏览器，可以使用PNG格式的favicon。</p>\n</blockquote>\n<h1 id=\"七、移动端\"><a href=\"#七、移动端\" class=\"headerlink\" title=\"七、移动端\"></a>七、移动端</h1><h2 id=\"（1）保证所有组件都小于25K\"><a href=\"#（1）保证所有组件都小于25K\" class=\"headerlink\" title=\"（1）保证所有组件都小于25K\"></a>（1）保证所有组件都小于25K</h2><p>这个限制是因为iPhone不能缓存大于25K的组件，注意这里指的是未压缩的大小。这就是为什么缩减内容本身也很重要，因为单纯的gzip可能不够。</p>\n<p><a href=\"https://developer.yahoo.com/performance/rules.html#under25\" target=\"_blank\" rel=\"noopener\">保证所有组件都小于25K</a></p>\n<h2 id=\"（2）打包内容为分段（multipart）文档\"><a href=\"#（2）打包内容为分段（multipart）文档\" class=\"headerlink\" title=\"（2）打包内容为分段（multipart）文档\"></a>（2）打包内容为分段（multipart）文档</h2><p>把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个HTTP请求获取多个组件（记住一点：HTTP请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone就不支持）。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>写到这里，雅虎的35条军规算是介绍完了。条目虽然很多，但经过分类，可以发现，性能优化主要切入点可以从以下几个方面去考虑：</p>\n<ul>\n<li>资源本身大小的压缩优化（想办法减少资源的体积）</li>\n<li>网络请求的全过程（从url地址栏输入发送请求开始到返回响应包的每个环节）</li>\n<li>浏览器渲染的全过程（拿到资源后浏览器渲染的每个环节）</li>\n</ul>\n<p>因此，要彻底掌握优化的方法，必须对http请求的全过程以及浏览器的渲染全过程都有深入的理解。</p>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%BE.png\" alt=\"前端性能优化\"></p>\n"},{"title":"前端性能优化——掘金小册学习笔记","_content":"\n# 从一道面试题说起\n\n\n\n>从输入 URL 到页面加载完成，发生了什么？\n\n\n\n首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接，随后我们向服务端抛出我们的 HTTP 请求，服务端处理完我们的请求之后，把目标数据放在 HTTP 响应里返回给客户端，拿到响应数据的浏览器就可以开始走一个渲染的流程。渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作（如下图所示）\n![1](http://pbzqi3myf.bkt.clouddn.com/1.png \"1\")\n\n\n* DNS 解析\n* TCP 连接\n* HTTP 请求抛出\n* 服务端处理请求，HTTP 响应返回\n* 浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户\n\n### 各个击破\n* 网络层面的性能优化\n1. DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？\n能——浏览器 DNS 缓存和 DNS prefetch（后端）\n2. TCP 每次的三次握手都急死人，有没有解决方案？\n有——长连接、预连接、接入 SPDY 协议（后端）\n3. 那么 HTTP 请求呢？\n在减少请求次数和减小请求体积方面，是不是可以做些工作呢\n4. 资源所在服务器是不是越近越好？\n部署时就把静态资源放在离我们更近的 CDN 上是不是就能更快一些？\n* 浏览器端的性能优化\n前端工程师一展拳脚的地方——资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避等等\n![2](http://pbzqi3myf.bkt.clouddn.com/2.png \"2\")\n\n\n## 网络篇1：webpack性能调优\n我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程：\n* DNS 解析\n* TCP 连接\n* <strong style=\"color: red\">HTTP 请求/响应</strong>\n\n前端工程师优化方向——<strong style=\"color: red\">HTTP 请求/响应</strong>\n* 减少请求次数\n* 减少单次请求所花费的时间\n![3](http://pbzqi3myf.bkt.clouddn.com/3.png \"3\")\n\n没错，这就是我们每天用构建工具在做的事情。时下主流构建工具主要是webpack。\n![4](http://pbzqi3myf.bkt.clouddn.com/4.png \"4\")\n\n包组成可视化工具\n![5](http://pbzqi3myf.bkt.clouddn.com/5.png \"5\")\n\n## 网络篇2：图片优化——质量与性能的博弈\n《高性能网站建设指南》的作者 Steve Souders 曾在 2013 年的一篇博客中提到：\n\n```\n<strong style=\"color: gray\">我的大部分性能优化工作都集中在 JavaScript 和 CSS 上，从早期的 Move Scripts to the Bottom 和 Put Stylesheets at the Top 规则。为了强调这些规则的重要性，我甚至说过，“JS 和 CSS 是页面上最重要的部分”。 几个月后，我意识到这是错误的。图片才是页面上最重要的部分。 我关注 JS 和 CSS 的重点也是如何能够更快地下载图片。图片是用户可以直观看到的。他们并不会关注 JS 和 CSS。确实，JS 和 CSS 会影响图片内容的展示，尤其是会影响图片的展示方式（比如图片轮播，CSS 背景图和媒体查询）。但是我认为 JS 和 CSS 只是展示图片的方式。在页面加载的过程中，应当先让图片和文字先展示，而不是试图保证 JS 和 CSS 更快下载完成。</strong>\n```\n\n雅虎军规和 Google 官方的最佳实践也都将图片优化列为前端性能优化必不可少的环节——图片优化的优先级可见一斑。\n图片优化？——权衡，图片体积压缩->牺牲部分成像质量。\n* <strong style=\"color: red;\">关键点：寻求质量与性能之间的平衡点</strong>\n\n截止到 2018 年 10月，过去一年总的 web 资源的平均请求体积是这样的：\n![6](http://pbzqi3myf.bkt.clouddn.com/6.png \"6\")\n\n具体到图片这一类的资源，平均请求体积\n![7](http://pbzqi3myf.bkt.clouddn.com/7.png \"7\")\n\n\n当然，随着我们工程师在性能方面所做的努力越来越有成效，平均来说，不管是资源总量还是图片体积，都在往越来越轻量的方向演化。这是一种值得肯定的进步。 \n但同时我们不得不承认，如图所示的这个图片体积，依然是太大了。图片在所有资源中所占的比重，也足够“触目惊心”了。为了改变这个现状，我们必须把图片优化提上日程。\n\n### 不同场景下的图片方案选型\n常用的格式：JPEG/JPG、PNG、WebP、Base64、SVG \n* 前置知识：在计算机中，像素用二进制数来表示。不同的图片格式中像素与二进制位数之间的对应关系是不同的。一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果也就越细腻，文件体积相应也会越大。 一个二进制位表示两种颜色（0|1 对应黑|白），如果一种图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色\n\n* Joint Photographic Experts Group——联合图像专家小组\n“JPEG标准”，针对图像的压缩而制定的标准，使用JPEG标准压缩的图片文件，被称为“JPEG文件”，这种文件的扩展名通常是JPG、JPEG、JPE、JFIF以及JIF\n\n![8](http://pbzqi3myf.bkt.clouddn.com/8.png \"8\")\n![9](http://pbzqi3myf.bkt.clouddn.com/9.png \"0\")\n![10](http://pbzqi3myf.bkt.clouddn.com/10.png \"10\")\n![11](http://pbzqi3myf.bkt.clouddn.com/11.png \"11\")\n![12](http://pbzqi3myf.bkt.clouddn.com/12.png \"12\")\n\n\n\n\n\n## 存储篇1：浏览器缓存机制\n缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：\n1. Memory Cache\n2. Service Worker Cache\n3. HTTP Cache\n4. Push Cache\n![13](http://pbzqi3myf.bkt.clouddn.com/13.png \"13\")\n![14](http://pbzqi3myf.bkt.clouddn.com/14.png \"14\")\n\n### 1.Memory Cache\n内存中的缓存，浏览器最先尝试命中的缓存，效率上，它是响应速度最快的缓存。\n当进程结束后，也就是 tab 关闭以后，内存里的数据也将不复存在。\n那么哪些文件会被放入内存呢？\n我们发现，Base64 格式的图片，几乎永远可以被塞进 memory cache，这可以视作浏览器为节省渲染开销的“自保行为”；\n此外，体积不大的 JS、CSS 文件，也有较大地被写入内存的几率；\n相比之下，较大的 JS、CSS 文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。\n### 2.Service Worker Cache\nService Worker 是一种独立于主线程之外的 Javascript 线程。脱离于浏览器窗体，因此无法直接访问 DOM。\n这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。\n借助 Service worker 实现的离线缓存就称为 Service Worker Cache。\n### 3.HTTP Cache\n![15](http://pbzqi3myf.bkt.clouddn.com/15.png \"15\")\n\n* Chrome官方给出的缓存决策图\n当我们的资源内容不可复用时，直接为 Cache-Control 设置 no-store，拒绝一切形式的缓存；\n否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设 Cache-Control 的值为 no-cache；\n否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为 private 还是 public；\n然后考虑该资源的过期时间，设置对应的 max-age 和 s-maxage 值；\n最后，配置协商缓存需要用到的 Etag、Last-Modified 等参数\n![16](http://pbzqi3myf.bkt.clouddn.com/16.png \"16\")\n\n## 存储篇2：本地存储——Cookie/Web Storage/indexDB\n* Cookie\n![17](http://pbzqi3myf.bkt.clouddn.com/17.png \"17\")\n\n* Web Storage\n![18](http://pbzqi3myf.bkt.clouddn.com/18.png \"18\")\n![19](http://pbzqi3myf.bkt.clouddn.com/19.png \"19\")\n![20](http://pbzqi3myf.bkt.clouddn.com/20.png \"20\")\n\n\n# 渲染篇1：服务端渲染\n* SSR：服务端渲染\n服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。\n客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。 \n 使用服务端渲染的网站，可以说是“所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。\n比如知乎就是典型的服务端渲染案例：\n![21](http://pbzqi3myf.bkt.clouddn.com/21.png \"21\")\n\n* SSR：服务端渲染解决了什么性能问题？\n<strong style=\"color: red;\">首屏加载速度过慢</strong>。在客户端渲染模式下，我们除了加载 HTML，还要等渲染所需的这部分 JS 加载完，之后还得把这部分 JS 在浏览器上再跑一遍。这一切都是发生在用户点击了我们的链接之后的事情，在这个过程结束之前，用户始终见不到我们网页的庐山真面目，也就是说用户一直在等！相比之下，服务端渲染模式下，服务器给到客户端的已经是一个直接可以拿来呈现给用户的网页，中间环节早在服务端就帮我们做掉了\n\nSSR存在什么问题呢？\n服务器资源稀少而宝贵，不到万不得已不使用\n\n# 渲染篇2：浏览器端优化\n浏览器内核可以分成两部分：渲染引擎（Layout Engine 或者 Rendering Engine）和 JS 引擎。早期渲染引擎和 JS 引擎并没有十分明确的区分，但随着 JS 引擎越来越独立，内核也成了渲染引擎的代称（下文我们将沿用这种叫法）。渲染引擎又包括了 HTML 解释器、CSS 解释器、布局、网络、存储、图形、音视频、图片解码器等等零部件。\n![22](http://pbzqi3myf.bkt.clouddn.com/22.png \"22\")\n\n目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。\n![23](http://pbzqi3myf.bkt.clouddn.com/23.png \"23\")\n![24](http://pbzqi3myf.bkt.clouddn.com/24.png \"24\")\n![25](http://pbzqi3myf.bkt.clouddn.com/25.png \"25\")\n\n\n### DOM操作\nJS 引擎和渲染引擎（浏览器内核）是独立实现的。当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了“跨界交流。\n![26](http://pbzqi3myf.bkt.clouddn.com/26.png \"26\")\n\n当我们对 DOM 的修改会引发它外观（样式）上的改变时，就会触发回流或重绘。\n![27](http://pbzqi3myf.bkt.clouddn.com/27.png \"27\")\n\n* 回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）\n* 重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。\n由此我们可以看出，重绘不一定导致回流，回流一定会导致重绘。硬要比较的话，回流比重绘做的事情更多，带来的开销也更大。但这两个说到底都是吃性能的，所以都不是什么善茬。\n\n* 怎么办？\n1.减少DOM操作\n2.考虑JS 的运行速度，比 DOM 快得多这个特性。我们减少 DOM 操作的核心思路，就是让 JS 去给 DOM 分压\n### Event Loop与异步更新策略\n* 事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。\n* 常见的 macro-task 比如： setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。 \n* 常见的 micro-task 比如: process.nextTick、Promise、MutationObserver 等\n![28](http://pbzqi3myf.bkt.clouddn.com/28.png \"28\")\n\n一个完整的 Event Loop 过程，可以概括为以下阶段：\n1. 初始状态：调用栈空。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。\n2. 全局上下文（script 标签）被推入调用栈，同步代码执行。在执行的过程中，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。\n3. 上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是一个一个执行的；而 micro-task 出队时，任务是一队一队执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。\n4. <strong style=\"color: red\">执行渲染操作，更新界面（敲黑板划重点）</strong>。\n5. 检查是否存在 Web worker 任务，如果有，则对其进行处理 。\n（上述过程循环往复，直到两个队列都清空）\n![29](http://pbzqi3myf.bkt.clouddn.com/29.png \"29\")\n\n我们更新 DOM 的时间点，应该尽可能靠近渲染的时机。\n当我们需要在异步任务中实现 DOM 修改时，把它包装成 micro 任务是相对明智的选择。\n\n### 回流与重绘\n* 最“贵”的操作：改变 DOM 元素的几何属性\n* “价格适中”的操作：改变 DOM 树的结构\n* 最容易被忽略的操作：获取一些特定属性的值\n\n如何规避呢？\n* 将敏感属性缓存起来，避免频繁改动\n\n* 避免逐条改变样式，使用类名去合并样式\n\n# 应用篇\n### 懒加载\n![30](http://pbzqi3myf.bkt.clouddn.com/30.png \"30\")\n![31](http://pbzqi3myf.bkt.clouddn.com/31.png \"31\")\n\n### 事件的节流与去抖\n输入框、滚动条、窗口resize……\n![节流去抖](http://pbzqi3myf.bkt.clouddn.com/%E5%8E%BB%E6%8A%96%E8%8A%82%E6%B5%81.gif \"节流去抖\")\n\n# 前端性能检测——可视化检测\nPerformance面板\n![32](http://pbzqi3myf.bkt.clouddn.com/32.png \"32\")\n\n可视化检测LightHouse\n![33](http://pbzqi3myf.bkt.clouddn.com/33.png \"33\")\n\n可编程性能上报方案——W3C性能API\n![34](http://pbzqi3myf.bkt.clouddn.com/31.png \"34\")\n关键性能指标：firstbyte、fpt、tti、ready 和 load 时间\n","source":"_posts/前端性能优化——掘金小册阅读整理.md","raw":"---\ntitle: 前端性能优化——掘金小册学习笔记\ncategories: 性能优化\n---\n\n# 从一道面试题说起\n\n\n\n>从输入 URL 到页面加载完成，发生了什么？\n\n\n\n首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接，随后我们向服务端抛出我们的 HTTP 请求，服务端处理完我们的请求之后，把目标数据放在 HTTP 响应里返回给客户端，拿到响应数据的浏览器就可以开始走一个渲染的流程。渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作（如下图所示）\n![1](http://pbzqi3myf.bkt.clouddn.com/1.png \"1\")\n\n\n* DNS 解析\n* TCP 连接\n* HTTP 请求抛出\n* 服务端处理请求，HTTP 响应返回\n* 浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户\n\n### 各个击破\n* 网络层面的性能优化\n1. DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？\n能——浏览器 DNS 缓存和 DNS prefetch（后端）\n2. TCP 每次的三次握手都急死人，有没有解决方案？\n有——长连接、预连接、接入 SPDY 协议（后端）\n3. 那么 HTTP 请求呢？\n在减少请求次数和减小请求体积方面，是不是可以做些工作呢\n4. 资源所在服务器是不是越近越好？\n部署时就把静态资源放在离我们更近的 CDN 上是不是就能更快一些？\n* 浏览器端的性能优化\n前端工程师一展拳脚的地方——资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避等等\n![2](http://pbzqi3myf.bkt.clouddn.com/2.png \"2\")\n\n\n## 网络篇1：webpack性能调优\n我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程：\n* DNS 解析\n* TCP 连接\n* <strong style=\"color: red\">HTTP 请求/响应</strong>\n\n前端工程师优化方向——<strong style=\"color: red\">HTTP 请求/响应</strong>\n* 减少请求次数\n* 减少单次请求所花费的时间\n![3](http://pbzqi3myf.bkt.clouddn.com/3.png \"3\")\n\n没错，这就是我们每天用构建工具在做的事情。时下主流构建工具主要是webpack。\n![4](http://pbzqi3myf.bkt.clouddn.com/4.png \"4\")\n\n包组成可视化工具\n![5](http://pbzqi3myf.bkt.clouddn.com/5.png \"5\")\n\n## 网络篇2：图片优化——质量与性能的博弈\n《高性能网站建设指南》的作者 Steve Souders 曾在 2013 年的一篇博客中提到：\n\n```\n<strong style=\"color: gray\">我的大部分性能优化工作都集中在 JavaScript 和 CSS 上，从早期的 Move Scripts to the Bottom 和 Put Stylesheets at the Top 规则。为了强调这些规则的重要性，我甚至说过，“JS 和 CSS 是页面上最重要的部分”。 几个月后，我意识到这是错误的。图片才是页面上最重要的部分。 我关注 JS 和 CSS 的重点也是如何能够更快地下载图片。图片是用户可以直观看到的。他们并不会关注 JS 和 CSS。确实，JS 和 CSS 会影响图片内容的展示，尤其是会影响图片的展示方式（比如图片轮播，CSS 背景图和媒体查询）。但是我认为 JS 和 CSS 只是展示图片的方式。在页面加载的过程中，应当先让图片和文字先展示，而不是试图保证 JS 和 CSS 更快下载完成。</strong>\n```\n\n雅虎军规和 Google 官方的最佳实践也都将图片优化列为前端性能优化必不可少的环节——图片优化的优先级可见一斑。\n图片优化？——权衡，图片体积压缩->牺牲部分成像质量。\n* <strong style=\"color: red;\">关键点：寻求质量与性能之间的平衡点</strong>\n\n截止到 2018 年 10月，过去一年总的 web 资源的平均请求体积是这样的：\n![6](http://pbzqi3myf.bkt.clouddn.com/6.png \"6\")\n\n具体到图片这一类的资源，平均请求体积\n![7](http://pbzqi3myf.bkt.clouddn.com/7.png \"7\")\n\n\n当然，随着我们工程师在性能方面所做的努力越来越有成效，平均来说，不管是资源总量还是图片体积，都在往越来越轻量的方向演化。这是一种值得肯定的进步。 \n但同时我们不得不承认，如图所示的这个图片体积，依然是太大了。图片在所有资源中所占的比重，也足够“触目惊心”了。为了改变这个现状，我们必须把图片优化提上日程。\n\n### 不同场景下的图片方案选型\n常用的格式：JPEG/JPG、PNG、WebP、Base64、SVG \n* 前置知识：在计算机中，像素用二进制数来表示。不同的图片格式中像素与二进制位数之间的对应关系是不同的。一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果也就越细腻，文件体积相应也会越大。 一个二进制位表示两种颜色（0|1 对应黑|白），如果一种图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色\n\n* Joint Photographic Experts Group——联合图像专家小组\n“JPEG标准”，针对图像的压缩而制定的标准，使用JPEG标准压缩的图片文件，被称为“JPEG文件”，这种文件的扩展名通常是JPG、JPEG、JPE、JFIF以及JIF\n\n![8](http://pbzqi3myf.bkt.clouddn.com/8.png \"8\")\n![9](http://pbzqi3myf.bkt.clouddn.com/9.png \"0\")\n![10](http://pbzqi3myf.bkt.clouddn.com/10.png \"10\")\n![11](http://pbzqi3myf.bkt.clouddn.com/11.png \"11\")\n![12](http://pbzqi3myf.bkt.clouddn.com/12.png \"12\")\n\n\n\n\n\n## 存储篇1：浏览器缓存机制\n缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：\n1. Memory Cache\n2. Service Worker Cache\n3. HTTP Cache\n4. Push Cache\n![13](http://pbzqi3myf.bkt.clouddn.com/13.png \"13\")\n![14](http://pbzqi3myf.bkt.clouddn.com/14.png \"14\")\n\n### 1.Memory Cache\n内存中的缓存，浏览器最先尝试命中的缓存，效率上，它是响应速度最快的缓存。\n当进程结束后，也就是 tab 关闭以后，内存里的数据也将不复存在。\n那么哪些文件会被放入内存呢？\n我们发现，Base64 格式的图片，几乎永远可以被塞进 memory cache，这可以视作浏览器为节省渲染开销的“自保行为”；\n此外，体积不大的 JS、CSS 文件，也有较大地被写入内存的几率；\n相比之下，较大的 JS、CSS 文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。\n### 2.Service Worker Cache\nService Worker 是一种独立于主线程之外的 Javascript 线程。脱离于浏览器窗体，因此无法直接访问 DOM。\n这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。\n借助 Service worker 实现的离线缓存就称为 Service Worker Cache。\n### 3.HTTP Cache\n![15](http://pbzqi3myf.bkt.clouddn.com/15.png \"15\")\n\n* Chrome官方给出的缓存决策图\n当我们的资源内容不可复用时，直接为 Cache-Control 设置 no-store，拒绝一切形式的缓存；\n否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设 Cache-Control 的值为 no-cache；\n否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为 private 还是 public；\n然后考虑该资源的过期时间，设置对应的 max-age 和 s-maxage 值；\n最后，配置协商缓存需要用到的 Etag、Last-Modified 等参数\n![16](http://pbzqi3myf.bkt.clouddn.com/16.png \"16\")\n\n## 存储篇2：本地存储——Cookie/Web Storage/indexDB\n* Cookie\n![17](http://pbzqi3myf.bkt.clouddn.com/17.png \"17\")\n\n* Web Storage\n![18](http://pbzqi3myf.bkt.clouddn.com/18.png \"18\")\n![19](http://pbzqi3myf.bkt.clouddn.com/19.png \"19\")\n![20](http://pbzqi3myf.bkt.clouddn.com/20.png \"20\")\n\n\n# 渲染篇1：服务端渲染\n* SSR：服务端渲染\n服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。\n客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。 \n 使用服务端渲染的网站，可以说是“所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。\n比如知乎就是典型的服务端渲染案例：\n![21](http://pbzqi3myf.bkt.clouddn.com/21.png \"21\")\n\n* SSR：服务端渲染解决了什么性能问题？\n<strong style=\"color: red;\">首屏加载速度过慢</strong>。在客户端渲染模式下，我们除了加载 HTML，还要等渲染所需的这部分 JS 加载完，之后还得把这部分 JS 在浏览器上再跑一遍。这一切都是发生在用户点击了我们的链接之后的事情，在这个过程结束之前，用户始终见不到我们网页的庐山真面目，也就是说用户一直在等！相比之下，服务端渲染模式下，服务器给到客户端的已经是一个直接可以拿来呈现给用户的网页，中间环节早在服务端就帮我们做掉了\n\nSSR存在什么问题呢？\n服务器资源稀少而宝贵，不到万不得已不使用\n\n# 渲染篇2：浏览器端优化\n浏览器内核可以分成两部分：渲染引擎（Layout Engine 或者 Rendering Engine）和 JS 引擎。早期渲染引擎和 JS 引擎并没有十分明确的区分，但随着 JS 引擎越来越独立，内核也成了渲染引擎的代称（下文我们将沿用这种叫法）。渲染引擎又包括了 HTML 解释器、CSS 解释器、布局、网络、存储、图形、音视频、图片解码器等等零部件。\n![22](http://pbzqi3myf.bkt.clouddn.com/22.png \"22\")\n\n目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。\n![23](http://pbzqi3myf.bkt.clouddn.com/23.png \"23\")\n![24](http://pbzqi3myf.bkt.clouddn.com/24.png \"24\")\n![25](http://pbzqi3myf.bkt.clouddn.com/25.png \"25\")\n\n\n### DOM操作\nJS 引擎和渲染引擎（浏览器内核）是独立实现的。当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了“跨界交流。\n![26](http://pbzqi3myf.bkt.clouddn.com/26.png \"26\")\n\n当我们对 DOM 的修改会引发它外观（样式）上的改变时，就会触发回流或重绘。\n![27](http://pbzqi3myf.bkt.clouddn.com/27.png \"27\")\n\n* 回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）\n* 重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。\n由此我们可以看出，重绘不一定导致回流，回流一定会导致重绘。硬要比较的话，回流比重绘做的事情更多，带来的开销也更大。但这两个说到底都是吃性能的，所以都不是什么善茬。\n\n* 怎么办？\n1.减少DOM操作\n2.考虑JS 的运行速度，比 DOM 快得多这个特性。我们减少 DOM 操作的核心思路，就是让 JS 去给 DOM 分压\n### Event Loop与异步更新策略\n* 事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。\n* 常见的 macro-task 比如： setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。 \n* 常见的 micro-task 比如: process.nextTick、Promise、MutationObserver 等\n![28](http://pbzqi3myf.bkt.clouddn.com/28.png \"28\")\n\n一个完整的 Event Loop 过程，可以概括为以下阶段：\n1. 初始状态：调用栈空。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。\n2. 全局上下文（script 标签）被推入调用栈，同步代码执行。在执行的过程中，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。\n3. 上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是一个一个执行的；而 micro-task 出队时，任务是一队一队执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。\n4. <strong style=\"color: red\">执行渲染操作，更新界面（敲黑板划重点）</strong>。\n5. 检查是否存在 Web worker 任务，如果有，则对其进行处理 。\n（上述过程循环往复，直到两个队列都清空）\n![29](http://pbzqi3myf.bkt.clouddn.com/29.png \"29\")\n\n我们更新 DOM 的时间点，应该尽可能靠近渲染的时机。\n当我们需要在异步任务中实现 DOM 修改时，把它包装成 micro 任务是相对明智的选择。\n\n### 回流与重绘\n* 最“贵”的操作：改变 DOM 元素的几何属性\n* “价格适中”的操作：改变 DOM 树的结构\n* 最容易被忽略的操作：获取一些特定属性的值\n\n如何规避呢？\n* 将敏感属性缓存起来，避免频繁改动\n\n* 避免逐条改变样式，使用类名去合并样式\n\n# 应用篇\n### 懒加载\n![30](http://pbzqi3myf.bkt.clouddn.com/30.png \"30\")\n![31](http://pbzqi3myf.bkt.clouddn.com/31.png \"31\")\n\n### 事件的节流与去抖\n输入框、滚动条、窗口resize……\n![节流去抖](http://pbzqi3myf.bkt.clouddn.com/%E5%8E%BB%E6%8A%96%E8%8A%82%E6%B5%81.gif \"节流去抖\")\n\n# 前端性能检测——可视化检测\nPerformance面板\n![32](http://pbzqi3myf.bkt.clouddn.com/32.png \"32\")\n\n可视化检测LightHouse\n![33](http://pbzqi3myf.bkt.clouddn.com/33.png \"33\")\n\n可编程性能上报方案——W3C性能API\n![34](http://pbzqi3myf.bkt.clouddn.com/31.png \"34\")\n关键性能指标：firstbyte、fpt、tti、ready 和 load 时间\n","slug":"前端性能优化——掘金小册阅读整理","published":1,"date":"2018-10-27T06:31:10.000Z","updated":"2018-10-27T07:16:18.000Z","_id":"cjnr2skbb0000h6r6bszw7vvl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"从一道面试题说起\"><a href=\"#从一道面试题说起\" class=\"headerlink\" title=\"从一道面试题说起\"></a>从一道面试题说起</h1><blockquote>\n<p>从输入 URL 到页面加载完成，发生了什么？</p>\n</blockquote>\n<p>首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接，随后我们向服务端抛出我们的 HTTP 请求，服务端处理完我们的请求之后，把目标数据放在 HTTP 响应里返回给客户端，拿到响应数据的浏览器就可以开始走一个渲染的流程。渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作（如下图所示）<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/1.png\" alt=\"1\" title=\"1\"></p>\n<ul>\n<li>DNS 解析</li>\n<li>TCP 连接</li>\n<li>HTTP 请求抛出</li>\n<li>服务端处理请求，HTTP 响应返回</li>\n<li>浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户</li>\n</ul>\n<h3 id=\"各个击破\"><a href=\"#各个击破\" class=\"headerlink\" title=\"各个击破\"></a>各个击破</h3><ul>\n<li>网络层面的性能优化</li>\n</ul>\n<ol>\n<li>DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？<br>能——浏览器 DNS 缓存和 DNS prefetch（后端）</li>\n<li>TCP 每次的三次握手都急死人，有没有解决方案？<br>有——长连接、预连接、接入 SPDY 协议（后端）</li>\n<li>那么 HTTP 请求呢？<br>在减少请求次数和减小请求体积方面，是不是可以做些工作呢</li>\n<li>资源所在服务器是不是越近越好？<br>部署时就把静态资源放在离我们更近的 CDN 上是不是就能更快一些？</li>\n</ol>\n<ul>\n<li>浏览器端的性能优化<br>前端工程师一展拳脚的地方——资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避等等<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/2.png\" alt=\"2\" title=\"2\"></li>\n</ul>\n<h2 id=\"网络篇1：webpack性能调优\"><a href=\"#网络篇1：webpack性能调优\" class=\"headerlink\" title=\"网络篇1：webpack性能调优\"></a>网络篇1：webpack性能调优</h2><p>我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程：</p>\n<ul>\n<li>DNS 解析</li>\n<li>TCP 连接</li>\n<li><strong style=\"color: red\">HTTP 请求/响应</strong></li>\n</ul>\n<p>前端工程师优化方向——<strong style=\"color: red\">HTTP 请求/响应</strong></p>\n<ul>\n<li>减少请求次数</li>\n<li>减少单次请求所花费的时间<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/3.png\" alt=\"3\" title=\"3\"></li>\n</ul>\n<p>没错，这就是我们每天用构建工具在做的事情。时下主流构建工具主要是webpack。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/4.png\" alt=\"4\" title=\"4\"></p>\n<p>包组成可视化工具<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/5.png\" alt=\"5\" title=\"5\"></p>\n<h2 id=\"网络篇2：图片优化——质量与性能的博弈\"><a href=\"#网络篇2：图片优化——质量与性能的博弈\" class=\"headerlink\" title=\"网络篇2：图片优化——质量与性能的博弈\"></a>网络篇2：图片优化——质量与性能的博弈</h2><p>《高性能网站建设指南》的作者 Steve Souders 曾在 2013 年的一篇博客中提到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;strong style=&quot;color: gray&quot;&gt;我的大部分性能优化工作都集中在 JavaScript 和 CSS 上，从早期的 Move Scripts to the Bottom 和 Put Stylesheets at the Top 规则。为了强调这些规则的重要性，我甚至说过，“JS 和 CSS 是页面上最重要的部分”。 几个月后，我意识到这是错误的。图片才是页面上最重要的部分。 我关注 JS 和 CSS 的重点也是如何能够更快地下载图片。图片是用户可以直观看到的。他们并不会关注 JS 和 CSS。确实，JS 和 CSS 会影响图片内容的展示，尤其是会影响图片的展示方式（比如图片轮播，CSS 背景图和媒体查询）。但是我认为 JS 和 CSS 只是展示图片的方式。在页面加载的过程中，应当先让图片和文字先展示，而不是试图保证 JS 和 CSS 更快下载完成。&lt;/strong&gt;</span><br></pre></td></tr></table></figure>\n<p>雅虎军规和 Google 官方的最佳实践也都将图片优化列为前端性能优化必不可少的环节——图片优化的优先级可见一斑。<br>图片优化？——权衡，图片体积压缩-&gt;牺牲部分成像质量。</p>\n<ul>\n<li><strong style=\"color: red;\">关键点：寻求质量与性能之间的平衡点</strong></li>\n</ul>\n<p>截止到 2018 年 10月，过去一年总的 web 资源的平均请求体积是这样的：<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/6.png\" alt=\"6\" title=\"6\"></p>\n<p>具体到图片这一类的资源，平均请求体积<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/7.png\" alt=\"7\" title=\"7\"></p>\n<p>当然，随着我们工程师在性能方面所做的努力越来越有成效，平均来说，不管是资源总量还是图片体积，都在往越来越轻量的方向演化。这是一种值得肯定的进步。<br>但同时我们不得不承认，如图所示的这个图片体积，依然是太大了。图片在所有资源中所占的比重，也足够“触目惊心”了。为了改变这个现状，我们必须把图片优化提上日程。</p>\n<h3 id=\"不同场景下的图片方案选型\"><a href=\"#不同场景下的图片方案选型\" class=\"headerlink\" title=\"不同场景下的图片方案选型\"></a>不同场景下的图片方案选型</h3><p>常用的格式：JPEG/JPG、PNG、WebP、Base64、SVG </p>\n<ul>\n<li><p>前置知识：在计算机中，像素用二进制数来表示。不同的图片格式中像素与二进制位数之间的对应关系是不同的。一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果也就越细腻，文件体积相应也会越大。 一个二进制位表示两种颜色（0|1 对应黑|白），如果一种图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色</p>\n</li>\n<li><p>Joint Photographic Experts Group——联合图像专家小组<br>“JPEG标准”，针对图像的压缩而制定的标准，使用JPEG标准压缩的图片文件，被称为“JPEG文件”，这种文件的扩展名通常是JPG、JPEG、JPE、JFIF以及JIF</p>\n</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/8.png\" alt=\"8\" title=\"8\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/9.png\" alt=\"9\" title=\"0\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/10.png\" alt=\"10\" title=\"10\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/11.png\" alt=\"11\" title=\"11\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/12.png\" alt=\"12\" title=\"12\"></p>\n<h2 id=\"存储篇1：浏览器缓存机制\"><a href=\"#存储篇1：浏览器缓存机制\" class=\"headerlink\" title=\"存储篇1：浏览器缓存机制\"></a>存储篇1：浏览器缓存机制</h2><p>缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</p>\n<ol>\n<li>Memory Cache</li>\n<li>Service Worker Cache</li>\n<li>HTTP Cache</li>\n<li>Push Cache<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/13.png\" alt=\"13\" title=\"13\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/14.png\" alt=\"14\" title=\"14\"></li>\n</ol>\n<h3 id=\"1-Memory-Cache\"><a href=\"#1-Memory-Cache\" class=\"headerlink\" title=\"1.Memory Cache\"></a>1.Memory Cache</h3><p>内存中的缓存，浏览器最先尝试命中的缓存，效率上，它是响应速度最快的缓存。<br>当进程结束后，也就是 tab 关闭以后，内存里的数据也将不复存在。<br>那么哪些文件会被放入内存呢？<br>我们发现，Base64 格式的图片，几乎永远可以被塞进 memory cache，这可以视作浏览器为节省渲染开销的“自保行为”；<br>此外，体积不大的 JS、CSS 文件，也有较大地被写入内存的几率；<br>相比之下，较大的 JS、CSS 文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。</p>\n<h3 id=\"2-Service-Worker-Cache\"><a href=\"#2-Service-Worker-Cache\" class=\"headerlink\" title=\"2.Service Worker Cache\"></a>2.Service Worker Cache</h3><p>Service Worker 是一种独立于主线程之外的 Javascript 线程。脱离于浏览器窗体，因此无法直接访问 DOM。<br>这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。<br>借助 Service worker 实现的离线缓存就称为 Service Worker Cache。</p>\n<h3 id=\"3-HTTP-Cache\"><a href=\"#3-HTTP-Cache\" class=\"headerlink\" title=\"3.HTTP Cache\"></a>3.HTTP Cache</h3><p><img src=\"http://pbzqi3myf.bkt.clouddn.com/15.png\" alt=\"15\" title=\"15\"></p>\n<ul>\n<li>Chrome官方给出的缓存决策图<br>当我们的资源内容不可复用时，直接为 Cache-Control 设置 no-store，拒绝一切形式的缓存；<br>否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设 Cache-Control 的值为 no-cache；<br>否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为 private 还是 public；<br>然后考虑该资源的过期时间，设置对应的 max-age 和 s-maxage 值；<br>最后，配置协商缓存需要用到的 Etag、Last-Modified 等参数<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/16.png\" alt=\"16\" title=\"16\"></li>\n</ul>\n<h2 id=\"存储篇2：本地存储——Cookie-Web-Storage-indexDB\"><a href=\"#存储篇2：本地存储——Cookie-Web-Storage-indexDB\" class=\"headerlink\" title=\"存储篇2：本地存储——Cookie/Web Storage/indexDB\"></a>存储篇2：本地存储——Cookie/Web Storage/indexDB</h2><ul>\n<li><p>Cookie<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/17.png\" alt=\"17\" title=\"17\"></p>\n</li>\n<li><p>Web Storage<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/18.png\" alt=\"18\" title=\"18\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/19.png\" alt=\"19\" title=\"19\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/20.png\" alt=\"20\" title=\"20\"></p>\n</li>\n</ul>\n<h1 id=\"渲染篇1：服务端渲染\"><a href=\"#渲染篇1：服务端渲染\" class=\"headerlink\" title=\"渲染篇1：服务端渲染\"></a>渲染篇1：服务端渲染</h1><ul>\n<li><p>SSR：服务端渲染<br>服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。<br>客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。<br>使用服务端渲染的网站，可以说是“所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。<br>比如知乎就是典型的服务端渲染案例：<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/21.png\" alt=\"21\" title=\"21\"></p>\n</li>\n<li><p>SSR：服务端渲染解决了什么性能问题？<br><strong style=\"color: red;\">首屏加载速度过慢</strong>。在客户端渲染模式下，我们除了加载 HTML，还要等渲染所需的这部分 JS 加载完，之后还得把这部分 JS 在浏览器上再跑一遍。这一切都是发生在用户点击了我们的链接之后的事情，在这个过程结束之前，用户始终见不到我们网页的庐山真面目，也就是说用户一直在等！相比之下，服务端渲染模式下，服务器给到客户端的已经是一个直接可以拿来呈现给用户的网页，中间环节早在服务端就帮我们做掉了</p>\n</li>\n</ul>\n<p>SSR存在什么问题呢？<br>服务器资源稀少而宝贵，不到万不得已不使用</p>\n<h1 id=\"渲染篇2：浏览器端优化\"><a href=\"#渲染篇2：浏览器端优化\" class=\"headerlink\" title=\"渲染篇2：浏览器端优化\"></a>渲染篇2：浏览器端优化</h1><p>浏览器内核可以分成两部分：渲染引擎（Layout Engine 或者 Rendering Engine）和 JS 引擎。早期渲染引擎和 JS 引擎并没有十分明确的区分，但随着 JS 引擎越来越独立，内核也成了渲染引擎的代称（下文我们将沿用这种叫法）。渲染引擎又包括了 HTML 解释器、CSS 解释器、布局、网络、存储、图形、音视频、图片解码器等等零部件。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/22.png\" alt=\"22\" title=\"22\"></p>\n<p>目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/23.png\" alt=\"23\" title=\"23\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/24.png\" alt=\"24\" title=\"24\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/25.png\" alt=\"25\" title=\"25\"></p>\n<h3 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h3><p>JS 引擎和渲染引擎（浏览器内核）是独立实现的。当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了“跨界交流。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/26.png\" alt=\"26\" title=\"26\"></p>\n<p>当我们对 DOM 的修改会引发它外观（样式）上的改变时，就会触发回流或重绘。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/27.png\" alt=\"27\" title=\"27\"></p>\n<ul>\n<li>回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）</li>\n<li><p>重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。<br>由此我们可以看出，重绘不一定导致回流，回流一定会导致重绘。硬要比较的话，回流比重绘做的事情更多，带来的开销也更大。但这两个说到底都是吃性能的，所以都不是什么善茬。</p>\n</li>\n<li><p>怎么办？<br>1.减少DOM操作<br>2.考虑JS 的运行速度，比 DOM 快得多这个特性。我们减少 DOM 操作的核心思路，就是让 JS 去给 DOM 分压</p>\n<h3 id=\"Event-Loop与异步更新策略\"><a href=\"#Event-Loop与异步更新策略\" class=\"headerlink\" title=\"Event Loop与异步更新策略\"></a>Event Loop与异步更新策略</h3></li>\n<li>事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。</li>\n<li>常见的 macro-task 比如： setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。 </li>\n<li>常见的 micro-task 比如: process.nextTick、Promise、MutationObserver 等<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/28.png\" alt=\"28\" title=\"28\"></li>\n</ul>\n<p>一个完整的 Event Loop 过程，可以概括为以下阶段：</p>\n<ol>\n<li>初始状态：调用栈空。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。</li>\n<li>全局上下文（script 标签）被推入调用栈，同步代码执行。在执行的过程中，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。</li>\n<li>上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是一个一个执行的；而 micro-task 出队时，任务是一队一队执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。</li>\n<li><strong style=\"color: red\">执行渲染操作，更新界面（敲黑板划重点）</strong>。</li>\n<li>检查是否存在 Web worker 任务，如果有，则对其进行处理 。<br>（上述过程循环往复，直到两个队列都清空）<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/29.png\" alt=\"29\" title=\"29\"></li>\n</ol>\n<p>我们更新 DOM 的时间点，应该尽可能靠近渲染的时机。<br>当我们需要在异步任务中实现 DOM 修改时，把它包装成 micro 任务是相对明智的选择。</p>\n<h3 id=\"回流与重绘\"><a href=\"#回流与重绘\" class=\"headerlink\" title=\"回流与重绘\"></a>回流与重绘</h3><ul>\n<li>最“贵”的操作：改变 DOM 元素的几何属性</li>\n<li>“价格适中”的操作：改变 DOM 树的结构</li>\n<li>最容易被忽略的操作：获取一些特定属性的值</li>\n</ul>\n<p>如何规避呢？</p>\n<ul>\n<li><p>将敏感属性缓存起来，避免频繁改动</p>\n</li>\n<li><p>避免逐条改变样式，使用类名去合并样式</p>\n</li>\n</ul>\n<h1 id=\"应用篇\"><a href=\"#应用篇\" class=\"headerlink\" title=\"应用篇\"></a>应用篇</h1><h3 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h3><p><img src=\"http://pbzqi3myf.bkt.clouddn.com/30.png\" alt=\"30\" title=\"30\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/31.png\" alt=\"31\" title=\"31\"></p>\n<h3 id=\"事件的节流与去抖\"><a href=\"#事件的节流与去抖\" class=\"headerlink\" title=\"事件的节流与去抖\"></a>事件的节流与去抖</h3><p>输入框、滚动条、窗口resize……<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E5%8E%BB%E6%8A%96%E8%8A%82%E6%B5%81.gif\" alt=\"节流去抖\" title=\"节流去抖\"></p>\n<h1 id=\"前端性能检测——可视化检测\"><a href=\"#前端性能检测——可视化检测\" class=\"headerlink\" title=\"前端性能检测——可视化检测\"></a>前端性能检测——可视化检测</h1><p>Performance面板<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/32.png\" alt=\"32\" title=\"32\"></p>\n<p>可视化检测LightHouse<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/33.png\" alt=\"33\" title=\"33\"></p>\n<p>可编程性能上报方案——W3C性能API<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/31.png\" alt=\"34\" title=\"34\"><br>关键性能指标：firstbyte、fpt、tti、ready 和 load 时间</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"从一道面试题说起\"><a href=\"#从一道面试题说起\" class=\"headerlink\" title=\"从一道面试题说起\"></a>从一道面试题说起</h1><blockquote>\n<p>从输入 URL 到页面加载完成，发生了什么？</p>\n</blockquote>\n<p>首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接，随后我们向服务端抛出我们的 HTTP 请求，服务端处理完我们的请求之后，把目标数据放在 HTTP 响应里返回给客户端，拿到响应数据的浏览器就可以开始走一个渲染的流程。渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作（如下图所示）<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/1.png\" alt=\"1\" title=\"1\"></p>\n<ul>\n<li>DNS 解析</li>\n<li>TCP 连接</li>\n<li>HTTP 请求抛出</li>\n<li>服务端处理请求，HTTP 响应返回</li>\n<li>浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户</li>\n</ul>\n<h3 id=\"各个击破\"><a href=\"#各个击破\" class=\"headerlink\" title=\"各个击破\"></a>各个击破</h3><ul>\n<li>网络层面的性能优化</li>\n</ul>\n<ol>\n<li>DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？<br>能——浏览器 DNS 缓存和 DNS prefetch（后端）</li>\n<li>TCP 每次的三次握手都急死人，有没有解决方案？<br>有——长连接、预连接、接入 SPDY 协议（后端）</li>\n<li>那么 HTTP 请求呢？<br>在减少请求次数和减小请求体积方面，是不是可以做些工作呢</li>\n<li>资源所在服务器是不是越近越好？<br>部署时就把静态资源放在离我们更近的 CDN 上是不是就能更快一些？</li>\n</ol>\n<ul>\n<li>浏览器端的性能优化<br>前端工程师一展拳脚的地方——资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避等等<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/2.png\" alt=\"2\" title=\"2\"></li>\n</ul>\n<h2 id=\"网络篇1：webpack性能调优\"><a href=\"#网络篇1：webpack性能调优\" class=\"headerlink\" title=\"网络篇1：webpack性能调优\"></a>网络篇1：webpack性能调优</h2><p>我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程：</p>\n<ul>\n<li>DNS 解析</li>\n<li>TCP 连接</li>\n<li><strong style=\"color: red\">HTTP 请求/响应</strong></li>\n</ul>\n<p>前端工程师优化方向——<strong style=\"color: red\">HTTP 请求/响应</strong></p>\n<ul>\n<li>减少请求次数</li>\n<li>减少单次请求所花费的时间<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/3.png\" alt=\"3\" title=\"3\"></li>\n</ul>\n<p>没错，这就是我们每天用构建工具在做的事情。时下主流构建工具主要是webpack。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/4.png\" alt=\"4\" title=\"4\"></p>\n<p>包组成可视化工具<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/5.png\" alt=\"5\" title=\"5\"></p>\n<h2 id=\"网络篇2：图片优化——质量与性能的博弈\"><a href=\"#网络篇2：图片优化——质量与性能的博弈\" class=\"headerlink\" title=\"网络篇2：图片优化——质量与性能的博弈\"></a>网络篇2：图片优化——质量与性能的博弈</h2><p>《高性能网站建设指南》的作者 Steve Souders 曾在 2013 年的一篇博客中提到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;strong style=&quot;color: gray&quot;&gt;我的大部分性能优化工作都集中在 JavaScript 和 CSS 上，从早期的 Move Scripts to the Bottom 和 Put Stylesheets at the Top 规则。为了强调这些规则的重要性，我甚至说过，“JS 和 CSS 是页面上最重要的部分”。 几个月后，我意识到这是错误的。图片才是页面上最重要的部分。 我关注 JS 和 CSS 的重点也是如何能够更快地下载图片。图片是用户可以直观看到的。他们并不会关注 JS 和 CSS。确实，JS 和 CSS 会影响图片内容的展示，尤其是会影响图片的展示方式（比如图片轮播，CSS 背景图和媒体查询）。但是我认为 JS 和 CSS 只是展示图片的方式。在页面加载的过程中，应当先让图片和文字先展示，而不是试图保证 JS 和 CSS 更快下载完成。&lt;/strong&gt;</span><br></pre></td></tr></table></figure>\n<p>雅虎军规和 Google 官方的最佳实践也都将图片优化列为前端性能优化必不可少的环节——图片优化的优先级可见一斑。<br>图片优化？——权衡，图片体积压缩-&gt;牺牲部分成像质量。</p>\n<ul>\n<li><strong style=\"color: red;\">关键点：寻求质量与性能之间的平衡点</strong></li>\n</ul>\n<p>截止到 2018 年 10月，过去一年总的 web 资源的平均请求体积是这样的：<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/6.png\" alt=\"6\" title=\"6\"></p>\n<p>具体到图片这一类的资源，平均请求体积<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/7.png\" alt=\"7\" title=\"7\"></p>\n<p>当然，随着我们工程师在性能方面所做的努力越来越有成效，平均来说，不管是资源总量还是图片体积，都在往越来越轻量的方向演化。这是一种值得肯定的进步。<br>但同时我们不得不承认，如图所示的这个图片体积，依然是太大了。图片在所有资源中所占的比重，也足够“触目惊心”了。为了改变这个现状，我们必须把图片优化提上日程。</p>\n<h3 id=\"不同场景下的图片方案选型\"><a href=\"#不同场景下的图片方案选型\" class=\"headerlink\" title=\"不同场景下的图片方案选型\"></a>不同场景下的图片方案选型</h3><p>常用的格式：JPEG/JPG、PNG、WebP、Base64、SVG </p>\n<ul>\n<li><p>前置知识：在计算机中，像素用二进制数来表示。不同的图片格式中像素与二进制位数之间的对应关系是不同的。一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果也就越细腻，文件体积相应也会越大。 一个二进制位表示两种颜色（0|1 对应黑|白），如果一种图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色</p>\n</li>\n<li><p>Joint Photographic Experts Group——联合图像专家小组<br>“JPEG标准”，针对图像的压缩而制定的标准，使用JPEG标准压缩的图片文件，被称为“JPEG文件”，这种文件的扩展名通常是JPG、JPEG、JPE、JFIF以及JIF</p>\n</li>\n</ul>\n<p><img src=\"http://pbzqi3myf.bkt.clouddn.com/8.png\" alt=\"8\" title=\"8\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/9.png\" alt=\"9\" title=\"0\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/10.png\" alt=\"10\" title=\"10\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/11.png\" alt=\"11\" title=\"11\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/12.png\" alt=\"12\" title=\"12\"></p>\n<h2 id=\"存储篇1：浏览器缓存机制\"><a href=\"#存储篇1：浏览器缓存机制\" class=\"headerlink\" title=\"存储篇1：浏览器缓存机制\"></a>存储篇1：浏览器缓存机制</h2><p>缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</p>\n<ol>\n<li>Memory Cache</li>\n<li>Service Worker Cache</li>\n<li>HTTP Cache</li>\n<li>Push Cache<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/13.png\" alt=\"13\" title=\"13\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/14.png\" alt=\"14\" title=\"14\"></li>\n</ol>\n<h3 id=\"1-Memory-Cache\"><a href=\"#1-Memory-Cache\" class=\"headerlink\" title=\"1.Memory Cache\"></a>1.Memory Cache</h3><p>内存中的缓存，浏览器最先尝试命中的缓存，效率上，它是响应速度最快的缓存。<br>当进程结束后，也就是 tab 关闭以后，内存里的数据也将不复存在。<br>那么哪些文件会被放入内存呢？<br>我们发现，Base64 格式的图片，几乎永远可以被塞进 memory cache，这可以视作浏览器为节省渲染开销的“自保行为”；<br>此外，体积不大的 JS、CSS 文件，也有较大地被写入内存的几率；<br>相比之下，较大的 JS、CSS 文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。</p>\n<h3 id=\"2-Service-Worker-Cache\"><a href=\"#2-Service-Worker-Cache\" class=\"headerlink\" title=\"2.Service Worker Cache\"></a>2.Service Worker Cache</h3><p>Service Worker 是一种独立于主线程之外的 Javascript 线程。脱离于浏览器窗体，因此无法直接访问 DOM。<br>这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。<br>借助 Service worker 实现的离线缓存就称为 Service Worker Cache。</p>\n<h3 id=\"3-HTTP-Cache\"><a href=\"#3-HTTP-Cache\" class=\"headerlink\" title=\"3.HTTP Cache\"></a>3.HTTP Cache</h3><p><img src=\"http://pbzqi3myf.bkt.clouddn.com/15.png\" alt=\"15\" title=\"15\"></p>\n<ul>\n<li>Chrome官方给出的缓存决策图<br>当我们的资源内容不可复用时，直接为 Cache-Control 设置 no-store，拒绝一切形式的缓存；<br>否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设 Cache-Control 的值为 no-cache；<br>否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为 private 还是 public；<br>然后考虑该资源的过期时间，设置对应的 max-age 和 s-maxage 值；<br>最后，配置协商缓存需要用到的 Etag、Last-Modified 等参数<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/16.png\" alt=\"16\" title=\"16\"></li>\n</ul>\n<h2 id=\"存储篇2：本地存储——Cookie-Web-Storage-indexDB\"><a href=\"#存储篇2：本地存储——Cookie-Web-Storage-indexDB\" class=\"headerlink\" title=\"存储篇2：本地存储——Cookie/Web Storage/indexDB\"></a>存储篇2：本地存储——Cookie/Web Storage/indexDB</h2><ul>\n<li><p>Cookie<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/17.png\" alt=\"17\" title=\"17\"></p>\n</li>\n<li><p>Web Storage<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/18.png\" alt=\"18\" title=\"18\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/19.png\" alt=\"19\" title=\"19\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/20.png\" alt=\"20\" title=\"20\"></p>\n</li>\n</ul>\n<h1 id=\"渲染篇1：服务端渲染\"><a href=\"#渲染篇1：服务端渲染\" class=\"headerlink\" title=\"渲染篇1：服务端渲染\"></a>渲染篇1：服务端渲染</h1><ul>\n<li><p>SSR：服务端渲染<br>服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。<br>客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。<br>使用服务端渲染的网站，可以说是“所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。<br>比如知乎就是典型的服务端渲染案例：<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/21.png\" alt=\"21\" title=\"21\"></p>\n</li>\n<li><p>SSR：服务端渲染解决了什么性能问题？<br><strong style=\"color: red;\">首屏加载速度过慢</strong>。在客户端渲染模式下，我们除了加载 HTML，还要等渲染所需的这部分 JS 加载完，之后还得把这部分 JS 在浏览器上再跑一遍。这一切都是发生在用户点击了我们的链接之后的事情，在这个过程结束之前，用户始终见不到我们网页的庐山真面目，也就是说用户一直在等！相比之下，服务端渲染模式下，服务器给到客户端的已经是一个直接可以拿来呈现给用户的网页，中间环节早在服务端就帮我们做掉了</p>\n</li>\n</ul>\n<p>SSR存在什么问题呢？<br>服务器资源稀少而宝贵，不到万不得已不使用</p>\n<h1 id=\"渲染篇2：浏览器端优化\"><a href=\"#渲染篇2：浏览器端优化\" class=\"headerlink\" title=\"渲染篇2：浏览器端优化\"></a>渲染篇2：浏览器端优化</h1><p>浏览器内核可以分成两部分：渲染引擎（Layout Engine 或者 Rendering Engine）和 JS 引擎。早期渲染引擎和 JS 引擎并没有十分明确的区分，但随着 JS 引擎越来越独立，内核也成了渲染引擎的代称（下文我们将沿用这种叫法）。渲染引擎又包括了 HTML 解释器、CSS 解释器、布局、网络、存储、图形、音视频、图片解码器等等零部件。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/22.png\" alt=\"22\" title=\"22\"></p>\n<p>目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/23.png\" alt=\"23\" title=\"23\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/24.png\" alt=\"24\" title=\"24\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/25.png\" alt=\"25\" title=\"25\"></p>\n<h3 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h3><p>JS 引擎和渲染引擎（浏览器内核）是独立实现的。当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了“跨界交流。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/26.png\" alt=\"26\" title=\"26\"></p>\n<p>当我们对 DOM 的修改会引发它外观（样式）上的改变时，就会触发回流或重绘。<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/27.png\" alt=\"27\" title=\"27\"></p>\n<ul>\n<li>回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）</li>\n<li><p>重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。<br>由此我们可以看出，重绘不一定导致回流，回流一定会导致重绘。硬要比较的话，回流比重绘做的事情更多，带来的开销也更大。但这两个说到底都是吃性能的，所以都不是什么善茬。</p>\n</li>\n<li><p>怎么办？<br>1.减少DOM操作<br>2.考虑JS 的运行速度，比 DOM 快得多这个特性。我们减少 DOM 操作的核心思路，就是让 JS 去给 DOM 分压</p>\n<h3 id=\"Event-Loop与异步更新策略\"><a href=\"#Event-Loop与异步更新策略\" class=\"headerlink\" title=\"Event Loop与异步更新策略\"></a>Event Loop与异步更新策略</h3></li>\n<li>事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。</li>\n<li>常见的 macro-task 比如： setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。 </li>\n<li>常见的 micro-task 比如: process.nextTick、Promise、MutationObserver 等<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/28.png\" alt=\"28\" title=\"28\"></li>\n</ul>\n<p>一个完整的 Event Loop 过程，可以概括为以下阶段：</p>\n<ol>\n<li>初始状态：调用栈空。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。</li>\n<li>全局上下文（script 标签）被推入调用栈，同步代码执行。在执行的过程中，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。</li>\n<li>上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是一个一个执行的；而 micro-task 出队时，任务是一队一队执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。</li>\n<li><strong style=\"color: red\">执行渲染操作，更新界面（敲黑板划重点）</strong>。</li>\n<li>检查是否存在 Web worker 任务，如果有，则对其进行处理 。<br>（上述过程循环往复，直到两个队列都清空）<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/29.png\" alt=\"29\" title=\"29\"></li>\n</ol>\n<p>我们更新 DOM 的时间点，应该尽可能靠近渲染的时机。<br>当我们需要在异步任务中实现 DOM 修改时，把它包装成 micro 任务是相对明智的选择。</p>\n<h3 id=\"回流与重绘\"><a href=\"#回流与重绘\" class=\"headerlink\" title=\"回流与重绘\"></a>回流与重绘</h3><ul>\n<li>最“贵”的操作：改变 DOM 元素的几何属性</li>\n<li>“价格适中”的操作：改变 DOM 树的结构</li>\n<li>最容易被忽略的操作：获取一些特定属性的值</li>\n</ul>\n<p>如何规避呢？</p>\n<ul>\n<li><p>将敏感属性缓存起来，避免频繁改动</p>\n</li>\n<li><p>避免逐条改变样式，使用类名去合并样式</p>\n</li>\n</ul>\n<h1 id=\"应用篇\"><a href=\"#应用篇\" class=\"headerlink\" title=\"应用篇\"></a>应用篇</h1><h3 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h3><p><img src=\"http://pbzqi3myf.bkt.clouddn.com/30.png\" alt=\"30\" title=\"30\"><br><img src=\"http://pbzqi3myf.bkt.clouddn.com/31.png\" alt=\"31\" title=\"31\"></p>\n<h3 id=\"事件的节流与去抖\"><a href=\"#事件的节流与去抖\" class=\"headerlink\" title=\"事件的节流与去抖\"></a>事件的节流与去抖</h3><p>输入框、滚动条、窗口resize……<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/%E5%8E%BB%E6%8A%96%E8%8A%82%E6%B5%81.gif\" alt=\"节流去抖\" title=\"节流去抖\"></p>\n<h1 id=\"前端性能检测——可视化检测\"><a href=\"#前端性能检测——可视化检测\" class=\"headerlink\" title=\"前端性能检测——可视化检测\"></a>前端性能检测——可视化检测</h1><p>Performance面板<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/32.png\" alt=\"32\" title=\"32\"></p>\n<p>可视化检测LightHouse<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/33.png\" alt=\"33\" title=\"33\"></p>\n<p>可编程性能上报方案——W3C性能API<br><img src=\"http://pbzqi3myf.bkt.clouddn.com/31.png\" alt=\"34\" title=\"34\"><br>关键性能指标：firstbyte、fpt、tti、ready 和 load 时间</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjkpapzii000148r6lzo2ly0x","category_id":"cjkpapzj0000548r69mzlfn4k","_id":"cjkpapzj6000848r6f0ow9vth"},{"post_id":"cjkpapzip000348r6mqoagvve","category_id":"cjkpapzj5000748r6aidzdtyn","_id":"cjkpapzj7000a48r6l74gcbe5"},{"post_id":"cjkpapzj2000648r6fsfifh7y","category_id":"cjkpapzj6000948r6c982h2mo","_id":"cjkpapzj8000b48r688i1wygi"},{"post_id":"cjkpapzjm000c48r6lelifuc7","category_id":"cjkpapzj6000948r6c982h2mo","_id":"cjkpapzjp000d48r696dd8i7n"},{"post_id":"cjkrpoghe00001br6tslvz719","category_id":"cjkrpoghj00011br6kev2v54m","_id":"cjkrpoghm00021br6qb3q3lia"},{"post_id":"cjnr2skbb0000h6r6bszw7vvl","category_id":"cjkrpoghj00011br6kev2v54m","_id":"cjnr3zyn20002h6r61kd5no9l"}],"PostTag":[],"Tag":[]}}